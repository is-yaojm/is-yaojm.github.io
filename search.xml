<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Algorithm-二叉树</title>
    <url>/2022/04/11/Algorithm-%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<h2 id="1-二叉树基础"><a href="#1-二叉树基础" class="headerlink" title="1 二叉树基础"></a>1 二叉树基础</h2><h3 id="1-1-二叉树的种类"><a href="#1-1-二叉树的种类" class="headerlink" title="1.1 二叉树的种类"></a>1.1 二叉树的种类</h3><h4 id="1-1-1-满二叉树"><a href="#1-1-1-满二叉树" class="headerlink" title="1.1.1 满二叉树"></a>1.1.1 满二叉树</h4><blockquote>
<p>如果一棵二叉树只有度为0和度为2的结点，且度为0的结点在同一层，则这颗树为满二叉树。<br><img src="tree.png" width="60%" height="50%"><br>满二叉树：深度为k，有2^k-1个结点。</p>
</blockquote>
<h4 id="1-1-2-完全二叉树"><a href="#1-1-2-完全二叉树" class="headerlink" title="1.1.2 完全二叉树"></a>1.1.2 完全二叉树</h4><blockquote>
<p>完全二叉树：除底层结点可能没填满外，其余每层结点数都达到了最大值，且最下面一层的结点有右必有左，有左不一定有右。<br><img src="tree2.png" alt="完全二叉树"><br>完全二叉树：若最底层为第h层，则该层包含<code>1~2^(h-1)</code>个结点</p>
</blockquote>
<h4 id="1-1-3-二叉树搜索树"><a href="#1-1-3-二叉树搜索树" class="headerlink" title="1.1.3 二叉树搜索树"></a>1.1.3 二叉树搜索树</h4><blockquote>
<p>二叉搜索树是一个有序数。</p>
</blockquote>
<ul>
<li>规则：<ul>
<li>每一个结点都是左小右大；</li>
<li>左子树的值小于根结点，右子树的值大于根节点。</li>
</ul>
</li>
</ul>
<h4 id="1-1-4-平衡二叉树"><a href="#1-1-4-平衡二叉树" class="headerlink" title="1.1.4 平衡二叉树"></a>1.1.4 平衡二叉树</h4><blockquote>
<p>AVL树：它是一棵空树或它的左右两个字数的高度差的绝对值不超过1，并且左右两个字数也都是一颗平衡二叉树。<br><img src="tree4.png" alt="平衡二叉树"> </p>
</blockquote>
<h3 id="1-2-二叉树的存储方式"><a href="#1-2-二叉树的存储方式" class="headerlink" title="1.2 二叉树的存储方式"></a>1.2 二叉树的存储方式</h3><blockquote>
<p>顺序存储：元素在内存中是连续分布的。（数组）</p>
</blockquote>
<blockquote>
<p>链式存储：通过指针把分布在散落在各个地址的节点串联到了一起。（链表，指针）</p>
</blockquote>
<ul>
<li>数组顺序存储二叉树： <img src="arrayTree.png" width="50%" height="60%">
- 节点数组下标计算：若父元素数组下标为i，则左孩子就是 i * 2 + 1，右孩子就是 i * 2 + 2。</li>
</ul>
<h3 id="1-3-二叉树的遍历方式"><a href="#1-3-二叉树的遍历方式" class="headerlink" title="1.3 二叉树的遍历方式"></a>1.3 二叉树的遍历方式</h3><h4 id="1-3-1-深度优先遍历"><a href="#1-3-1-深度优先遍历" class="headerlink" title="1.3.1 深度优先遍历"></a>1.3.1 深度优先遍历</h4><blockquote>
<p>先往深处走，遇到叶子节点再往回走。</p>
</blockquote>
<ul>
<li><p>DFS：（前中后 - <strong>中间节点</strong>的遍历顺序）</p>
<ul>
<li>前序遍历（递归法，迭代法）（中左右）</li>
<li>中序遍历（递归法，迭代法）（左中右）</li>
<li>后序遍历（递归法，迭代法）（左右中）</li>
</ul>
</li>
<li><p>前中后序遍历可以借助<code>栈</code>使用<code>非递归</code>的方式来实现。</p>
</li>
</ul>
<h4 id="1-3-2-广度优先遍历"><a href="#1-3-2-广度优先遍历" class="headerlink" title="1.3.2 广度优先遍历"></a>1.3.2 广度优先遍历</h4><blockquote>
<p>一层一层区遍历。BFS的实现一般使用队列来实现，需要用到先进先出的结构。</p>
</blockquote>
<ul>
<li>BFS：<ul>
<li>层次遍历（迭代法）</li>
</ul>
</li>
</ul>
<h3 id="1-4-二叉树的定义"><a href="#1-4-二叉树的定义" class="headerlink" title="1.4 二叉树的定义"></a>1.4 二叉树的定义</h3><blockquote>
<p>Java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line">    TreeNode() &#123;&#125;</span><br><span class="line">    TreeNode(<span class="type">int</span> val) &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode(<span class="type">int</span> val, TreeNode left, TreeNode right) &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>JavaScript</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">TreeNode</span>(<span class="params"> val, left, right </span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">val</span> = ( val === <span class="literal">undefined</span> ? <span class="number">0</span> : val );</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">left</span> = ( left === <span class="literal">undefined</span> ? <span class="literal">null</span> : left );</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">right</span> = ( right === <span class="literal">undefined</span> ? <span class="literal">null</span> : right );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>二叉树节点的深度： 指从根节点到该节点的最长简单路径的条数。</li>
<li>二叉树节点的高度： 指从该节点到叶子节点的最长简单路径边的条数。</li>
<li>二叉树要求比较高度： 使用后序遍历。</li>
<li>求二叉树的最小深度和求二叉树的最大深度的差别主要在于处理左右孩子不为空的逻辑。</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS-BFC规则</title>
    <url>/2022/04/28/CSS-BFC%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<h2 id="BFC规则"><a href="#BFC规则" class="headerlink" title="BFC规则"></a>BFC规则</h2><blockquote>
<p>BFC : 块级元素格式化上下文。它决定了块级元素如何对它的内容进行布局，以及和其他元素的关系的相互关系。BFC是一个独立的空间，里面的元素和外面的元素不会相互影响。</p>
</blockquote>
<ul>
<li><p>触发条件</p>
<ul>
<li>float不为none；</li>
<li>position属性为absolute和fixed；</li>
<li>overflow溢出隐藏的值不为visible；</li>
<li>html根标签；</li>
</ul>
</li>
<li><p>BFC有哪个规则</p>
<ul>
<li>浮动的元素会被父级计算高度（父级触发BFC）；</li>
<li>BFC区域和浮动元素不重叠；</li>
<li>margin不会传递给父级（父级触发了BFC）；</li>
<li>两个相邻元素上下margin会重叠；</li>
<li>BFC盒子内部的子标签按照垂直从上到下排列；</li>
<li>共用一个BFC盒子的垂直方向上的外边距会发生塌陷现象；</li>
<li>子标签都会在父盒子的左边界停靠；</li>
<li>BFC盒子是一个密闭空间，内外互不影响。</li>
</ul>
</li>
</ul>
<ul>
<li>可解决的问题<ul>
<li>外边距塌陷问题；</li>
<li>浮动特性；</li>
<li>清除浮动影响；</li>
<li>图文不环绕问题。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS-知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS-Grid布局</title>
    <url>/2022/04/28/CSS-Grid%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h1 id="CSS-Grid布局"><a href="#CSS-Grid布局" class="headerlink" title="CSS - Grid布局"></a>CSS - Grid布局</h1><ul>
<li><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">CSS-Grid网格布局教程-阮一峰老师</a></li>
<li><a href="https://www.runoob.com/try/gridgarden/index.html">CSS-grid小游戏</a>哈哈哈哈 很有意思的小游戏，还可以学习布局</li>
</ul>
<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><blockquote>
<p>Grid布局： 将容器划分为行和列，产生单元格，然后指定项目所在的单元格。</p>
</blockquote>
<ul>
<li>Flex布局：是轴线布局，只能指定“项目”针对轴线的位置，可看作是一维布局。</li>
<li>Grid布局：划分行和列，产生单元格，可看作二维布局。</li>
</ul>
<h2 id="2-基本概念"><a href="#2-基本概念" class="headerlink" title="2 基本概念"></a>2 基本概念</h2><h3 id="2-1-容器和项目"><a href="#2-1-容器和项目" class="headerlink" title="2.1 容器和项目"></a>2.1 容器和项目</h3><ol>
<li><p>容器（具有容器属性）<br><a href="container.png">容器</a></p>
</li>
<li><p>项目（具有项目属性）<br><a href="item.png">项目</a></p>
</li>
<li><p>grid布局中的各种要素<br><a href="grid.png">grid</a></p>
</li>
</ol>
<h2 id="3-容器属性"><a href="#3-容器属性" class="headerlink" title="3 容器属性"></a>3 容器属性</h2><h3 id="3-1-dispaly属性"><a href="#3-1-dispaly属性" class="headerlink" title="3.1 dispaly属性"></a>3.1 dispaly属性</h3><blockquote>
<p><code>display: grid</code> 指定一个容器采用<code>网格布局</code>。默认情况下，容器元素都是块级元素，但是也可设置为行内元素<code>/* display: inline-grid; */</code>。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Bin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-size</span>: <span class="number">2em</span>; </span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-id">#container</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="comment">/* 网格布局 */</span></span></span><br><span class="line"><span class="language-css">                <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">                <span class="comment">/* 行内网格布局 */</span></span></span><br><span class="line"><span class="language-css">                <span class="comment">/* display: inline-grid; */</span></span></span><br><span class="line"><span class="language-css">                <span class="attribute">grid-template-columns</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">grid-template-rows</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-size</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e5e4e9</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.item-1</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: <span class="number">#ef342a</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.item-2</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: <span class="number">#f68f26</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.item-3</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: <span class="number">#4ba946</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.item-4</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: <span class="number">#0376c2</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.item-5</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: <span class="number">#c077af</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.item-6</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: <span class="number">#f8d29d</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-4&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-5&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-6&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-7&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-8&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-9&quot;</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意：若容器设置为网格布局之后，容器中的项目的部分属性会失效：<ul>
<li><code>float</code></li>
<li><code>display: inline-block </code></li>
<li><code>display: table-cell</code> </li>
<li><code>vertical-align</code>和<code>column-*</code></li>
</ul>
</li>
</ul>
<h3 id="3-2-grid-template-columns属性-和-grid-template-rows属性"><a href="#3-2-grid-template-columns属性-和-grid-template-rows属性" class="headerlink" title="3.2 grid-template-columns属性 和 grid-template-rows属性"></a>3.2 grid-template-columns属性 和 grid-template-rows属性</h3><blockquote>
<p>grid-template-columns属性: 定义每一列列宽；<br>grid-template-rows属性: 定义每一行行高。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="comment">/* 指定一个三行三列的网格，行高和列宽都是100px ，单位可以是绝对单位可以是相对单位，或者百分比*/</span></span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-1-repeat-函数"><a href="#3-2-1-repeat-函数" class="headerlink" title="3.2.1 repeat()函数"></a>3.2.1 repeat()函数</h4><blockquote>
<p>repeat()函数： 简化重复的值。</p>
</blockquote>
<ul>
<li>两个参数：<ul>
<li>参数1： 重复的次数（几行，或者几列）；</li>
<li>参数2： 重复的值</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123; </span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>);</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>repeat()定义某种模式：<code>grid-template-columns: repeat(1, 100px 20px 80px);</code></li>
<li></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#container</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">1</span>, <span class="number">100px</span> <span class="number">20px</span> <span class="number">80px</span>);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">50px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="repeat1.png">三行</a><br><a href="repeat2.png">二行</a><br><a href="repeat3.png">一行</a></p>
<h4 id="3-2-2-auto-fill关键字"><a href="#3-2-2-auto-fill关键字" class="headerlink" title="3.2.2 auto-fill关键字"></a>3.2.2 auto-fill关键字</h4><blockquote>
<p>当单元格的大小固定，但容器的大小不确定时，如果希望每一行（或每一列）容纳尽可能多的单元格，可以使用<code>auto-fill关键字</code>表示自动填充。</p>
</blockquote>
<p><a href="autofill.png">auto-fill关键字</a></p>
<h4 id="3-2-3-fr关键字"><a href="#3-2-3-fr关键字" class="headerlink" title="3.2.3 fr关键字"></a>3.2.3 fr关键字</h4><blockquote>
<p>fr关键字： 方便表示比例关系。</p>
</blockquote>
<ul>
<li>如果两列的宽度分别为1fr和2fr，就表示后者是前者的两倍。</li>
<li>fr关键字可以和绝对长度的单位结合使用。</li>
</ul>
<p><a href="fr.png">fr关键字</a></p>
<h4 id="3-2-4-minmax"><a href="#3-2-4-minmax" class="headerlink" title="3.2.4 minmax()"></a>3.2.4 minmax()</h4><blockquote>
<p>minmax()函数:产生一个长度范围，表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="built_in">minmax</span>(<span class="number">100px</span>, <span class="number">1</span>fr);</span><br></pre></td></tr></table></figure>

<h3 id="3-3-gap属性"><a href="#3-3-gap属性" class="headerlink" title="3.3 gap属性"></a>3.3 gap属性</h3><blockquote>
<p>grid-row-gap 属性:设置行间距<br>grid-column-gap 属性： 设置列间距</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-row</span>-<span class="attribute">gap</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">grid-column</span>-<span class="attribute">gap</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>grid-gap 属性 ：行列间距的简写形式</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">grid-gap</span>: &lt;grid-row-gap&gt; &lt;grid-column-gap&gt;;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-grid-template-areas-属性"><a href="#3-4-grid-template-areas-属性" class="headerlink" title="3.4 grid-template-areas 属性"></a>3.4 grid-template-areas 属性</h3><blockquote>
<p>grid-template-areas属性 : 用于定义区域</p>
</blockquote>
<h3 id="3-4-grid-auto-flow属性"><a href="#3-4-grid-auto-flow属性" class="headerlink" title="3.4 grid-auto-flow属性"></a>3.4 grid-auto-flow属性</h3><blockquote>
<p>grid-auto-flow属性 : 划分网格线以后，容器的子元素会按照顺序，自动放置在每一个网格。默认的放置顺序是先行后列，即填满第一行，再开始放入第二行（就是子元素的排放顺序）</p>
</blockquote>
<ul>
<li>grid-auto-flow：row（先行后列  默认）</li>
<li>grid-auto-flow：column （先列后行）</li>
<li>跟grid-auto-flow相关  dense（提高空间的利用率）</li>
</ul>
<h3 id="3-5-单元格内容位置属性"><a href="#3-5-单元格内容位置属性" class="headerlink" title="3.5 单元格内容位置属性"></a>3.5 单元格内容位置属性</h3><blockquote>
<p>items属性: 单元格里面的内容。</p>
</blockquote>
<ul>
<li><code>justify-items属性</code> : 设置<strong>单元格内容</strong>的<code>水平</code>位置（左中右）；</li>
<li><code>align-items属性设置</code> : <strong>单元格内容</strong>的<code>垂直</code>位置（上中下）;</li>
<li><code>place-items属性</code>: 是<code>align-items属性</code>和<code>justify-items属性</code>的合并简写形式。<ul>
<li><code>place-items: &lt;align-items&gt; &lt;justify-items&gt;;</code>,如果省略第二个值，则浏览器认为与第一个值相等。</li>
</ul>
</li>
</ul>
<h3 id="3-6-整个内容区域位置属性"><a href="#3-6-整个内容区域位置属性" class="headerlink" title="3.6 整个内容区域位置属性"></a>3.6 整个内容区域位置属性</h3><ul>
<li><code>justify-content属性</code>: 是整个内容区域在容器里面的水平位置（左中右）</li>
<li><code>align-content属性</code> :是整个内容区域的垂直位置（上中下）。</li>
</ul>
<h3 id="3-7-grid-auto-columns-grid-auto-rows"><a href="#3-7-grid-auto-columns-grid-auto-rows" class="headerlink" title="3.7 grid-auto-columns / grid-auto-rows"></a>3.7 grid-auto-columns / grid-auto-rows</h3><ul>
<li>用来设置多出来的项目的宽和高</li>
</ul>
<h2 id="4-项目属性"><a href="#4-项目属性" class="headerlink" title="4 项目属性"></a>4 项目属性</h2><h3 id="4-1-grid-column和grid-row的start属性、end属性"><a href="#4-1-grid-column和grid-row的start属性、end属性" class="headerlink" title="4.1 grid-column和grid-row的start属性、end属性"></a>4.1 grid-column和grid-row的start属性、end属性</h3><ul>
<li>grid-column-start属性：左边框所在的垂直网格线</li>
<li>grid-column-end属性：右边框所在的垂直网格线；（结束在x行，但不包括）</li>
<li>grid-row-start属性：上边框所在的水平网格线</li>
<li>grid-row-end属性：下边框所在的水平网格线</li>
</ul>
<h3 id="4-2-grid-column-属性-grid-row-属性"><a href="#4-2-grid-column-属性-grid-row-属性" class="headerlink" title="4.2 grid-column 属性  , grid-row 属性"></a>4.2 grid-column 属性  , grid-row 属性</h3><ul>
<li><p>grid-column属性是grid-column-start和grid-column-end的合并简写形式;</p>
</li>
<li><p>grid-row属性是grid-row-start属性和grid-row-end的合并简写形式。</p>
</li>
<li><p>grid-column 属性定义了网格元素列的开始和结束位置。</p>
</li>
<li><p>设置 “item1” 在第 1 列开始，在第 5 列前结束：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.item1 &#123;</span><br><span class="line">grid-column: 1 / 5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-3-grid-area-属性"><a href="#4-3-grid-area-属性" class="headerlink" title="4.3 grid-area 属性"></a>4.3 grid-area 属性</h3><ul>
<li>grid-area属性指定项目放在哪一个区域。</li>
</ul>
<p><a href="gridarea.png">grid-area</a></p>
<h3 id="4-4-order属性"><a href="#4-4-order属性" class="headerlink" title="4.4 order属性"></a>4.4 order属性</h3>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS-知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS-动画</title>
    <url>/2022/04/28/CSS-%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<h1 id="CSS动画"><a href="#CSS动画" class="headerlink" title="CSS动画"></a>CSS动画</h1><ul>
<li><p>作用</p>
<ul>
<li>增强网页交互体验</li>
<li>减少代码量，让网页运行更快</li>
</ul>
</li>
<li><p>应用场景</p>
<ul>
<li>网页特效</li>
<li>用户交互</li>
</ul>
</li>
<li><p>浏览器兼容性问题<br><a href="CSS%E5%8A%A8%E7%94%BB.png">CSS3动画浏览器兼容性问题</a></p>
</li>
</ul>
<h2 id="1-过渡动画-transition"><a href="#1-过渡动画-transition" class="headerlink" title="1 过渡动画 transition"></a>1 过渡动画 transition</h2><blockquote>
<p>CSS过渡动画：为某一元素添加某种效果可以从一种样式转变到另一种。</p>
</blockquote>
<ul>
<li><p>实现条件：</p>
<ul>
<li>指定要添加效果的CSS属性；</li>
<li>指定效果的持续时间，若没有指定期限，transition默认值为0，没有效果。</li>
</ul>
</li>
<li><p>过渡属性</p>
<ul>
<li>transition-property ： 规定有应用过渡效果的css属性名称；<ul>
<li><code>transition-property: none|all| property;</code>   (没有 | 全部 | 列表)</li>
</ul>
</li>
<li>transition-duration ： 过渡效果持续时间； </li>
<li>transition-delay ： 过渡效果延迟时间；</li>
<li>transition-timing-function： 过渡效果动画<ul>
<li><code>transition-timing-function: linear|ease|ease-in|ease-out|ease-in-out|cubic-bezier(n,n,n,n);</code> (匀速 | 慢快慢 | 慢速开始 | 慢速结束 | 慢快慢 |)</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box1</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="comment">/* 过渡效果</span></span><br><span class="line"><span class="comment">        1-有过渡效果的属性   transition-property</span></span><br><span class="line"><span class="comment">        2-过渡持续时间       transition-duration</span></span><br><span class="line"><span class="comment">        3-延迟效果开始的时间 transition-delay</span></span><br><span class="line"><span class="comment">        4-过渡效果动画       transition-timing-function</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="attribute">transition</span>:width <span class="number">2s</span> ease;<span class="comment">/*宽度变化*/</span></span><br><span class="line">    <span class="attribute">transition</span>:all <span class="number">2s</span> ease;<span class="comment">/*all 宽高都变化*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="2-变换动画-transfrom"><a href="#2-变换动画-transfrom" class="headerlink" title="2 变换动画 transfrom"></a>2 变换动画 transfrom</h2><h3 id="2-1-2D转换"><a href="#2-1-2D转换" class="headerlink" title="2.1 2D转换"></a>2.1 2D转换</h3><ul>
<li>移动 translate()方法： 根据x轴和y轴位置给定的参数，从当前元素位置移动。</li>
<li>旋转 rotate() 方法： 旋转。正值顺时针，负值逆时针。</li>
<li>缩放 scale() 方法： 该元素增大或减小的大小，取决于x轴和y轴的参数。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">-ms-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">/* IE 9 */</span></span><br><span class="line">-webkit-<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">/* Safari */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">/* 标准语法,宽度为原来大小的两倍，高度为原来的三倍 */</span></span><br></pre></td></tr></table></figure></li>
<li>倾斜 skew() 方法：包含两个参数值，分别表示X轴和Y轴倾斜的角度，如果第二个参数为空，则默认为0，参数为负表示向相反方向倾斜。<ul>
<li>skewX(<angle>);表示只在X轴(水平方向)倾斜。</li>
<li>skewY(<angle>);表示只在Y轴(垂直方向)倾斜。</li>
<li><code>transform:skew(&lt;angle&gt; [,&lt;angle&gt;]);</code></li>
</ul>
</li>
<li>matrix() 方法: matrix 方法有六个参数，包含旋转，缩放，移动（平移）和倾斜功能。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.test</span> <span class="selector-class">.translateX</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*  -moz 火狐；</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            -webkit 谷歌，苹果；</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            -ms  IE；</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            -o   欧鹏    </span></span></span><br><span class="line"><span class="comment"><span class="language-css">        */</span></span></span><br><span class="line"><span class="language-css">        -moz-<span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">20px</span>);</span></span><br><span class="line"><span class="language-css">        -webkit-<span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">20px</span>);</span></span><br><span class="line"><span class="language-css">        -ms-<span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">20px</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">20px</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#div1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 旋转 正值-顺时针 负值-逆时针*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 沿中心点旋转*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*设置旋转点 以设置的坐标为顶点旋转*/</span> </span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span> ;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 平移 - 相对于自己原来的位置移动 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*第一个参数对应X轴，第二个参数对应Y轴*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">50px</span>,<span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 缩放 */</span></span></span><br><span class="line"><span class="language-css">         <span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">2</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-3D转换"><a href="#2-2-3D转换" class="headerlink" title="2.2 3D转换"></a>2.2 3D转换</h3><ul>
<li><p>转换属性<br><a href="%E8%BD%AC%E6%8D%A2%E5%B1%9E%E6%80%A7.png">转换属性</a></p>
</li>
<li><p>转换方法<br><a href="%E8%BD%AC%E5%8C%96%E6%96%B9%E6%B3%95.png">3D转换方法</a></p>
</li>
</ul>
<h2 id="3-keyframes与Animation"><a href="#3-keyframes与Animation" class="headerlink" title="3 @keyframes与Animation"></a>3 @keyframes与Animation</h2><blockquote>
<p>@keyframes规则： 创建动画，该规则内指定一个CSS样式和动画将逐步从目前的样式更改为新的样式。</p>
</blockquote>
<ul>
<li><code>animation属性</code>的子属性有：<ul>
<li><code>@keyframes 规则</code>: 一个动画想要运行，还应该包括 @keyframes 规则，在内部设定动画关键帧。(必有)</li>
<li><code>animation-name</code>：指定由 @keyframes 描述的关键帧名称。(必有)</li>
<li><code>animation-duration</code>：设置动画一个周期的时长。(必有)</li>
<li><code>animation-delay</code>：设置延时，即从元素加载完成之后到动画序列开始执行的这段时间。</li>
<li><code>animation-direction</code>：设置动画在每次运行完后是反向运行还是重新回到开始位置重复运行。</li>
<li><code>animation-iteration-count</code>：设置动画重复次数， 可以指定 infinite 无限次重复动画.</li>
<li><code>animation-play-state</code>：允许暂停和恢复动画。</li>
<li><code>animation-timing-function</code>：设置动画速度， 即通过建立加速度曲线，设置动画在关键帧之间是如何变化。</li>
<li><code>animation-fill-mode</code>：指定动画执行前后如何为目标元素应用样式。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#box1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: rebeccapurple;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation</span>:ease-in move <span class="number">3s</span>; </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> move&#123;</span></span><br><span class="line"><span class="language-css">        <span class="number">5%</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">15%</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>:red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">50%</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">30deg</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">70%</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">180deg</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-CSS3动画与JS动画的区别"><a href="#4-CSS3动画与JS动画的区别" class="headerlink" title="4 CSS3动画与JS动画的区别"></a>4 CSS3动画与JS动画的区别</h2><h3 id="4-1-JS"><a href="#4-1-JS" class="headerlink" title="4.1 JS"></a>4.1 JS</h3><h4 id="4-1-1-JS优点"><a href="#4-1-1-JS优点" class="headerlink" title="4.1.1 JS优点"></a>4.1.1 JS优点</h4><ol>
<li>控制能力更强，可以再动画播放过程中对动画进行精细控制，包括开始、暂停、终止和取消等；</li>
<li>效果比css3动画效果更丰富；</li>
<li>大多数情况下没有兼容性问题，而css3存在兼容性问题。</li>
</ol>
<h4 id="4-1-2-JS缺点"><a href="#4-1-2-JS缺点" class="headerlink" title="4.1.2 JS缺点"></a>4.1.2 JS缺点</h4><ol>
<li>复杂度高于CSS3；</li>
<li>在执行过程中，因其他进程的影响可能会出现阻塞从而出现丢帧的情况；</li>
<li>往往需要频繁操作DOM，对浏览器性能消耗较大。</li>
</ol>
<h3 id="4-2-CSS3"><a href="#4-2-CSS3" class="headerlink" title="4.2 CSS3"></a>4.2 CSS3</h3><h4 id="4-2-1-优点"><a href="#4-2-1-优点" class="headerlink" title="4.2.1 优点"></a>4.2.1 优点</h4><ol>
<li>在部分情况下浏览器可以对动画进行优化；</li>
<li>部分效果可以强制使用硬件加速。</li>
</ol>
<h4 id="4-2-2-缺点"><a href="#4-2-2-缺点" class="headerlink" title="4.2.2 缺点"></a>4.2.2 缺点</h4><ol>
<li>css3动画对运行进程控制较弱，只能在某些场景下控制动画的暂停和继续；</li>
<li>代码冗长。</li>
</ol>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS-知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS-单位</title>
    <url>/2022/04/28/CSS-%E5%8D%95%E4%BD%8D/</url>
    <content><![CDATA[<h1 id="CSS单位"><a href="#CSS单位" class="headerlink" title="CSS单位"></a>CSS单位</h1><h2 id="1-相对单位"><a href="#1-相对单位" class="headerlink" title="1 相对单位"></a>1 相对单位</h2><blockquote>
<p>相对单位规定相对于另一个长度属性的长度。它在不同渲染介质之间缩放表现更好。<br><img src="%E7%9B%B8%E5%AF%B9%E5%8D%95%E4%BD%8D.png" alt="相对单位"></p>
</blockquote>
<h3 id="1-1-em和rem"><a href="#1-1-em和rem" class="headerlink" title="1.1 em和rem"></a>1.1 em和rem</h3><blockquote>
<p>em : 相对于元素(父元素)的字体大小.</p>
</blockquote>
<ul>
<li>em：如果自身元素未设置字体大小，那么其根据父元素的字体大小进行计算；如果自身元素设置了字体大小，则基于自身的字体大小进行计算。</li>
<li>em的值不是固定的</li>
</ul>
<blockquote>
<p>rem : 相对于根元素(html)的字体大小计算。</p>
</blockquote>
<ul>
<li><p>rem在处理小数的时候会有误差。</p>
</li>
<li><p>不支持iframe，并且这里存在一个理念问题，大屏是为了更大更清晰，还是为了承载更多内容。</p>
</li>
<li><p><code>em</code>与<code>rem</code>的选择情况：</p>
<ul>
<li>两者在客户端中计算出来的样式都会以px的形式显示；</li>
<li><code>rem</code>是<code>相对根元素</code>html的字体大小计算，<code>em</code>是<code>相对于元素</code>的字体大小进行计算；</li>
<li>当需要根据<code>浏览器的font-size设置缩放</code>时，使用<code>rem</code>；</li>
<li>使用em应该根据组件的font-size来定；</li>
<li>rem可以从浏览器字体设置中继承font-size值；</li>
<li>em可能受任何继承过来的父元素font-size的影响。</li>
<li>一般在使用em和rem时将font-size的值初始化为100px(<code>font-size: 625%;</code>)，取消默认大小对于字体的影响，若要设置30px，则<code>width: .3rem</code>。 (不能取10px，因为移动端字体最小为12px)</li>
</ul>
</li>
</ul>
<h3 id="1-2-vh和vw，vmin和vmax"><a href="#1-2-vh和vw，vmin和vmax" class="headerlink" title=".1.2 vh和vw，vmin和vmax"></a>.1.2 vh和vw，vmin和vmax</h3><ul>
<li>vw：视窗宽度的百分比；(<code>width: 100vw;</code>   )</li>
<li>vh：视窗高度的百分比；(<code>height: 100vh;</code>  设置100vh和100vw后div占慢整个屏幕 )</li>
<li>vmax：较大的 vh 和 vw；</li>
<li>vmin：较小的 vh 和 vw。</li>
</ul>
<p>eg:</p>
<ul>
<li>若一个浏览器高度为500px，宽度为1200px，<ul>
<li>1vh = 5px;</li>
<li>1vw = 12px;</li>
<li>1vmin = 5px;</li>
<li>1vmax = 12px.</li>
</ul>
</li>
</ul>
<h2 id="2-绝对单位"><a href="#2-绝对单位" class="headerlink" title="2 绝对单位"></a>2 绝对单位</h2><blockquote>
<p>绝对单位是固定的，用任何一个绝对长度表示的长度都将恰好显示为这个尺寸。</p>
</blockquote>
<ul>
<li>不建议在屏幕上使用绝对长度单位，因为屏幕尺寸变化较大。</li>
</ul>
<p><img src="%E7%BB%9D%E5%AF%B9%E5%8D%95%E4%BD%8D.png" alt="绝对单位"></p>
<h2 id="3-百分比单位"><a href="#3-百分比单位" class="headerlink" title="3 百分比单位"></a>3 百分比单位</h2><ul>
<li>百分比（%）是较常用的单位之一，所有接受长度值的属性都可以使用百分比单位。但是不同属性使用该单位的效果可能并不一样。但是都需要有一个参照值，也就是说百分比值是一个相对的值。 ​</li>
</ul>
<p><img src="%E7%99%BE%E5%88%86%E6%AF%94%E5%8D%95%E4%BD%8D.png" alt="百分比单位"></p>
<h2 id="4-角度单位-​"><a href="#4-角度单位-​" class="headerlink" title="4 角度单位 ​"></a>4 角度单位 ​</h2><p><img src="%E8%A7%92%E5%BA%A6%E5%8D%95%E4%BD%8D.png" alt="角度单位"></p>
<ul>
<li>补充<ul>
<li>谷歌浏览器默认字体大小为16px，最小为12px。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS-知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS-响应式布局</title>
    <url>/2022/04/28/CSS-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h1 id="CSS响应式布局"><a href="#CSS响应式布局" class="headerlink" title="CSS响应式布局"></a>CSS响应式布局</h1><h2 id="1-响应式布局-media查询"><a href="#1-响应式布局-media查询" class="headerlink" title="1 响应式布局 - @media查询"></a>1 响应式布局 - @media查询</h2><blockquote>
<p>响应式布局：是同一页面在不同的屏幕上有不同的布局，即只需要一套代码使页面适应不同的屏幕。</p>
</blockquote>
<ul>
<li><p>采用响应式设计，在不同设备中，网站会重新排列，展现出不同的设计风格，以完美的适配任何尺寸的屏幕。</p>
</li>
<li><p>什么是响应式布局？ 一套代码实现多种设备访问一致性（PC端、平板、手机）；（tb不是响应式布局）</p>
</li>
<li><p>特点：</p>
<ul>
<li>优点： 一直保持一个url，一套代码</li>
<li>缺点： 浏览器支持程度（ie8及以下就不兼容）</li>
</ul>
</li>
</ul>
<h2 id="2-设计原则"><a href="#2-设计原则" class="headerlink" title="2 设计原则"></a>2 设计原则</h2><h3 id="2-1-响应式设计两个设计原则"><a href="#2-1-响应式设计两个设计原则" class="headerlink" title="2.1 响应式设计两个设计原则"></a>2.1 响应式设计两个设计原则</h3><ul>
<li>渐进增强：是指基本需求得到满足和实现后，再根据不同浏览器及不同分辨率设备的特点，利用高级浏览器中的新特新提供更好的体检。（由基本到完美）<ul>
<li><code>移动端</code>响应式布局采用<code>渐进增强</code>原则。</li>
</ul>
</li>
<li>优雅降级：现有功能已经开发完备，但需要向下兼容版本和不支持该功能的浏览器。（向下兼容）</li>
</ul>
<h3 id="2-2-常见设备的屏幕像素"><a href="#2-2-常见设备的屏幕像素" class="headerlink" title="2.2 常见设备的屏幕像素"></a>2.2 常见设备的屏幕像素</h3><ul>
<li>viewport视口设置：<ul>
<li><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</code></li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>屏幕类型</th>
<th>对应设备</th>
<th>常见尺寸</th>
</tr>
</thead>
<tbody><tr>
<td>超小屏幕</td>
<td>手机</td>
<td>&lt;768px</td>
</tr>
<tr>
<td>小屏幕</td>
<td>平板</td>
<td>&gt;768px</td>
</tr>
<tr>
<td>中等屏幕</td>
<td>桌面显示器</td>
<td>&gt;992px</td>
</tr>
<tr>
<td>大屏幕</td>
<td>超大桌面显示器</td>
<td>&gt;1200px</td>
</tr>
</tbody></table>
<h2 id="3-实现方法"><a href="#3-实现方法" class="headerlink" title="3 实现方法"></a>3 实现方法</h2><h3 id="3-1-媒体查询"><a href="#3-1-媒体查询" class="headerlink" title="3.1 媒体查询"></a>3.1 媒体查询</h3><blockquote>
<p>媒体查询</p>
</blockquote>
<ul>
<li>什么是媒体查询 ：<strong>媒体查询可以让CSS更加精确作用于不同的媒体类型和同一媒体的不同条件。</strong></li>
<li>JS监听媒体查询：<code>MediaQueryList.addListener(func)</code>；</li>
<li>使用<code>@media查询</code>，可以针对不同的媒体类型定义不同的样式；</li>
<li><code>@media</code>可以针对不同的屏幕尺寸设置不同的样式，特别是如果需要设置<strong>响应式的页面</strong>，<code>@media</code>是非常有用的。</li>
<li>当你重置浏览器大小的过程中，页面也会根据浏览器的高度重新渲染页面。</li>
</ul>
<blockquote>
<p>媒体查询的用途</p>
</blockquote>
<ul>
<li><p>使用CSS<code>@media</code>和<code>at</code>规则有条件地应用样式；</p>
</li>
<li><p>使用该属性为<code>&lt;style&gt;</code>,<code>&lt;link&gt;</code>,<code>&lt;source&gt;</code>和其他HTML元素定位特定媒体；</p>
</li>
<li><p>使用JS方法测试和监控媒体状态。</p>
<p>  eg:</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-css">        only : 可以排除不支持媒体查询的浏览器 </span></span></span><br><span class="line"><span class="comment"><span class="language-css">        max-width ： 小于</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        min-width :  大于</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        小于600： 蓝色</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        600-1000： 橘色</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        大于600： 红色</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#box</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">600px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1000px</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: orange;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><img src="%E5%AA%92%E4%BD%93%E7%89%B9%E6%80%A7.png" alt="媒体特性"></p>
</li>
</ul>
<h3 id="3-2-相对尺寸"><a href="#3-2-相对尺寸" class="headerlink" title="3.2 相对尺寸"></a>3.2 相对尺寸</h3><ol>
<li><p>百分比</p>
<ul>
<li>百分比是相对于包含块的计量单位，通过对属性设置百分比来适应不同的屏幕。</li>
<li>包含块：<ul>
<li>有父元素相对于父元素；</li>
<li>无父元素相对于视口；</li>
<li>继承父元素；</li>
</ul>
</li>
</ul>
</li>
<li><p>vw/vh</p>
<ul>
<li>vw/vh，vmin和vmax是视口单位，可以根据浏览器的窗口大小进行适配。</li>
<li>eg：文字自适应</li>
</ul>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.text</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">248</span>, <span class="number">150</span>, <span class="number">150</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2vw</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        今天是个好天气 </span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>rem</p>
<ul>
<li>rem单位：相对单位，相对于根元素字体大小的单位。</li>
<li>使用场景：某一元素的宽需要为47px，根元素大小为20px，要求适应不同的终端。<ul>
<li>设想屏幕宽度为750px，设计稿宽度为750px；</li>
<li>设置<code>font-size = 1rem = 屏幕宽度×100/设计稿宽度 = 100px</code>；</li>
<li>使用<code>getBoundingClientRect().width</code>可以获取屏幕宽度，在该宽度下梓蒿为fontsize；</li>
<li><code> width / ( 750 * fontSize ) = 750 / (750 * 100 )</code>;</li>
<li>计算得出fontSize的值。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="4-响应式图片"><a href="#4-响应式图片" class="headerlink" title="4 响应式图片"></a>4 响应式图片</h2><ul>
<li><p>使用<code>background</code>属性设置背景图</p>
<ul>
<li>将<code>background-size</code>属性值设置为<code>cover</code>，则会把背景图片扩展至足够大，是背景图片完全覆盖背景区域。</li>
<li><code>background-size: cover;</code>    /* 让背景图片一起缩放 */</li>
</ul>
</li>
<li><p>根据条件响应式加载图片：不同尺寸时显示不同的图片</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">&quot;(min-width: 1500px)&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;./images/3.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;40%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;40%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">&quot;(min-width: 1000px)&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;./images/2.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;40%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;40%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">srcset</span>=<span class="string">&quot;/images/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;40%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;40%&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="5-移动端事件"><a href="#5-移动端事件" class="headerlink" title="5 移动端事件"></a>5 移动端事件</h2><ul>
<li><p><a href="https://blog.csdn.net/weixin_43842373/article/details/113397331">移动端响应式开发</a></p>
</li>
<li><p><a href="https://wenku.baidu.com/view/9e2c202651ea551810a6f524ccbff121dd36c50b.html">CSS-常用分辨率</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS-知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS-实现元素居中方法</title>
    <url>/2022/04/28/CSS-%E5%AE%9E%E7%8E%B0%E5%85%83%E7%B4%A0%E5%B1%85%E4%B8%AD%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="实现元素水平垂直居中的方法"><a href="#实现元素水平垂直居中的方法" class="headerlink" title="实现元素水平垂直居中的方法"></a>实现元素水平垂直居中的方法</h2><blockquote>
<p>元素是<code>行内元素</code>、<code>块状元素</code>及<code>不定宽高的块状元素</code>适用的方法是不同的。</p>
</blockquote>
<h3 id="1-text-align和-line-height"><a href="#1-text-align和-line-height" class="headerlink" title="1 text-align和 line-height"></a>1 text-align和 line-height</h3><blockquote>
<p>水平居中 : 给父元素设置文本center;</p>
<p>垂直居中 ：让文字的行高等于盒子的高度</p>
</blockquote>
<ul>
<li>只适用于行内元素。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.positions</span> &#123;</span><br><span class="line">     <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.positions</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">     <span class="attribute">line-height</span>:<span class="number">140px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-使用绝对定位和相对定位"><a href="#2-使用绝对定位和相对定位" class="headerlink" title="2 使用绝对定位和相对定位"></a>2 使用绝对定位和相对定位</h3><ul>
<li>若想三者都实现，偏移量需要自己计算； </li>
<li>已知宽高；<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定位1：绝对定位和相对定位 */</span></span><br><span class="line"><span class="selector-class">.positions</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.positions</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">32px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">10.5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#block</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">25px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#b2</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">25px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-绝对定位-translate"><a href="#3-绝对定位-translate" class="headerlink" title="3 绝对定位+translate"></a>3 绝对定位+translate</h3><ul>
<li>行内元素,块元素,不定宽高的块状元素都可实现；</li>
<li>不需要计算偏移量；</li>
<li>有兼容性问题。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定位2： */</span></span><br><span class="line"><span class="selector-class">.positions</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.positions</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#block</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#b2</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-设置top、left、right和bottom的值"><a href="#4-设置top、left、right和bottom的值" class="headerlink" title="4 设置top、left、right和bottom的值"></a>4 设置top、left、right和bottom的值</h3><ul>
<li>只有块元素可以实现;</li>
<li>必须知道具体的宽高；<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.positions</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.positions</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#block</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#b2</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-flex实现"><a href="#5-flex实现" class="headerlink" title="5 flex实现"></a>5 flex实现</h3><ul>
<li>父容器使用flex布局，使用<code>justify-content</code>和<code>align-items</code>，三者均可实现；<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* flex属性 */</span></span><br><span class="line"><span class="selector-class">.positions</span> &#123; </span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>问题：这种写法会到导致父容器中所有子元素都垂直居中。</li>
</ul>
<h3 id="6-flex布局-margin-auto"><a href="#6-flex布局-margin-auto" class="headerlink" title="6 flex布局 + margin:auto"></a>6 flex布局 + margin:auto</h3><ul>
<li>适用场景：指定父元素中的某个元素垂直居中，其他元素正常</li>
<li>给父元素设置<code>display: flex</code>，再给指定的子元素设置<code>margin: auto</code>;<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* flex-某一子元素垂直居中 */</span></span><br><span class="line"><span class="selector-class">.positions</span> &#123; </span><br><span class="line">    <span class="attribute">display</span>: flex; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.positions</span> <span class="selector-id">#block</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7-display：table-cell实现"><a href="#7-display：table-cell实现" class="headerlink" title="7 display：table-cell实现"></a>7 display：table-cell实现</h3><ul>
<li>父元素必须要有固定宽高，百分比不可以;</li>
<li><code>display: table-cell;</code> : table布局；</li>
<li><code>vertical-align: middle;</code> : 垂直居中；</li>
<li><code>text-align: center;</code> : 水平居中。</li>
<li>对于块级元素要设置为行内块元素。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* display：table-cell实现 */</span></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#block</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS-知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS-样式练习</title>
    <url>/2022/04/27/CSS-%E6%A0%B7%E5%BC%8F%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="1-css实现一个三角形"><a href="#1-css实现一个三角形" class="headerlink" title="1 css实现一个三角形"></a>1 css实现一个三角形</h2><ul>
<li>使用边框特性，设置宽度及颜色。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#div</span>&#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">50px</span> solid white; </span><br><span class="line">    <span class="attribute">border-bottom-color</span>: red; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>代码</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS-经典布局方案</title>
    <url>/2022/04/28/CSS-%E7%BB%8F%E5%85%B8%E5%B8%83%E5%B1%80%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h1 id="CSS布局"><a href="#CSS布局" class="headerlink" title="CSS布局"></a>CSS布局</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li><p>根据宽度是否固定来分，可分为：</p>
<ul>
<li>固定宽度布局 ： PC端一般宽度为960/1000/1024px；</li>
<li>不固定宽度布局 ： 主要靠文档流的原理来布局；</li>
<li>响应式布局 ： 可以为不同终端的用户提供更加舒适的界面和更好的用户体验。</li>
</ul>
</li>
<li><p>根据栏数区分：</p>
<ul>
<li>单列布局 : 头部、内容、底部 （块级元素水平居中：<code>margin:0 auto;</code>）</li>
<li>两栏布局 ：左边固定，右边自适应 （或 右边固定，左边自适应）</li>
<li>三栏布局 ：左右固定，中间自适应。</li>
</ul>
</li>
<li><p>响应式布局：<a href="https://m.php.cn/article/476031.html">四种方式</a></p>
<ul>
<li>使用flex布局，优点代码简单、布局方便；</li>
<li>使用绝对布局，结合使用media媒体查询实现响应式布局；</li>
<li>使用Grid布局，优点是写法简单；</li>
<li>使用float布局，优点是兼容性较好；</li>
</ul>
</li>
</ul>
<h2 id="1-三栏布局"><a href="#1-三栏布局" class="headerlink" title="1 三栏布局"></a>1 三栏布局</h2><h3 id="1-1-圣杯布局"><a href="#1-1-圣杯布局" class="headerlink" title="1.1 圣杯布局"></a>1.1 圣杯布局</h3><blockquote>
<p>圣杯布局：其核心是左、中、右三栏都通过float进行浮动，然后通过负值magin进行调整。</p>
</blockquote>
<ul>
<li>实现<ul>
<li>基本布局 - 中左右 </li>
<li>1 外层div设置内边距</li>
<li>2 给三个div都添加左浮动；</li>
<li>3 让三个div位于同一行，给left增加<code>margin-left:-100%;</code> , 给right增加<code>margin-right:-100px;</code>;</li>
<li>4 将left左移，相对定位+左边盒子的宽度，<code>position: relative;left: -100px;</code></li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"> </span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 三栏布局 - 圣杯布局 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#con1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">80%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">306px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> solid red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">50px</span> auto; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">100px</span>;<span class="comment">/* 左右内边距*/</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.left2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">212</span>, <span class="number">145</span>, <span class="number">145</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: -<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.right2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">187</span>, <span class="number">137</span>, <span class="number">252</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-right</span>: -<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">221</span>, <span class="number">252</span>, <span class="number">137</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left; </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 三栏布局 - 圣杯布局 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;con1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-双飞翼布局"><a href="#1-2-双飞翼布局" class="headerlink" title="1.2 双飞翼布局"></a>1.2 双飞翼布局</h3><blockquote>
<p>双飞翼布局：该布局与圣杯布局的区别在于中间部分与左右部分的分离。核心实现方式也是先使用float浮动，然后通过magrin负值调整。</p>
</blockquote>
<ul>
<li>实现<ul>
<li>基本布局 - 中左右 </li>
<li>注意：中间center被放在一个div中，container与left和right平级。</li>
<li>1 给center设置左右宽度的外边距；<code>margin: 0 100px;</code></li>
<li>2 让container、left和right三个div左浮动，</li>
<li>3 给left增加<code>margin-left: -100%;</code></li>
<li>4 给right增加<code>margin-left: -100px;</code></li>
</ul>
</li>
<li>区别：<ul>
<li>圣杯：三部分同级，大div设置内边距，左中右浮动，根据center改变左右的位置；</li>
<li>双飞翼：center套在一个盒子中，给center设置外边距，左中右浮动，然后定位。(dom先加载中间部分，所以基本布局：中左右)</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 三栏布局 - 双飞翼布局 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;con3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 三栏布局 - 双飞翼布局 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#con3</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">80%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">306px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> solid red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">50px</span> auto;  </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.left3</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">247</span>, <span class="number">181</span>, <span class="number">181</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.right3</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">137</span>, <span class="number">219</span>, <span class="number">252</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content3</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">233</span>, <span class="number">137</span>, <span class="number">252</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="1-3-flex布局"><a href="#1-3-flex布局" class="headerlink" title="1.3 flex布局"></a>1.3 flex布局</h3><blockquote>
<p>flex布局：设置容器属性和center属性即可实现，但是需要注意浏览器兼容性问题。</p>
</blockquote>
<ul>
<li>实现<ul>
<li>基本布局 - 左中右</li>
<li>1 给大div设置<code>display:flex;</code> 和 <code>justify-content: space-between;</code>属性；</li>
<li>2 给center设置<code>flex: 1;</code></li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 三栏布局 - flex布局 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;con&quot;</span> <span class="attr">id</span>=<span class="string">&quot;con4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 三栏布局 - flex */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#con4</span> &#123; </span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 容器属性设置 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>:flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-between;<span class="comment">/* 两端对齐 */</span></span></span><br><span class="line"><span class="language-css">    &#125; </span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.left4</span> , <span class="selector-class">.right4</span> &#123; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">241</span>, <span class="number">194</span>, <span class="number">150</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>; </span></span><br><span class="line"><span class="language-css">    &#125; </span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.center4</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 项目属性设置 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span>;<span class="comment">/* 设置项目放大、缩小和分配剩余空间*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">237</span>, <span class="number">180</span>, <span class="number">248</span>); </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-4-定位布局"><a href="#1-4-定位布局" class="headerlink" title="1.4 定位布局"></a>1.4 定位布局</h3><blockquote>
<p>定位：子div绝对定位，父div相对定位，左右两侧通过top、left和right固定位置，中间加magin，宽度自适应。</p>
</blockquote>
<ul>
<li>实现<ul>
<li>基本布局：左中右</li>
<li>1 给父div设置相对定位；</li>
<li>2 给left和right设置绝对定位；</li>
<li>3 给left设置<code>left:0;</code> <code>top：0；</code></li>
<li>4 给right设置<code>right:0;</code> <code>top：0；</code></li>
<li>5 给center设置外边距，左右部分的宽度。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 三栏布局 - 定位布局 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;con&quot;</span> <span class="attr">id</span>=<span class="string">&quot;con5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 三栏布局 - 定位布局 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#con5</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.left5</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">247</span>, <span class="number">181</span>, <span class="number">181</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.right5</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">137</span>, <span class="number">219</span>, <span class="number">252</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.center5</span> &#123; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">237</span>, <span class="number">180</span>, <span class="number">248</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-float布局"><a href="#1-5-float布局" class="headerlink" title="1.5 float布局"></a>1.5 float布局</h3><blockquote>
<p>采用float浮动，左右大小固定，中间自适应</p>
</blockquote>
<ul>
<li>实现<ul>
<li>左右两栏：设置宽度，并分别设置左右浮动；</li>
<li>中间内容：设置左右外边距为左右两栏的宽度；</li>
<li>注意：div排列时为左右中。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 三栏布局 - float --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;con1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 三栏布局 - float */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#con1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">80%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">306px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> solid red; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.left1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">252</span>, <span class="number">175</span>, <span class="number">175</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left; </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.right1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">137</span>, <span class="number">191</span>, <span class="number">252</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: right; </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">137</span>, <span class="number">252</span>, <span class="number">152</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-6-BFC规则"><a href="#1-6-BFC规则" class="headerlink" title="1.6 BFC规则"></a>1.6 BFC规则</h3><blockquote>
<p>BFC : 块级元素格式化上下文。它决定了块级元素如何对它的内容进行布局，以及和其他元素的关系的相互关系。BFC是一个独立的空间，里面的元素和外面的元素不会相互影响。</p>
</blockquote>
<ul>
<li><p>触发条件</p>
<ul>
<li>float不为none；</li>
<li>position属性为absolute和fixed；</li>
<li>overflow溢出隐藏的值不为visible；</li>
<li>html根标签；</li>
</ul>
</li>
<li><p>BFC有哪个规则</p>
<ul>
<li>浮动的元素会被父级计算高度（父级触发BFC）；</li>
<li>BFC区域和浮动元素不重叠；</li>
<li>margin不会传递给父级（父级触发了BFC）；</li>
<li>两个相邻元素上下margin会重叠；</li>
<li>BFC盒子内部的子标签按照垂直从上到下排列；</li>
<li>共用一个BFC盒子的垂直方向上的外边距会发生塌陷现象；</li>
<li>子标签都会在父盒子的左边界停靠；</li>
<li>BFC盒子是一个密闭空间，内外互不影响。</li>
</ul>
</li>
</ul>
<ul>
<li>可解决的问题<ul>
<li>外边距塌陷问题；</li>
<li>浮动特性；</li>
<li>清除浮动影响；</li>
<li>图文不环绕问题。</li>
</ul>
</li>
</ul>
<h2 id="2-Grid-网格-布局"><a href="#2-Grid-网格-布局" class="headerlink" title="2 Grid(网格)布局"></a>2 Grid(网格)布局</h2><p><a href="https://zhuanlan.zhihu.com/p/57713138">CSS-布局</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS-知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS-盒子模型</title>
    <url>/2022/04/28/CSS-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="CSS-盒子模型"><a href="#CSS-盒子模型" class="headerlink" title="CSS_盒子模型"></a>CSS_盒子模型</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>盒子中的区域<ul>
<li>一个盒子有5个重要属性： <code>width(宽度)</code>、<code>height(高度)</code>、<code>padding(内边距)</code>、<code>border(边框)</code>、<code>margin(外边距)</code></li>
</ul>
</li>
</ul>
<h2 id="1-标准盒模型"><a href="#1-标准盒模型" class="headerlink" title="1 标准盒模型"></a>1 标准盒模型</h2><p><img src="%E6%A0%87%E5%87%86box.png" alt="标准盒子模型"></p>
<ul>
<li><p>标准盒子模型中“盒子”尺寸计算公式为：</p>
<ul>
<li><code>盒子实际尺寸</code> = <code>内容尺寸</code> + <code>内边距</code> + <code>边框宽度</code></li>
</ul>
</li>
<li><p>外边距合并问题：</p>
<ul>
<li>发生条件： 只有普通文档流中的块级元素的垂直外边距才会发生外边距合并。</li>
<li>外边距合并：是指当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距 = 两个发生合并外边距的高度中的较大值</li>
<li>合并情况<ul>
<li>当两个元素均有外边距时，它们将合成一个外边距，高度为元素外边距较大的那个值<br><img src="margin1.jpg" alt="垂直元素合并"></li>
<li>当一个元素包含在另一个元素中，它们的上下外边距也会合并。<br><img src="margin2.jpg" alt="元素包含合并"></li>
<li>外边距也可以和自身发生合并。当一个空元素有外边距但是没有边框或填充时，上下外边距会合并。<br><img src="margin3.jpg" alt="自身合并"></li>
<li>在自身合并的这种情况下，如果遇到另一个元素的外边距，还是会发生合并。<br><img src="margin4.jpg" alt="外边距合并"></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2-怪异盒模型"><a href="#2-怪异盒模型" class="headerlink" title="2 怪异盒模型"></a>2 怪异盒模型</h2><p><img src="IE%E7%9B%92%E5%AD%90.png" alt="IE盒子模型"></p>
<ul>
<li><p>怪异盒模型与标准盒模型的区别：</p>
<ul>
<li>IE盒子模型的<code>content部分</code>包含了<code>border</code>和<code>padding</code>。</li>
<li>在<code>标准盒子模型</code>中：<code>width</code> 和 <code>height</code> 指的是<strong>内容区域的宽度和高度</strong>。增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸。</li>
<li>在<code>IE盒子模型</code>中：<code>width</code> 和 <code>height</code> 指的是<code>内容区域 + border + padding</code>的<strong>宽度和高度</strong>。</li>
</ul>
</li>
<li><p>IE盒模型使用设置：</p>
<ul>
<li><code>box-sizing: border-box;</code></li>
<li>需要注意的是该样式存在浏览器兼容性问题，使用时需要添加浏览器内核前缀。</li>
</ul>
</li>
<li><p>IE盒模型使用优势：</p>
<ul>
<li>IE盒模型对于百分比宽度布局有明显的便捷性，在布局时无需再去格外计算元素的内边距及边框。<br><img src="eg.jpg" alt="对比"></li>
</ul>
</li>
</ul>
<h2 id="3-flex盒模型"><a href="#3-flex盒模型" class="headerlink" title="3 flex盒模型"></a>3 flex盒模型</h2><h3 id="3-1-Flex布局是什么？"><a href="#3-1-Flex布局是什么？" class="headerlink" title="3.1 Flex布局是什么？"></a>3.1 Flex布局是什么？</h3><blockquote>
<p>Flexible box，弹性布局，用来为盒子模型提供最大的灵活性。</p>
</blockquote>
<ul>
<li>任何一个容器、行内元素都可以设置为flex布局。</li>
<li><code>webkit内核</code>的浏览器，必须加<code>-webkit</code>前缀。</li>
<li>注意，在设置flex布局之后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性都将<code>失效</code>。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="flex%E7%9B%92%E5%AD%90.png" alt="flex盒子模型"></p>
<h3 id="3-2-基本概念"><a href="#3-2-基本概念" class="headerlink" title="3.2 基本概念"></a>3.2 基本概念</h3><ul>
<li><p>容器：采用 Flex 布局的元素，称为 Flex 容器</p>
</li>
<li><p>项目：它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p>
</li>
<li><p>容器存在两根轴：</p>
<ul>
<li>水平主轴：main axis </li>
<li>垂直交叉轴： cross axis</li>
</ul>
</li>
<li><p>容器中的项目默认沿主轴排列。</p>
</li>
</ul>
<h3 id="3-3-容器的属性"><a href="#3-3-容器的属性" class="headerlink" title="3.3 容器的属性"></a>3.3 容器的属性</h3><table>
<thead>
<tr>
<th>属性</th>
<th>定义</th>
<th>使用</th>
</tr>
</thead>
<tbody><tr>
<td><code>flex-direction</code></td>
<td>决定主轴方向</td>
<td><code> row /row-reverse /column /column-reverse</code></td>
</tr>
<tr>
<td><code>flex-wrap</code></td>
<td>决定是否换行，如何换行</td>
<td><code> nowrap /wrap /wrap-reverse</code></td>
</tr>
<tr>
<td><code>flex-flow</code></td>
<td><code>flex-direction</code>和<code>flex-wrap</code>的简写形式</td>
<td><code>  &lt;flex-direction&gt; // &lt;flex-wrap&gt;</code></td>
</tr>
<tr>
<td><code>justify-content</code></td>
<td>项目在主轴上的对齐方式</td>
<td><code>flex-start /flex-end / center / space-between / space-around</code></td>
</tr>
<tr>
<td><code>align-items</code></td>
<td>项目在交叉轴上的排列方式</td>
<td><code>flex-start / flex-end / center / baseline / stretch</code></td>
</tr>
<tr>
<td><code>align-content</code></td>
<td>多根轴线的对齐方式</td>
<td><code>flex-start /flex-end /center / space-between /space-around /stretch</code></td>
</tr>
</tbody></table>
<h4 id="3-3-1-flex-direction"><a href="#3-3-1-flex-direction" class="headerlink" title="3.3.1 flex-direction"></a>3.3.1 <code>flex-direction</code></h4><ul>
<li>该属性决定主轴的方向（即内容的排列方向）</li>
<li>属性值：<ul>
<li><code>row</code>（默认值）： 水平向右；</li>
<li><code>row-reverse</code>： 水平向左；</li>
<li><code>column</code>： 垂直向下；</li>
<li><code>column-reverse</code>： 垂直向上。</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-2-flex-wrap"><a href="#3-3-2-flex-wrap" class="headerlink" title="3.3.2 flex-wrap"></a>3.3.2 <code>flex-wrap</code></h4><ul>
<li>该属性定义，当一行显示不下所有项目时是否换行，如何换行。(交叉轴方向决定项目换行方向)</li>
<li>属性值：<ul>
<li><code>nowrap</code>(默认值): <code>不换行</code> ；</li>
<li><code>wrap</code>：换行，第一行在<code>上</code>方；</li>
<li><code>wrap-reverse</code>： 换行，第一行在<code>下</code>方。</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-3-flex-flow"><a href="#3-3-3-flex-flow" class="headerlink" title="3.3.3 flex-flow"></a>3.3.3 <code>flex-flow</code></h4><ul>
<li>该属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-4-justify-content"><a href="#3-3-4-justify-content" class="headerlink" title="3.3.4 justify-content"></a>3.3.4 <code>justify-content</code></h4><ul>
<li>该属性定义了项目在主轴上的对齐方式。</li>
<li>属性值（具体对齐方式与轴的方向有关，假设主轴的方向为从左到右）<ul>
<li><code>flex-start</code>（默认值）：左对齐；</li>
<li><code>flex-end</code>：右对齐；</li>
<li><code>center</code>： 居中；</li>
<li><code>space-between</code>：两端对齐，项目之间的间隔都相等；</li>
<li><code>space-around</code>：每个项目两侧的间隔相等，所以，项目之间的间隔比项目与边框的间隔大一倍。</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-5-align-items"><a href="#3-3-5-align-items" class="headerlink" title="3.3.5 align-items"></a>3.3.5 <code>align-items</code></h4><ul>
<li>该属性定义了项目在交叉轴上如何对齐。</li>
<li>属性值（具体对齐方式与交叉轴方向有关，假设交叉轴从上到下）<ul>
<li><code>flex-start</code>：交叉轴的起点对齐。</li>
<li><code>flex-end</code>：交叉轴的终点对齐。</li>
<li><code>center</code>：交叉轴的中点对齐。</li>
<li><code>baseline</code>: 项目的第一行文字的基线对齐。</li>
<li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-6-align-content"><a href="#3-3-6-align-content" class="headerlink" title="3.3.6 align-content"></a>3.3.6 <code>align-content</code></h4><ul>
<li>该属性定义多根轴线的对齐方式，如果项目只有一根轴线，则不起作用。（沿着交叉轴方向的每一行，在容器中如何分布）</li>
<li>属性值<ul>
<li><code>flex-start</code>：与交叉轴的起点对齐。</li>
<li><code>flex-end</code>：与交叉轴的终点对齐。</li>
<li><code>center</code>：与交叉轴的中点对齐。</li>
<li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>
<li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>
<li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="3-4-项目属性"><a href="#3-4-项目属性" class="headerlink" title="3.4 项目属性"></a>3.4 项目属性</h3><table>
<thead>
<tr>
<th>属性</th>
<th>定义</th>
<th>使用</th>
</tr>
</thead>
<tbody><tr>
<td><code>order</code></td>
<td>定义项目的排列属性，数值越小，排列越靠前，默认为0</td>
<td><code>order: &lt;integer&gt;;</code></td>
</tr>
<tr>
<td><code>flex-grow</code></td>
<td>定义项目放大比例，默认为0，即如果存在剩余空间也不放大</td>
<td><code>flex-grow: &lt;number&gt;;</code></td>
</tr>
<tr>
<td><code>flex-shrink</code></td>
<td>定义项目的缩小比例，默认为1，即如果空间不足，项目缩小</td>
<td><code>flex-shrink: &lt;number&gt;;</code></td>
</tr>
<tr>
<td><code>flex-basis</code></td>
<td>定义在分配多余空间之前，项目占据的主轴空间，默认为auto</td>
<td><code>flex-basis: &lt;length&gt;/auto;</code></td>
</tr>
<tr>
<td><code>flex</code></td>
<td>放大，缩小和分配剩余空间的简写，默认值为<code> 0 1 auto</code></td>
<td><code> flex: none / [ &lt;&#39;flex-grow&#39;&gt; &lt;&#39;flex-shrink&#39;&gt;? // &lt;&#39;flex-basis&#39;&gt; ]</code></td>
</tr>
<tr>
<td><code>align-self</code></td>
<td>设置某个单个项目的对齐方式</td>
<td><code>align-self: auto /flex-start /flex-end /center /baseline /stretch;</code></td>
</tr>
</tbody></table>
<ul>
<li><p><code>flex-grow属性</code>：如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）；如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>
</li>
<li><p><code>flex-shrink属性</code>：如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。<strong>负值对该属性无效</strong>。</p>
</li>
<li><p><code>flex-basis属性</code>: 定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p>
</li>
<li><p><code>flex属性</code>：该属性有两个快捷值：<code>auto</code> <code>(1 1 auto)</code> 和 <code>none</code> <code>(0 0 auto)</code>。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
</li>
<li><p><code>align-self属性</code>： 允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为<code>auto</code>，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p>
</li>
<li><p><a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">CSS-Flex布局基础-阮一峰老师</a></p>
</li>
<li><p><a href="https://www.ruanyifeng.com/blog/2015/07/flex-examples.html">CSS-Flex布局实例-阮一峰老师</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS-知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS_面试总结2</title>
    <url>/2022/04/21/CSS-%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%932/</url>
    <content><![CDATA[<h2 id="1-CSS选择器权重"><a href="#1-CSS选择器权重" class="headerlink" title="1 CSS选择器权重"></a>1 CSS选择器权重</h2><blockquote>
<p>选择器优先级： !important &gt; 行内样式 &gt; ID选择器 &gt; 类选择器 &gt; 标签选择器 &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性</p>
</blockquote>
<table>
<thead>
<tr>
<th>选择器</th>
<th>权重</th>
<th>详情</th>
<th>使用方式</th>
</tr>
</thead>
<tbody><tr>
<td>!important</td>
<td>10000</td>
<td>拥有最高的优先级，可以覆盖父级样式</td>
<td><code>color:red !important;</code></td>
</tr>
<tr>
<td>行内样式</td>
<td>1000</td>
<td>写在标签style属性中的样式</td>
<td><code>&lt;div style=&quot;color:blue&quot;&gt;这是一个div元素&lt;/div&gt;</code></td>
</tr>
<tr>
<td>ID选择器</td>
<td>100</td>
<td>根据该元素的ID属性中的内容匹配元素</td>
<td><code>#content</code></td>
</tr>
<tr>
<td>类/伪类/属性选择器</td>
<td>10</td>
<td>根据元素属性进行匹配</td>
<td><code>content、:hover</code></td>
</tr>
<tr>
<td>标签/伪元素选择器</td>
<td>1</td>
<td>是指用HTML标签名作为选择器</td>
<td><code>div p </code></td>
</tr>
<tr>
<td>通配符选择器</td>
<td>0</td>
<td>* ，指给当前界面上所有的标签设置属性</td>
<td><code>*</code></td>
</tr>
</tbody></table>
<ul>
<li><p>子选择器：&gt;  (权重为0)</p>
</li>
<li><p>相邻选择器： +  (权重为0)</p>
<ul>
<li>在HTML代码中，（引用）相邻选择器元素<code>后面紧邻的</code>选择器元素，属性声明有效。（必须相邻才会有效，一个有效）</li>
</ul>
</li>
<li><p>同胞(兄弟)选择器： ~  (权重为0)</p>
<ul>
<li>在HTML代码中，（引用）兄弟选择器元素<code>后面所有的</code>选择器元素，属性声明均有效。（引用后面的均有效）</li>
</ul>
</li>
<li><p>属性选择器：属性选择器可以根据元素的属性及属性值来选择元素。</p>
<ul>
<li>eg：如果您希望把包含标题（title）的所有元素变为红色：<code>*[title] &#123;color:red;&#125;</code></li>
<li>属性选择器与类选择器的权重一样高</li>
</ul>
</li>
<li><p>伪类和伪元素的区别</p>
<ul>
<li>伪类作用对象：整个元素</li>
<li>伪元素作用： 元素的一部分</li>
</ul>
</li>
</ul>
<p><img src="wl.png" alt="伪类选择器"> </p>
<p><img src="wys.png" alt="伪元素选择器"> </p>
<p>eg：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 权重计算 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#content</span> <span class="selector-tag">div</span><span class="selector-class">.main_content</span> <span class="selector-tag">h2</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>:red;    </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#content</span> <span class="selector-class">.main_content</span> <span class="selector-tag">h2</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>:blue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">......</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main_content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是一个h2标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">第一条样式的权重计算： 100+1+10+1，结果为112；</span></span><br><span class="line"><span class="comment">第二条样式的权重计算： 100+10+1，结果为111；</span></span><br><span class="line"><span class="comment">h2标题的最终颜色为red</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 相邻选择器 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.br1</span> + <span class="selector-class">.br2</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#f00</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;br1&quot;</span>&gt;</span>我是p元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;br2&quot;</span>&gt;</span>我是p元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;br1&quot;</span>&gt;</span>我是p元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;br1&quot;</span>&gt;</span>我是p元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;br1&quot;</span>&gt;</span>我是p元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;br1&quot;</span>&gt;</span>我是p元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 兄弟选择器 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.br2</span> ~ <span class="selector-class">.br1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#f00</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;br1&quot;</span>&gt;</span>我是p元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;br2&quot;</span>&gt;</span>我是p元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;br1&quot;</span>&gt;</span>我是p元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;br1&quot;</span>&gt;</span>我是p元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;br1&quot;</span>&gt;</span>我是p元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;br1&quot;</span>&gt;</span>我是p元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2-CSS单位"><a href="#2-CSS单位" class="headerlink" title="2 CSS单位"></a>2 CSS单位</h2><h3 id="2-1-相对单位"><a href="#2-1-相对单位" class="headerlink" title="2.1 相对单位"></a>2.1 相对单位</h3><blockquote>
<p>相对单位规定相对于另一个长度属性的长度。它在不同渲染介质之间缩放表现更好。<br><img src="%E7%9B%B8%E5%AF%B9%E5%8D%95%E4%BD%8D.png" alt="相对单位"></p>
</blockquote>
<h4 id="2-1-1-em和rem"><a href="#2-1-1-em和rem" class="headerlink" title="2.1.1 em和rem"></a>2.1.1 em和rem</h4><blockquote>
<p>em : 相对于元素的字体大小.</p>
</blockquote>
<ul>
<li>em：如果自身元素未设置字体大小，那么其根据父元素的字体大小进行计算；如果自身元素设置了字体大小，则基于自身的字体大小进行计算。</li>
<li>em的值不是固定的</li>
</ul>
<blockquote>
<p>rem : 相对于根元素的字体大小计算。</p>
</blockquote>
<ul>
<li><p>rem在处理小数的时候会有误差。</p>
</li>
<li><p>不支持iframe，并且这里存在一个理念问题，大屏是为了更大更清晰，还是为了承载更多内容。</p>
</li>
<li><p><code>em</code>与<code>rem</code>的选择情况：</p>
<ul>
<li>两者在客户端中计算出来的样式都会以px的形式显示；</li>
<li><code>rem</code>是<code>相对根元素</code>html的字体大小计算，<code>em</code>是<code>相对于元素</code>的字体大小进行计算；</li>
<li>当需要根据<code>浏览器的font-size设置缩放</code>时，使用<code>rem</code>；</li>
<li>使用em应该根据组件的font-size来定；</li>
<li>rem可以从浏览器字体设置中继承font-size值；</li>
<li>em可能受任何继承过来的父元素font-size的影响。</li>
</ul>
</li>
</ul>
<h4 id="2-1-2-vh和vm，vmin和vmax"><a href="#2-1-2-vh和vm，vmin和vmax" class="headerlink" title="2.1.2 vh和vm，vmin和vmax"></a>2.1.2 vh和vm，vmin和vmax</h4><ul>
<li>vw：视窗宽度的百分比；</li>
<li>vh：视窗高度的百分比；</li>
<li>vmax：较大的 vh 和 vw；</li>
<li>vmin：较小的 vh 和 vw。</li>
</ul>
<p>eg:</p>
<ul>
<li>若一个浏览器高度为500px，宽度为1200px，<ul>
<li>1vh = 5px;</li>
<li>1vw = 12px;</li>
<li>1vmin = 5px;</li>
<li>1vmax = 12px.</li>
</ul>
</li>
</ul>
<h3 id="2-2-绝对单位"><a href="#2-2-绝对单位" class="headerlink" title="2.2 绝对单位"></a>2.2 绝对单位</h3><blockquote>
<p>绝对单位是固定的，用任何一个绝对长度表示的长度都将恰好显示为这个尺寸。</p>
</blockquote>
<ul>
<li>不建议在屏幕上使用绝对长度单位，因为屏幕尺寸变化较大。</li>
</ul>
<p><img src="%E7%BB%9D%E5%AF%B9%E5%8D%95%E4%BD%8D.png" alt="绝对单位"></p>
<h3 id="2-3-百分比单位"><a href="#2-3-百分比单位" class="headerlink" title="2.3 百分比单位"></a>2.3 百分比单位</h3><ul>
<li>百分比（%）是较常用的单位之一，所有接受长度值的属性都可以使用百分比单位。但是不同属性使用该单位的效果可能并不一样。但是都需要有一个参照值，也就是说百分比值是一个相对的值。 ​</li>
</ul>
<p><img src="%E7%99%BE%E5%88%86%E6%AF%94%E5%8D%95%E4%BD%8D.png" alt="百分比单位"></p>
<h3 id="2-4-角度单位-​"><a href="#2-4-角度单位-​" class="headerlink" title="2.4 角度单位 ​"></a>2.4 角度单位 ​</h3><p><img src="%E8%A7%92%E5%BA%A6%E5%8D%95%E4%BD%8D.png" alt="角度单位"></p>
<h2 id="3-盒子模型"><a href="#3-盒子模型" class="headerlink" title="3 盒子模型"></a>3 盒子模型</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul>
<li>盒子中的区域<ul>
<li>一个盒子有5个重要属性： <code>width(宽度)</code>、<code>height(高度)</code>、<code>padding(内边距)</code>、<code>border(边框)</code>、<code>margin(外边距)</code></li>
</ul>
</li>
</ul>
<h3 id="3-1-标准盒模型"><a href="#3-1-标准盒模型" class="headerlink" title="3.1 标准盒模型"></a>3.1 标准盒模型</h3><p><img src="%E6%A0%87%E5%87%86box.png" alt="标准盒子模型"></p>
<ul>
<li><p>标准盒子模型中“盒子”尺寸计算公式为：</p>
<ul>
<li><code>盒子实际尺寸</code> = <code>内容尺寸</code> + <code>内边距</code> + <code>边框宽度</code></li>
</ul>
</li>
<li><p>外边距合并问题：</p>
<ul>
<li>发生条件： 只有普通文档流中的块级元素的垂直外边距才会发生外边距合并。</li>
<li>外边距合并：是指当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距 = 两个发生合并外边距的高度中的较大值</li>
<li>合并情况<ul>
<li>当两个元素均有外边距时，它们将合成一个外边距，高度为元素外边距较大的那个值<br><img src="margin1.jpg" alt="垂直元素合并"></li>
<li>当一个元素包含在另一个元素中，它们的上下外边距也会合并。<br><img src="margin2.jpg" alt="元素包含合并"></li>
<li>外边距也可以和自身发生合并。当一个空元素有外边距但是没有边框或填充时，上下外边距会合并。<br><img src="margin3.jpg" alt="自身合并"></li>
<li>在自身合并的这种情况下，如果遇到另一个元素的外边距，还是会发生合并。<br><img src="margin4.jpg" alt="外边距合并"></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="3-2-怪异盒模型"><a href="#3-2-怪异盒模型" class="headerlink" title="3.2 怪异盒模型"></a>3.2 怪异盒模型</h3><p><img src="IE%E7%9B%92%E5%AD%90.png" alt="IE盒子模型"></p>
<ul>
<li><p>怪异盒模型与标准盒模型的区别：</p>
<ul>
<li>IE盒子模型的<code>content部分</code>包含了<code>border</code>和<code>padding</code>。</li>
<li>在<code>标准盒子模型</code>中：<code>width</code> 和 <code>height</code> 指的是<strong>内容区域的宽度和高度</strong>。增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸。</li>
<li>在<code>IE盒子模型</code>中：<code>width</code> 和 <code>height</code> 指的是<code>内容区域 + border + padding</code>的<strong>宽度和高度</strong>。</li>
</ul>
</li>
<li><p>IE盒模型使用设置：</p>
<ul>
<li><code>box-sizing: border-box;</code></li>
<li>需要注意的是该样式存在浏览器兼容性问题，使用时需要添加浏览器内核前缀。</li>
</ul>
</li>
<li><p>IE盒模型使用优势：</p>
<ul>
<li>IE盒模型对于百分比宽度布局有明显的便捷性，在布局时无需再去格外计算元素的内边距及边框。<br><img src="eg.jpg" alt="对比"></li>
</ul>
</li>
</ul>
<h3 id="3-3-flex盒模型"><a href="#3-3-flex盒模型" class="headerlink" title="3.3 flex盒模型"></a>3.3 flex盒模型</h3><h4 id="3-3-1-Flex布局是什么？"><a href="#3-3-1-Flex布局是什么？" class="headerlink" title="3.3.1 Flex布局是什么？"></a>3.3.1 Flex布局是什么？</h4><blockquote>
<p>Flexible box，弹性布局，用来为盒子模型提供最大的灵活性。</p>
</blockquote>
<ul>
<li>任何一个容器、行内元素都可以设置为flex布局。</li>
<li><code>webkit内核</code>的浏览器，必须加<code>-webkit</code>前缀。</li>
<li>注意，在设置flex布局之后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性都将<code>失效</code>。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="flex%E7%9B%92%E5%AD%90.png" alt="flex盒子模型"></p>
<h4 id="3-3-2-基本概念"><a href="#3-3-2-基本概念" class="headerlink" title="3.3.2 基本概念"></a>3.3.2 基本概念</h4><ul>
<li><p>容器：采用 Flex 布局的元素，称为 Flex 容器</p>
</li>
<li><p>项目：它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p>
</li>
<li><p>容器存在两根轴：</p>
<ul>
<li>水平主轴：main axis </li>
<li>垂直交叉轴： cross axis</li>
</ul>
</li>
<li><p>容器中的项目默认沿主轴排列。</p>
</li>
</ul>
<h4 id="3-3-3-容器的属性"><a href="#3-3-3-容器的属性" class="headerlink" title="3.3.3 容器的属性"></a>3.3.3 容器的属性</h4><table>
<thead>
<tr>
<th>属性</th>
<th>定义</th>
<th>使用</th>
</tr>
</thead>
<tbody><tr>
<td><code>flex-direction</code></td>
<td>决定主轴方向</td>
<td><code> row /row-reverse /column /column-reverse</code></td>
</tr>
<tr>
<td><code>flex-wrap</code></td>
<td>决定是否换行，如何换行</td>
<td><code> nowrap /wrap /wrap-reverse</code></td>
</tr>
<tr>
<td><code>flex-flow</code></td>
<td><code>flex-direction</code>和<code>flex-wrap</code>的简写形式</td>
<td><code>  &lt;flex-direction&gt; // &lt;flex-wrap&gt;</code></td>
</tr>
<tr>
<td><code>justify-content</code></td>
<td>项目在主轴上的对齐方式</td>
<td><code>flex-start /flex-end / center / space-between / space-around</code></td>
</tr>
<tr>
<td><code>align-items</code></td>
<td>项目在交叉轴上的排列方式</td>
<td><code>flex-start / flex-end / center / baseline / stretch</code></td>
</tr>
<tr>
<td><code>align-content</code></td>
<td>多根轴线的对齐方式</td>
<td><code>flex-start /flex-end /center / space-between /space-around /stretch</code></td>
</tr>
</tbody></table>
<h5 id="3-3-3-1-flex-direction"><a href="#3-3-3-1-flex-direction" class="headerlink" title="3.3.3.1 flex-direction"></a>3.3.3.1 <code>flex-direction</code></h5><ul>
<li>该属性决定主轴的方向（即内容的排列方向）</li>
<li>属性值：<ul>
<li><code>row</code>（默认值）： 水平向右；</li>
<li><code>row-reverse</code>： 水平向左；</li>
<li><code>column</code>： 垂直向下；</li>
<li><code>column-reverse</code>： 垂直向上。</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-3-3-2-flex-wrap"><a href="#3-3-3-2-flex-wrap" class="headerlink" title="3.3.3.2 flex-wrap"></a>3.3.3.2 <code>flex-wrap</code></h5><ul>
<li>该属性定义，当一行显示不下所有项目时是否换行，如何换行。(交叉轴方向决定项目换行方向)</li>
<li>属性值：<ul>
<li><code>nowrap</code>(默认值): <code>不换行</code> ；</li>
<li><code>wrap</code>：换行，第一行在<code>上</code>方；</li>
<li><code>wrap-reverse</code>： 换行，第一行在<code>下</code>方。</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-3-3-3-flex-flow"><a href="#3-3-3-3-flex-flow" class="headerlink" title="3.3.3.3 flex-flow"></a>3.3.3.3 <code>flex-flow</code></h5><ul>
<li>该属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-3-3-4-justify-content"><a href="#3-3-3-4-justify-content" class="headerlink" title="3.3.3.4 justify-content"></a>3.3.3.4 <code>justify-content</code></h5><ul>
<li>该属性定义了项目在主轴上的对齐方式。</li>
<li>属性值（具体对齐方式与轴的方向有关，假设主轴的方向为从左到右）<ul>
<li><code>flex-start</code>（默认值）：左对齐；</li>
<li><code>flex-end</code>：右对齐；</li>
<li><code>center</code>： 居中；</li>
<li><code>space-between</code>：两端对齐，项目之间的间隔都相等；</li>
<li><code>space-around</code>：每个项目两侧的间隔相等，所以，项目之间的间隔比项目与边框的间隔大一倍。</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-3-3-5-align-items"><a href="#3-3-3-5-align-items" class="headerlink" title="3.3.3.5 align-items"></a>3.3.3.5 <code>align-items</code></h5><ul>
<li>该属性定义了项目在交叉轴上如何对齐。</li>
<li>属性值（具体对齐方式与交叉轴方向有关，假设交叉轴从上到下）<ul>
<li><code>flex-start</code>：交叉轴的起点对齐。</li>
<li><code>flex-end</code>：交叉轴的终点对齐。</li>
<li><code>center</code>：交叉轴的中点对齐。</li>
<li><code>baseline</code>: 项目的第一行文字的基线对齐。</li>
<li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-3-3-6-align-content"><a href="#3-3-3-6-align-content" class="headerlink" title="3.3.3.6 align-content"></a>3.3.3.6 <code>align-content</code></h5><ul>
<li>该属性定义多根轴线的对齐方式，如果项目只有一根轴线，则不起作用。（沿着交叉轴方向的每一行，在容器中如何分布）</li>
<li>属性值<ul>
<li><code>flex-start</code>：与交叉轴的起点对齐。</li>
<li><code>flex-end</code>：与交叉轴的终点对齐。</li>
<li><code>center</code>：与交叉轴的中点对齐。</li>
<li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>
<li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>
<li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="3-3-4-项目属性"><a href="#3-3-4-项目属性" class="headerlink" title="3.3.4 项目属性"></a>3.3.4 项目属性</h4><table>
<thead>
<tr>
<th>属性</th>
<th>定义</th>
<th>使用</th>
</tr>
</thead>
<tbody><tr>
<td><code>order</code></td>
<td>定义项目的排列属性，数值越小，排列越靠前，默认为0</td>
<td><code>order: &lt;integer&gt;;</code></td>
</tr>
<tr>
<td><code>flex-grow</code></td>
<td>定义项目放大比例，默认为0，即如果存在剩余空间也不放大</td>
<td><code>flex-grow: &lt;number&gt;;</code></td>
</tr>
<tr>
<td><code>flex-shrink</code></td>
<td>定义项目的缩小比例，默认为1，即如果空间不足，项目缩小</td>
<td><code>flex-shrink: &lt;number&gt;;</code></td>
</tr>
<tr>
<td><code>flex-basis</code></td>
<td>定义在分配多余空间之前，项目占据的主轴空间，默认为auto</td>
<td><code>flex-basis: &lt;length&gt;/auto;</code></td>
</tr>
<tr>
<td><code>flex</code></td>
<td>放大，缩小和分配剩余空间的简写，默认值为<code> 0 1 auto</code></td>
<td><code> flex: none / [ &lt;&#39;flex-grow&#39;&gt; &lt;&#39;flex-shrink&#39;&gt;? // &lt;&#39;flex-basis&#39;&gt; ]</code></td>
</tr>
<tr>
<td><code>align-self</code></td>
<td>设置某个单个项目的对齐方式</td>
<td><code>align-self: auto /flex-start /flex-end /center /baseline /stretch;</code></td>
</tr>
</tbody></table>
<ul>
<li><p><code>flex-grow属性</code>：如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）；如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>
</li>
<li><p><code>flex-shrink属性</code>：如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。<strong>负值对该属性无效</strong>。</p>
</li>
<li><p><code>flex-basis属性</code>: 定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p>
</li>
<li><p><code>flex属性</code>：该属性有两个快捷值：<code>auto</code> <code>(1 1 auto)</code> 和 <code>none</code> <code>(0 0 auto)</code>。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
</li>
<li><p><code>align-self属性</code>： 允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为<code>auto</code>，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p>
</li>
<li><p><a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">CSS-Flex布局基础-阮一峰老师</a></p>
</li>
<li><p><a href="https://www.ruanyifeng.com/blog/2015/07/flex-examples.html">CSS-Flex布局实例-阮一峰老师</a></p>
</li>
</ul>
<h2 id="4-css动画"><a href="#4-css动画" class="headerlink" title="4 css动画"></a>4 css动画</h2><h3 id="4-1-JS"><a href="#4-1-JS" class="headerlink" title="4.1 JS"></a>4.1 JS</h3><h4 id="4-1-1-JS优点"><a href="#4-1-1-JS优点" class="headerlink" title="4.1.1 JS优点"></a>4.1.1 JS优点</h4><ol>
<li>控制能力更强，可以再动画播放过程中对动画进行精细控制，包括开始、暂停、终止和取消等；</li>
<li>效果比css3动画效果更丰富；</li>
<li>大多数情况下没有兼容性问题，而css3存在兼容性问题。</li>
</ol>
<h4 id="4-1-2-JS缺点"><a href="#4-1-2-JS缺点" class="headerlink" title="4.1.2 JS缺点"></a>4.1.2 JS缺点</h4><ol>
<li>复杂度高于CSS3；</li>
<li>在执行过程中，因其他进程的影响可能会出现阻塞从而出现丢帧的情况；</li>
<li>往往需要频繁操作DOM，对浏览器性能消耗较大。</li>
</ol>
<h3 id="4-2-CSS3"><a href="#4-2-CSS3" class="headerlink" title="4.2 CSS3"></a>4.2 CSS3</h3><h4 id="4-2-1-优点"><a href="#4-2-1-优点" class="headerlink" title="4.2.1 优点"></a>4.2.1 优点</h4><ol>
<li>在部分情况下浏览器可以对动画进行优化；</li>
<li>部分效果可以强制使用硬件加速。</li>
</ol>
<h4 id="4-2-2-缺点"><a href="#4-2-2-缺点" class="headerlink" title="4.2.2 缺点"></a>4.2.2 缺点</h4><ol>
<li>css3动画对运行进程控制较弱，只能在某些场景下控制动画的暂停和继续；</li>
<li>代码冗长。</li>
</ol>
<h2 id="5-CSS布局"><a href="#5-CSS布局" class="headerlink" title="5 CSS布局"></a>5 CSS布局</h2><h3 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h3><ul>
<li><p>根据宽度是否固定来分，可分为：</p>
<ul>
<li>固定宽度布局 ： PC端一般宽度为960/1000/1024px；</li>
<li>不固定宽度布局 ： 主要靠文档流的原理来布局；</li>
<li>响应式布局 ： 可以为不同终端的用户提供更加舒适的界面和更好的用户体验。</li>
</ul>
</li>
<li><p>根据栏数区分：</p>
<ul>
<li>单列布局 : 头部、内容、底部 （块级元素水平居中：<code>margin:0 auto;</code>）</li>
<li>两栏布局 ：左边固定，右边自适应 （或 右边固定，左边自适应）</li>
<li>三栏布局 ：左右固定，中间自适应。</li>
</ul>
</li>
<li><p>响应式布局：<a href="https://m.php.cn/article/476031.html">四种方式</a></p>
<ul>
<li>使用flex布局，优点代码简单、布局方便；</li>
<li>使用绝对布局，结合使用media媒体查询实现响应式布局；</li>
<li>使用Grid布局，优点是写法简单；</li>
<li>使用float布局，优点是兼容性较好；</li>
</ul>
</li>
</ul>
<h3 id="5-1-三栏布局"><a href="#5-1-三栏布局" class="headerlink" title="5.1 三栏布局"></a>5.1 三栏布局</h3><h4 id="5-1-1-圣杯布局"><a href="#5-1-1-圣杯布局" class="headerlink" title="5.1.1 圣杯布局"></a>5.1.1 圣杯布局</h4><blockquote>
<p>圣杯布局：其核心是左、中、右三栏都通过float进行浮动，然后通过负值magin进行调整。</p>
</blockquote>
<ul>
<li>实现<ul>
<li>基本布局 - 中左右 </li>
<li>1 外层div设置内边距</li>
<li>2 给三个div都添加左浮动；</li>
<li>3 让三个div位于同一行，给left增加<code>margin-left:-100%;</code> , 给right增加<code>margin-right:-100px;</code>;</li>
<li>4 将left左移，相对定位+左边盒子的宽度，<code>position: relative;left: -100px;</code></li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"> </span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 三栏布局 - 圣杯布局 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#con1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">80%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">306px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> solid red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">50px</span> auto; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">100px</span>;<span class="comment">/* 左右内边距*/</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.left2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">212</span>, <span class="number">145</span>, <span class="number">145</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: -<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.right2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">187</span>, <span class="number">137</span>, <span class="number">252</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-right</span>: -<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">221</span>, <span class="number">252</span>, <span class="number">137</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left; </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 三栏布局 - 圣杯布局 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;con1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-1-2-双飞翼布局"><a href="#5-1-2-双飞翼布局" class="headerlink" title="5.1.2 双飞翼布局"></a>5.1.2 双飞翼布局</h4><blockquote>
<p>双飞翼布局：该布局与圣杯布局的区别在于中间部分与左右部分的分离。核心实现方式也是先使用float浮动，然后通过magrin负值调整。</p>
</blockquote>
<ul>
<li>实现<ul>
<li>基本布局 - 中左右 </li>
<li>注意：中间center被放在一个div中，container与left和right平级。</li>
<li>1 给center设置左右宽度的外边距；<code>margin: 0 100px;</code></li>
<li>2 让container、left和right三个div左浮动，</li>
<li>3 给left增加<code>margin-left: -100%;</code></li>
<li>4 给right增加<code>margin-left: -100px;</code></li>
</ul>
</li>
<li>区别：<ul>
<li>圣杯：三部分同级，大div设置内边距，左中右浮动，根据center改变左右的位置；</li>
<li>双飞翼：center套在一个盒子中，给center设置外边距，左中右浮动，然后定位。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 三栏布局 - 双飞翼布局 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;con3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 三栏布局 - 双飞翼布局 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#con3</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">80%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">306px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> solid red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">50px</span> auto;  </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.left3</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">247</span>, <span class="number">181</span>, <span class="number">181</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.right3</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">137</span>, <span class="number">219</span>, <span class="number">252</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content3</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">233</span>, <span class="number">137</span>, <span class="number">252</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="5-1-3-flex布局"><a href="#5-1-3-flex布局" class="headerlink" title="5.1.3 flex布局"></a>5.1.3 flex布局</h4><blockquote>
<p>flex布局：设置容器属性和center属性即可实现，但是需要注意浏览器兼容性问题。</p>
</blockquote>
<ul>
<li>实现<ul>
<li>基本布局 - 左中右</li>
<li>1 给大div设置<code>display:flex;</code> 和 <code>justify-content: space-between;</code>属性；</li>
<li>2 给center设置<code>flex: 1;</code></li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 三栏布局 - flex布局 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;con&quot;</span> <span class="attr">id</span>=<span class="string">&quot;con4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 三栏布局 - flex */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#con4</span> &#123; </span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 容器属性设置 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>:flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-between;<span class="comment">/* 两端对齐 */</span></span></span><br><span class="line"><span class="language-css">    &#125; </span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.left4</span> , <span class="selector-class">.right4</span> &#123; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">241</span>, <span class="number">194</span>, <span class="number">150</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>; </span></span><br><span class="line"><span class="language-css">    &#125; </span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.center4</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 项目属性设置 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span>;<span class="comment">/* 设置项目放大、缩小和分配剩余空间*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">237</span>, <span class="number">180</span>, <span class="number">248</span>); </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-1-4-定位布局"><a href="#5-1-4-定位布局" class="headerlink" title="5.1.4 定位布局"></a>5.1.4 定位布局</h4><blockquote>
<p>定位：子div绝对定位，父div相对定位，左右两侧通过top、left和right固定位置，中间加magin，宽度自适应。</p>
</blockquote>
<ul>
<li>实现<ul>
<li>基本布局：左中右</li>
<li>1 给父div设置相对定位；</li>
<li>2 给left和right设置绝对定位；</li>
<li>3 给left设置<code>left:0;</code> <code>top：0；</code></li>
<li>4 给right设置<code>right:0;</code> <code>top：0；</code></li>
<li>5 给center设置外边距，左右部分的宽度。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 三栏布局 - 定位布局 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;con&quot;</span> <span class="attr">id</span>=<span class="string">&quot;con5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 三栏布局 - 定位布局 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#con5</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.left5</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">247</span>, <span class="number">181</span>, <span class="number">181</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.right5</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">137</span>, <span class="number">219</span>, <span class="number">252</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.center5</span> &#123; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">237</span>, <span class="number">180</span>, <span class="number">248</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-1-5-float布局"><a href="#5-1-5-float布局" class="headerlink" title="5.1.5 float布局"></a>5.1.5 float布局</h4><blockquote>
<p>采用float浮动，左右大小固定，中间自适应</p>
</blockquote>
<ul>
<li>实现<ul>
<li>左右两栏：设置宽度，并分别设置左右浮动；</li>
<li>中间内容：设置左右外边距为左右两栏的宽度；</li>
<li>注意：div排列时为左右中。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 三栏布局 - float --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;con1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 三栏布局 - float */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#con1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">80%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">306px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> solid red; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.left1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">252</span>, <span class="number">175</span>, <span class="number">175</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left; </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.right1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">137</span>, <span class="number">191</span>, <span class="number">252</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: right; </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">137</span>, <span class="number">252</span>, <span class="number">152</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-1-6-BFC规则"><a href="#5-1-6-BFC规则" class="headerlink" title="5.1.6 BFC规则"></a>5.1.6 BFC规则</h4><blockquote>
<p>BFC : 块级元素格式化上下文。它决定了块级元素如何对它的内容进行布局，以及和其他元素的关系的相互关系。BFC是一个独立的空间，里面的元素和外面的元素不会相互影响。</p>
</blockquote>
<ul>
<li><p>触发条件</p>
<ul>
<li>float不为none；</li>
<li>position属性为absolute和fixed；</li>
<li>overflow溢出隐藏的值不为visible；</li>
<li>html根标签；</li>
</ul>
</li>
<li><p>BFC有哪个规则</p>
<ul>
<li>浮动的元素会被父级计算高度（父级触发BFC）；</li>
<li>BFC区域和浮动元素不重叠；</li>
<li>margin不会传递给父级（父级触发了BFC）；</li>
<li>两个相邻元素上下margin会重叠；</li>
<li>BFC盒子内部的子标签按照垂直从上到下排列；</li>
<li>共用一个BFC盒子的垂直方向上的外边距会发生塌陷现象；</li>
<li>子标签都会在父盒子的左边界停靠；</li>
<li>BFC盒子是一个密闭空间，内外互不影响。</li>
</ul>
</li>
</ul>
<ul>
<li>可解决的问题<ul>
<li>外边距塌陷问题；</li>
<li>浮动特性；</li>
<li>清除浮动影响；</li>
<li>图文不环绕问题。</li>
</ul>
</li>
</ul>
<h2 id="6-其他"><a href="#6-其他" class="headerlink" title="6 其他"></a>6 其他</h2><h3 id="6-1-CSS变量"><a href="#6-1-CSS变量" class="headerlink" title="6.1 CSS变量"></a>6.1 CSS变量</h3><h4 id="6-1-1-变量的声明"><a href="#6-1-1-变量的声明" class="headerlink" title="6.1.1 变量的声明"></a>6.1.1 变量的声明</h4><ul>
<li><code>CSS变量</code>(CSS variable)又叫做<code>CSS 自定义属性</code>。在声明变量的时候，在变量名前加两根连词线（<code>--</code>）.</li>
<li>变量名大小写敏感，<code>--header-color</code>和<code>--Header-Color</code>是两个不同变量。</li>
<li>各种值都可以放入CSS变量。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attr">--foo</span>: <span class="number">#7F583F</span>;</span><br><span class="line">  <span class="attr">--bar</span>: <span class="number">#F7EFD2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-1-2-var-函数"><a href="#6-1-2-var-函数" class="headerlink" title="6.1.2 var()函数"></a>6.1.2 var()函数</h4><ul>
<li><p>作用：var()函数用于读取变量。</p>
</li>
<li><p>变量值只能用作属性值，不能用作属性名。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--foo);</span><br><span class="line">  <span class="attribute">text-decoration-color</span>: <span class="built_in">var</span>(--bar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>var()函数可以使用第二个参数，表示变量的默认值。若该变量不存在，则会使用该默认值。第二个参数不处理内部的逗号和空格，逗号和空格都将作为参数的一部分。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--foo, <span class="number">#7F583F</span>);</span><br><span class="line">  <span class="attribute">font</span>: <span class="built_in">var</span>(--font-stack, <span class="string">&quot;Roboto&quot;</span>, <span class="string">&quot;Helvetica&quot;</span>);</span><br><span class="line">  <span class="attribute">font</span>: <span class="built_in">var</span>(--pad, <span class="number">10px</span> <span class="number">15px</span> <span class="number">20px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>var()函数还可以用在变量的声明。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--primary-color</span>: red;</span><br><span class="line">  <span class="attr">--logo-text</span>: <span class="built_in">var</span>(--primary-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="6-1-3-CSS变量的作用及用法"><a href="#6-1-3-CSS变量的作用及用法" class="headerlink" title="6.1.3 CSS变量的作用及用法"></a>6.1.3 CSS变量的作用及用法</h4><ol>
<li><p>什么是CSS变量？</p>
<ul>
<li>CSS变量当前有两种形式：<ul>
<li>变量，拥有合法标识符和合法的值。可以使用var()函数来使用变量。</li>
<li>自定义属性。</li>
</ul>
</li>
</ul>
</li>
<li><p>为什么要使用css变量</p>
<ul>
<li>答：在构件大型网站时，通常会面对可维护性的挑战。在网页中使用的css数量时非常庞大的。在这种情况下维护或修改一个配色方案，都会称为一个复杂的问题。这时，使用CSS变量为我们带来了一些预处理的便利，不需要额外的编译工作。</li>
<li>减少样式重复定义，方便维护，提高可读性；</li>
<li>增加预编译的便利性；</li>
<li>变量名称本身就包含了语义信息，CSS文件将会变得易读和理解；</li>
<li>可在运行时控制css逻辑，与less/sass相比，更加灵活，因为它很容易通过js来控制；</li>
<li>可以减少js对dom的介入，制作性能更高的动画；</li>
<li>配合conent等通过css给js传参，得到一些通过js难以获取的参数。</li>
</ul>
</li>
</ol>
<ul>
<li><a href="https://www.ruanyifeng.com/blog/2017/05/css-variables.html">CSS变量教程 - 阮一峰</a></li>
<li><a href="https://blog.csdn.net/shkstart/article/details/107709997">转载-CSS变量</a></li>
</ul>
<h3 id="6-2-CSS样式抖动"><a href="#6-2-CSS样式抖动" class="headerlink" title="6.2 CSS样式抖动"></a>6.2 CSS样式抖动</h3><ul>
<li><p>前端开发时，出现页面抖动的原因？</p>
<ul>
<li>没有指定元素具体高度和宽度，例如数据还没加载进来的时候元素高度为100px，数据加载进来后元素被撑开，所以出现了抖动。</li>
<li>在使用css3动画后，经常会出现文字抖动情况，原因是元素高度塌陷。</li>
<li><a href="https://blog.csdn.net/SiShen654/article/details/118642780">css解决文字抖动问题</a></li>
</ul>
</li>
<li><p>CSS Shake：是一个使用CSS3实现的动画样式，使用SASS编写的，利用它可实现多种不同样式的抖动效果。</p>
<ul>
<li>网址：<a href="https://www.webhek.com/post/css-shake.html">CSS-shake样式抖动</a></li>
</ul>
</li>
</ul>
<h3 id="6-3-使用CSS实现网页的黑暗模式"><a href="#6-3-使用CSS实现网页的黑暗模式" class="headerlink" title="6.3 使用CSS实现网页的黑暗模式"></a>6.3 使用CSS实现网页的黑暗模式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span><span class="selector-attr">[theme=<span class="string">&quot;dark-mode&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">invert</span>(<span class="number">1</span>) <span class="built_in">hue-rotate</span>(<span class="number">180deg</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>CSS filter属性: 将模糊或颜色转移等图形效果应用到元素上。 滤镜通常用于调整图像、背景和边框的渲染。</p>
</li>
<li><p>黑暗模式使用两个滤镜：</p>
<ul>
<li>invert滤镜：可以帮助反转应用程序的颜色方案。</li>
<li>hue-rotate滤镜：可以帮助处理所有其他非黑白的颜色。将色调旋转180°，确保应用程序的颜色主题不会改变。而只是减弱他的颜色。</li>
</ul>
</li>
<li><p><a href="https://segmentfault.com/a/1190000023598551">CSS暗黑模式</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS_面试总结(1)</title>
    <url>/2022/04/06/CSS_%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%931/</url>
    <content><![CDATA[<h2 id="1-CSS元素隐藏的方式"><a href="#1-CSS元素隐藏的方式" class="headerlink" title="1 CSS元素隐藏的方式"></a>1 CSS元素隐藏的方式</h2><p><a href="https://www.sitepoint.com/hide-elements-in-css/">CSS隐藏的10种方式</a></p>
<h3 id="1-1-display-none"><a href="#1-1-display-none" class="headerlink" title="1.1 display:none"></a>1.1 display:none</h3><blockquote>
<p>通过CSS操作display，移除文档流，不保留</p>
</blockquote>
<ul>
<li>这种方式是我们最常用的隐藏页面元素的方式，它使元素完全不占控件，任何基于该元素的用户交互操作不会起任何作用，该元素的子孙元素也都会被隐藏。但是我们可以通过常用的dom操作方法访问到该元素。</li>
<li>为什么可以使用JS操作该元素？<ul>
<li>浏览器的渲染原理：浏览器会解析HTML标签生成DOMTree，解析CSS生成CSSOM，然后将DOMTree和CSSOM合成生成RenderTree，元素在RenderTree中对应0或多个盒子，然后浏览器以盒子模型的信息布局和渲染界面。而设置为display:none的元素则在RenderTree中没有生成对应的盒子模型，因此后续的布局、渲染工作自然没它什么事了，至于DOM操作还是可以的。</li>
</ul>
</li>
</ul>
<h3 id="1-2-visibility-hidden"><a href="#1-2-visibility-hidden" class="headerlink" title="1.2 visibility: hidden"></a>1.2 visibility: hidden</h3><blockquote>
<p>透明度为0，仍在文档流中，保留元素原来占有的位置。</p>
</blockquote>
<ul>
<li>这种方式区别于none的地方在于该元素依然在页面布局中起作用，它仍然占据着它原来的空间，该元素的子孙元素是可见的。 </li>
</ul>
<h3 id="1-3-opacity-0"><a href="#1-3-opacity-0" class="headerlink" title="1.3 opacity: 0;"></a>1.3 opacity: 0;</h3><blockquote>
<p>透明度为0，仍在文档流中，当作用于该元素的事件时仍有效。</p>
</blockquote>
<ul>
<li>opacity属性是用于设置元素的透明度的，当值为0时，该元素被隐藏，但它仍然在页面布局中起作用，但是它会影响部分页面交互操作，读屏软件能够读到该元素。</li>
</ul>
<h3 id="1-4-position-absolute-left-9999px"><a href="#1-4-position-absolute-left-9999px" class="headerlink" title="1.4 position: absolute; left: -9999px"></a>1.4 position: absolute; left: -9999px</h3><blockquote>
<p>绝对定位于当前页面的不可见位置。</p>
</blockquote>
<ul>
<li>position属性可以将该元素移除可视区域，不会影响布局，又可以让元素进行操作。</li>
</ul>
<h3 id="1-5-font-size-0"><a href="#1-5-font-size-0" class="headerlink" title="1.5 font-size: 0;"></a>1.5 font-size: 0;</h3><blockquote>
<p>字体大小设置为0.</p>
</blockquote>
<h2 id="2-CSS布局-position属性"><a href="#2-CSS布局-position属性" class="headerlink" title="2 CSS布局 - position属性"></a>2 CSS布局 - position属性</h2><blockquote>
<p><code>position</code>属性规定应用于元素的定位方法的类型。有五个不同的位置值：<code>static</code> , <code>relative</code> , <code>fixed</code> , <code>absolute</code> , <code>sticky</code>.</p>
</blockquote>
<blockquote>
<p>文档流：盒模型中的概念。它是在浏览器中的规则，块状元素的规则是从上到下排序的，行内元素从左到右排序。</p>
</blockquote>
<ul>
<li>脱离文档流的方案：<ul>
<li>float浮动；</li>
<li>position的absolute和fixed定位。</li>
</ul>
</li>
</ul>
<h3 id="2-1-position-static"><a href="#2-1-position-static" class="headerlink" title="2.1 position: static;"></a>2.1 position: static;</h3><blockquote>
<p>HTML元素默认情况下的定位方式是static(<strong>静态</strong>)。</p>
</blockquote>
<ul>
<li>静态定位的元素不受top、bottom、left和right属性的影响。它始终根据页面的正常流进行定位。</li>
</ul>
<h3 id="2-2-position-fixed"><a href="#2-2-position-fixed" class="headerlink" title="2.2 position: fixed;"></a>2.2 position: fixed;</h3><blockquote>
<p><strong>固定定位</strong>。使用该属性的元素是相对于浏览器窗口定位的，这意味着即使滚动页面，它也始终位于同一位置。 </p>
</blockquote>
<ul>
<li>Fixed定位在IE7和IE8以下需要描述<code>!DOCTYPE</code>才能支持。</li>
<li>Fixed定位使得元素的位置与文档流无关，因此不占据空间，它定位的元素可以和其他元素重叠。</li>
<li>固定定位适用场景：网站左右两侧的广告</li>
</ul>
<h3 id="2-3-position-relative"><a href="#2-3-position-relative" class="headerlink" title="2.3 position: relative;"></a>2.3 position: relative;</h3><blockquote>
<p>相对定位，元素相对于其<strong>正常位置</strong>进行定位。</p>
</blockquote>
<ul>
<li>设置相对定位的元素的top、right、botton和left属性将导致其偏离其正常位置进行调整。不会对其余内容进行调整来适应元素留下的任何空白。</li>
<li>移动相对定位元素，但它原本所占的空间不会改变。</li>
<li>相对定位元素常被用来作为绝对定位元素的容器块。</li>
</ul>
<h3 id="2-4-position-absolute"><a href="#2-4-position-absolute" class="headerlink" title="2.4 position: absolute;"></a>2.4 position: absolute;</h3><blockquote>
<p>绝对定位。绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于<code>&lt;html&gt;</code>。</p>
</blockquote>
<ul>
<li>绝对定位使元素的位置与文档流无关，因此不占据空间，该属性定位过的元素和其他元素重叠。</li>
</ul>
<h3 id="2-5-position-sticky"><a href="#2-5-position-sticky" class="headerlink" title="2.5 position: sticky;"></a>2.5 position: sticky;</h3><blockquote>
<p>粘性定位。基于用于的滚动位置来定位。</p>
</blockquote>
<ul>
<li>粘性定位的元素是依赖于用户的滚动，在<code>position:relative</code> 与 <code>position:fixed</code>定位之间切换。</li>
<li>它的行为就像<code>position:relative</code>。当页面滚动超出目标区域时，它的表现就像<code>position:fixed</code>，它会固定在目标位置。</li>
<li>元素定位表现为在<code>跨越特定阈值</code><strong>前</strong>为<strong>相对定位</strong>，之<strong>后</strong>为<strong>固定定位</strong>。</li>
<li>使用条件：<ul>
<li>父元素不能设置<code>overflow:hidden</code>或者<code>overflow:auto</code>属性；</li>
<li>必须指定四个方位值之一，否则只会处于相对定位；</li>
<li>父元素的高度不能低于<code>sticky</code>元素的高度；</li>
<li><code>sticky</code>元素仅在其父元素内生效。</li>
</ul>
</li>
<li>使用场景：<ul>
<li><a href="https://article.itxueyuan.com/rxXbJ1">粘性定位的几种妙用</a></li>
<li>常用的表头即将滚出可视区时吸附在顶部；</li>
<li>某些项目中需要把按钮固定在可视区域；</li>
<li>页脚固定；</li>
<li>侧边栏固定；</li>
<li>页面进度条等<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span><span class="selector-class">.sticky</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: -webkit-sticky;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: sticky;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: <span class="number">#cae8ca</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#4CAF50</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>请试着在这个框架内<span class="tag">&lt;<span class="name">b</span>&gt;</span>滚动<span class="tag">&lt;/<span class="name">b</span>&gt;</span>页面，以理解粘性定位的原理。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sticky&quot;</span>&gt;</span>我是有粘性的！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding-bottom:2000px&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>在此例中，当您到达元素的滚动位置时，粘性元素将停留在页面顶部（top: 0）。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>向上滚动以消除粘性。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>一些启用滚动的文本.. Lorem ipsum dolor sit amet, illum definitiones no quo, maluisset concludaturque et eum, altera fabulas ut quo. Atqui causae gloriatur ius te, id agam omnis evertitur eum. Affert laboramus repudiandae nec et. Inciderint efficiantur his ad. Eum no molestiae voluptatibus.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>一些启用滚动的文本.. Lorem ipsum dolor sit amet, illum definitiones no quo, maluisset concludaturque et eum, altera fabulas ut quo. Atqui causae gloriatur ius te, id agam omnis evertitur eum. Affert laboramus repudiandae nec et. Inciderint efficiantur his ad. Eum no molestiae voluptatibus.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="3-实现元素水平垂直居中的方法"><a href="#3-实现元素水平垂直居中的方法" class="headerlink" title="3 实现元素水平垂直居中的方法"></a>3 实现元素水平垂直居中的方法</h2><blockquote>
<p>元素是<code>行内元素</code>、<code>块状元素</code>及<code>不定宽高的块状元素</code>适用的方法是不同的。</p>
</blockquote>
<h3 id="3-1-text-align和-line-height"><a href="#3-1-text-align和-line-height" class="headerlink" title="3.1 text-align和 line-height"></a>3.1 text-align和 line-height</h3><blockquote>
<p>水平居中 : 给父元素设置文本center;</p>
<p>垂直居中 ：让文字的行高等于盒子的高度</p>
</blockquote>
<ul>
<li>只适用于行内元素。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.positions</span> &#123;</span><br><span class="line">     <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.positions</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">     <span class="attribute">line-height</span>:<span class="number">140px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-2-使用绝对定位和相对定位"><a href="#3-2-使用绝对定位和相对定位" class="headerlink" title="3.2 使用绝对定位和相对定位"></a>3.2 使用绝对定位和相对定位</h3><ul>
<li>若想三者都实现，偏移量需要自己计算； </li>
<li>已知宽高；<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定位1：绝对定位和相对定位 */</span></span><br><span class="line"><span class="selector-class">.positions</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.positions</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">32px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">10.5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#block</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">25px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#b2</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">25px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-3-绝对定位-translate"><a href="#3-3-绝对定位-translate" class="headerlink" title="3.3 绝对定位+translate"></a>3.3 绝对定位+translate</h3><ul>
<li>行内元素,块元素,不定宽高的块状元素都可实现；</li>
<li>不需要计算偏移量；</li>
<li>有兼容性问题。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定位2： */</span></span><br><span class="line"><span class="selector-class">.positions</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.positions</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#block</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#b2</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-4-设置top、left、right和bottom的值"><a href="#3-4-设置top、left、right和bottom的值" class="headerlink" title="3.4 设置top、left、right和bottom的值"></a>3.4 设置top、left、right和bottom的值</h3><ul>
<li>只有块元素可以实现;</li>
<li>必须知道具体的宽高；<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.positions</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.positions</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#block</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#b2</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-5-flex实现"><a href="#3-5-flex实现" class="headerlink" title="3.5 flex实现"></a>3.5 flex实现</h3><ul>
<li>父容器使用flex布局，使用<code>justify-content</code>和<code>align-items</code>，三者均可实现；<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* flex属性 */</span></span><br><span class="line"><span class="selector-class">.positions</span> &#123; </span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>问题：这种写法会到导致父容器中所有子元素都垂直居中。</li>
</ul>
<h3 id="3-6-flex布局-margin-auto"><a href="#3-6-flex布局-margin-auto" class="headerlink" title="3.6 flex布局 + margin:auto"></a>3.6 flex布局 + margin:auto</h3><ul>
<li>适用场景：指定父元素中的某个元素垂直居中，其他元素正常</li>
<li>给父元素设置<code>display: flex</code>，再给指定的子元素设置<code>margin: auto</code>;<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* flex-某一子元素垂直居中 */</span></span><br><span class="line"><span class="selector-class">.positions</span> &#123; </span><br><span class="line">    <span class="attribute">display</span>: flex; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.positions</span> <span class="selector-id">#block</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-7-display：table-cell实现"><a href="#3-7-display：table-cell实现" class="headerlink" title="3.7 display：table-cell实现"></a>3.7 display：table-cell实现</h3><ul>
<li>父元素必须要有固定宽高，百分比不可以;</li>
<li><code>display: table-cell;</code> : table布局；</li>
<li><code>vertical-align: middle;</code> : 垂直居中；</li>
<li><code>text-align: center;</code> : 水平居中。</li>
<li>对于块级元素要设置为行内块元素。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* display：table-cell实现 */</span></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#block</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4-z-index的工作原理"><a href="#4-z-index的工作原理" class="headerlink" title="4 z-index的工作原理"></a>4 z-index的工作原理</h2><ul>
<li><code>z-index</code>属性控制着元素在z轴上的表现形式。</li>
</ul>
<blockquote>
<p>z-index属性</p>
</blockquote>
<ul>
<li><code>z-index</code>属性指定两件事：<ul>
<li>当前元素的<strong>堆叠顺序</strong>；</li>
<li>当前元素是否建立<strong>新</strong>的<strong>堆叠上下文</strong>；</li>
</ul>
</li>
<li>适用范围：该属性适用于定位元素。即<code>position属性</code>值为：<code>relative</code>、<code>absolute</code>和<code>fixed</code>的元素。数值越大说明这个元素离电脑屏幕越近。<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>auto</td>
<td>默认，堆叠顺序与父元素相等</td>
</tr>
<tr>
<td><code>&lt;integer&gt;</code></td>
<td>设置元素的堆叠顺序</td>
</tr>
<tr>
<td>inherit</td>
<td>规定应该从父元素继承z-index属性的值</td>
</tr>
</tbody></table>
</li>
</ul>
<blockquote>
<p>堆叠顺序</p>
</blockquote>
<ul>
<li>堆叠顺序是当前元素位于z轴上的值。数值越大表明元素的堆叠顺序越高，越靠近屏幕。默认情况下，文档中后来声明的元素具有更高的堆叠顺序。</li>
</ul>
<blockquote>
<p>应用</p>
</blockquote>
<ul>
<li>网页两侧的浮动窗口；</li>
<li>导航栏浮动置顶；</li>
<li>隐藏div实现弹窗功能。</li>
</ul>
<blockquote>
<p>层叠上下文 - <code>stacking contect</code></p>
</blockquote>
<ul>
<li><p>假定用户正面向(浏览器)视窗或网页，而HTML元素沿着其相对于用户的一条虚构的z轴排开，<code>层叠上下文</code>就是对这些<code>HTML元素</code>的一个<code>三维构想</code>。</p>
</li>
<li><p>总结</p>
<ul>
<li><p>层叠上下文可包含在其他层叠上下文中，并且一起创建一个层叠上下文的层级；</p>
</li>
<li><p>每个层叠上下文都完全独立于它的兄弟元素：当处理层叠时只考虑子元素；（存在数值大反而在底层的情况，因为处于不同的层叠上下文）</p>
</li>
<li><p>每个层叠上下文都是自包含的：当一个元素的内容发生层叠后，该元素将被作为整体在父级层叠上下文中按顺序进行层叠。</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/Stacking_without_z-index">1-没有z-index属性的堆叠</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/Adding_z-index">2-使用z-index</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context">3-层叠上下文</a>  ( z-index: 999 元素一定会置于 z-index: 0 元素之上吗?)</p>
</li>
</ul>
</li>
</ul>
<h2 id="5-CSS3-media查询"><a href="#5-CSS3-media查询" class="headerlink" title="5 CSS3 @media查询"></a>5 CSS3 @media查询</h2><blockquote>
<p>媒体查询</p>
</blockquote>
<ul>
<li><p>什么是媒体查询 ：<strong>媒体查询可以让CSS更加精确作用于不同的媒体类型和同一媒体的不同条件。</strong></p>
</li>
<li><p>JS监听媒体查询：<code>MediaQueryList.addListener(func)</code></p>
</li>
<li><p>使用<code>@media查询</code>，可以针对不同的媒体类型定义不同的样式；</p>
</li>
<li><p><code>@media</code>可以针对不同的屏幕尺寸设置不同的样式，特别是如果需要设置<strong>响应式的页面</strong>，<code>@media</code>是非常有用的。</p>
</li>
<li><p>当你重置浏览器大小的过程中，页面也会根据浏览器的高度重新渲染页面。</p>
</li>
<li><p>浏览器支持(支持@media规则的第一个版本号)</p>
<table>
<thead>
<tr>
<th>Rule</th>
<th>谷歌</th>
<th>IE</th>
<th>火狐</th>
<th>Safari</th>
<th>Opera</th>
</tr>
</thead>
<tbody><tr>
<td>@media</td>
<td>21</td>
<td>9</td>
<td>3.5</td>
<td>4.0</td>
<td>9</td>
</tr>
</tbody></table>
</li>
</ul>
<blockquote>
<p>媒体查询的用途</p>
</blockquote>
<ul>
<li><p>使用CSS@media和at规则有条件地应用样式；</p>
</li>
<li><p>使用该属性为<code>&lt;style&gt;</code>,<code>&lt;link&gt;</code>,<code>&lt;source&gt;</code>和其他HTML元素定位特定媒体；</p>
</li>
<li><p>使用JS方法测试和监控媒体状态。</p>
<p>  eg:</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">500px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.gridmenu</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.gridmain</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.gridright</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries">1-使用媒体查询</a></p>
<p>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MediaQueryList">2-媒体查询列表</a></p>
<p>  问题：<a href="https://blog.csdn.net/weixin_42339423/article/details/109607103">媒体查询以及js模拟实现媒体查询</a></p>
</li>
</ul>
<h2 id="CSS-reset样式重置"><a href="#CSS-reset样式重置" class="headerlink" title=".. CSS reset样式重置"></a>.. CSS reset样式重置</h2><ul>
<li>样式重置的原因：不同浏览器不同版本对于某一元素的默认样式设置可能不同，为了处理兼容性，所以使用样式重置。</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML-input标签</title>
    <url>/2022/04/28/HTML-input%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<h2 id="HTML中的input标签的type"><a href="#HTML中的input标签的type" class="headerlink" title="HTML中的input标签的type"></a>HTML中的input标签的type</h2><blockquote>
<p>input标签： 用于搜集用户信息，根据不同的type属性值，输入字段拥有很多种形式。</p>
</blockquote>
<ul>
<li>HTML5中增加的新类型：<ul>
<li>color、date、datetime、datetime-local、month、week、time、email、number、range、search、tel 和 url。</li>
<li>语法：<code>&lt;input type=&quot; value &quot;&gt;</code></li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>type值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>color</td>
<td>定义拾色器。</td>
</tr>
<tr>
<td>date</td>
<td>定义 date 控件（包括年、月、日，不包括时间）。</td>
</tr>
<tr>
<td>datetime</td>
<td>定义 date 和 time 控件（包括年、月、日、时、分、秒、几分之一秒，基于 UTC 时区）。</td>
</tr>
<tr>
<td>datetime-local</td>
<td>定义 date 和 time 控件（包括年、月、日、时、分、秒、几分之一秒，不带时区）。</td>
</tr>
<tr>
<td>email</td>
<td>定义用于 e-mail 地址的字段。</td>
</tr>
<tr>
<td>month</td>
<td>定义 month 和 year 控件（不带时区）。</td>
</tr>
<tr>
<td>number</td>
<td>定义用于输入数字的字段。</td>
</tr>
<tr>
<td>range</td>
<td>定义用于精确值不重要的输入数字的控件（比如 slider 控件）。</td>
</tr>
<tr>
<td>search</td>
<td>定义用于输入搜索字符串的文本字段。</td>
</tr>
<tr>
<td>tel</td>
<td>定义用于输入电话号码的字段。</td>
</tr>
<tr>
<td>time</td>
<td>定义用于输入时间的控件（不带时区）。</td>
</tr>
<tr>
<td>url</td>
<td>定义用于输入 URL 的字段。</td>
</tr>
<tr>
<td>week</td>
<td>定义 week 和 year 控件（不带时区）。</td>
</tr>
</tbody></table>
<ul>
<li>常见：<ul>
<li>text(默认) ：文本框</li>
<li>password：密码框</li>
<li>checkbox：多选框</li>
<li>radio：单选框</li>
<li>submit：提交按钮,  reset：重置按钮, image：图片按钮, button：普通按钮</li>
<li>file：选择文件的控件</li>
<li>search：搜索框</li>
<li>hidden： 不显示的控件</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML-知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML面试总结(1)</title>
    <url>/2022/04/05/HTML%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93(1)/</url>
    <content><![CDATA[<h2 id="1-标签语义化"><a href="#1-标签语义化" class="headerlink" title="1 标签语义化"></a>1 标签语义化</h2><blockquote>
<p>语义化： 通过这个标签的名称就可以知道这个标签的含义。</p>
</blockquote>
<h4 id="常见语义化标签："><a href="#常见语义化标签：" class="headerlink" title="常见语义化标签："></a>常见语义化标签：</h4><ul>
<li><p>html5新增的语义标签</p>
<ul>
<li>header, footer, nav, section, article, aside, details, summary,<br>dialog, figure, main, mark, time</li>
</ul>
</li>
<li><p>常见：</p>
<ul>
<li>h1/h2/h3/h4/h5</li>
<li>img</li>
<li>p</li>
<li>menu</li>
</ul>
</li>
</ul>
<blockquote>
<p>1.1 什么是标签语义化？</p>
</blockquote>
<p>答：语义化变迁就是具有语义的标签，它可以清晰地向我们展示它的作用和用途。</p>
<blockquote>
<p>1.2 常见的标签有哪些？都有什么含义？</p>
</blockquote>
<p>答：HTML将标签可分为三类：行内元素，块级元素和行内块元素。这三者可以使用dispaly属性进行转化。</p>
<ul>
<li>行内元素：内容撑开宽度，左右都是行内元素的可以排列在一行，无法对它设置宽和高，常见的行内块元素有<code>&lt;a&gt;</code>,<code>&lt;span&gt;</code>,<code>&lt;input&gt;</code>,<code>&lt;textarea&gt;</code>等。行内元素的设置方式：<code>display:inline</code>。</li>
<li>块级元素：可以自动换行，多个块级元素写在一起时默认排列方式为从上至下。常见的块级元素有：<code>&lt;h1&gt;-&lt;h5&gt;</code>,<code>&lt;p&gt;</code>,<code>&lt;div&gt;</code>,<code>&lt;nav&gt;</code>,<code>&lt;header&gt;</code>,<code>&lt;footer&gt;</code>等。块级元素的设置方式：<code>display:block</code>。</li>
<li>行内块元素：它综合了行内元素和块级元素的特性，不自动换行，可以设置宽高，默认排列方式为从左向右。行内块级元素的设置方式：<code>display:inline-block</code>。</li>
</ul>
<blockquote>
<p>1.3 display除<code>inline</code>，<code>block</code>和<code>inline-block</code>以外，还有什么值？有什么含义？</p>
</blockquote>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>none</td>
<td>该元素不会被显示</td>
</tr>
<tr>
<td>list-item</td>
<td>该元素会被作为列表显示</td>
</tr>
<tr>
<td>inherit</td>
<td>规定应该从父元素继承display属性的值</td>
</tr>
<tr>
<td>flex</td>
<td>CSS3引入的新的布局模式，弹性盒模型</td>
</tr>
</tbody></table>
<blockquote>
<p>1.4 让元素隐藏的方式，除了display:none外，还有什么方式？</p>
</blockquote>
<p>答：还有visibility，opacity和position。</p>
<h2 id="2-对HTML5的理解"><a href="#2-对HTML5的理解" class="headerlink" title="2 对HTML5的理解"></a>2 对HTML5的理解</h2><p>答： HTML5是新一代的HTML，相比之前的版本做了如下改动：</p>
<ul>
<li>良好的移动性，以移动端设备为主；</li>
<li>增加了响应式设计，以适应自动变化的屏幕尺寸；</li>
<li>支持离线缓存技术，webStorage本地缓存；</li>
<li>增加了canvas，video，audio等新标签元素；</li>
<li>新增特殊的内容元素：article ,footer ,header,nav ,section等；</li>
<li>新增表单控件：calendar，date，time，email，url，search等；</li>
<li>地理定位功能；</li>
<li>新增webSocket/webWork技术。</li>
</ul>
<h2 id="3-常见标签分类"><a href="#3-常见标签分类" class="headerlink" title="3 常见标签分类"></a>3 常见标签分类</h2><h3 id="3-1-行内元素"><a href="#3-1-行内元素" class="headerlink" title="3.1 行内元素"></a>3.1 行内元素</h3><blockquote>
<p>行内元素：内容撑开宽度，左右都是行内元素的可以排列在一行，无法对它设置宽和高.</p>
</blockquote>
<ul>
<li>常见的行内块元素有<code>&lt;a&gt;</code>,<code>&lt;span&gt;</code>,<code>&lt;input&gt;</code>,<code>&lt;textarea&gt;</code>等。</li>
<li>行内元素的设置方式：<code>display:inline</code>。<h3 id="3-2-块级元素"><a href="#3-2-块级元素" class="headerlink" title="3.2 块级元素"></a>3.2 块级元素</h3><blockquote>
<p>块级元素：可以自动换行，多个块级元素写在一起时默认排列方式为从上至下。</p>
</blockquote>
</li>
<li>常见的块级元素有：<code>&lt;h1&gt;-&lt;h5&gt;</code>,<code>&lt;p&gt;</code>,<code>&lt;div&gt;</code>,<code>&lt;nav&gt;</code>,<code>&lt;header&gt;</code>,<code>&lt;footer&gt;</code>等。</li>
<li>块级元素的设置方式：<code>display:block</code>。<h3 id="3-1-行内块元素"><a href="#3-1-行内块元素" class="headerlink" title="3.1 行内块元素"></a>3.1 行内块元素</h3><blockquote>
<p>行内块元素：它综合了行内元素和块级元素的特性，不自动换行，可以设置宽高，默认排列方式为从左向右。</p>
</blockquote>
</li>
<li>行内块级元素的设置方式：<code>display:inline-block</code>。</li>
</ul>
<h2 id="4-其他"><a href="#4-其他" class="headerlink" title="4 其他"></a>4 其他</h2><h3 id="4-1-HTML状态码"><a href="#4-1-HTML状态码" class="headerlink" title="4.1 HTML状态码"></a>4.1 HTML状态码</h3><blockquote>
<p>当用户浏览一个网页时，浏览器会向网页所在的服务器发出请求。当浏览器接收并显示王爷前，此网页所在的服务器会返回一个包含HTTP状态码的信息头用以响应浏览器的请求。</p>
</blockquote>
<p><a href="https://www.runoob.com/http/http-status-codes.html">HTTP状态码 - 菜鸟教程</a></p>
<h4 id="常见状态码分类"><a href="#常见状态码分类" class="headerlink" title="常见状态码分类:"></a>常见状态码分类:</h4><ul>
<li>1** ： 信息，服务器收到请求，需要请求者继续执行操作；</li>
<li>2** ： 成功；</li>
<li>3** ： 重定向，需要进一步的操作完成请求；</li>
<li>4** ： 客户端错误；</li>
<li>5** ： 服务器端错误； <h4 id="常见状态码："><a href="#常见状态码：" class="headerlink" title="常见状态码："></a>常见状态码：</h4></li>
<li><code>200 - OK</code> ：请求成功，一般用于get和post请求；</li>
<li><code>301 - Moved Permanently</code> ：永久重定向，网页被永久转移到其他URL；</li>
<li><code>302 - Found </code> ：临时重定向，资源只是临时被移动，客户端继续使用原有的URL；</li>
<li><code>304 - Not Modified</code> ： 缓存，未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源；</li>
<li><code>403 - Forbidden</code> ： 一般是参数传递时有问题；</li>
<li><code>404 - Not Found</code> ： 找不到资源，请求的资源/网页等不存在；</li>
<li><code>500 - Internal Server Error</code> ： 内部服务器错误，无法完成请求；</li>
</ul>
<h3 id="4-2-关于URL编码-（URL-Encode）"><a href="#4-2-关于URL编码-（URL-Encode）" class="headerlink" title="4.2 关于URL编码 （URL Encode）"></a>4.2 关于URL编码 （URL Encode）</h3><blockquote>
<p>URL就是网址，URL只能由字母、数字、一些特殊符号组成<code>$-_.+!*&#39;(),</code>、以及某些保留字来组成。</p>
</blockquote>
<p><a href="http://www.ruanyifeng.com/blog/2010/02/url_encoding.html">关于URL编码</a></p>
<h3 id="4-3-HTML中的input标签的type"><a href="#4-3-HTML中的input标签的type" class="headerlink" title="4.3 HTML中的input标签的type"></a>4.3 HTML中的input标签的type</h3><blockquote>
<p>input标签： 用于搜集用户信息，根据不同的type属性值，输入字段拥有很多种形式。</p>
</blockquote>
<ul>
<li>HTML5中增加的新类型：<ul>
<li>color、date、datetime、datetime-local、month、week、time、email、number、range、search、tel 和 url。</li>
<li>语法：<code>&lt;input type=&quot; value &quot;&gt;</code></li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>type值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>color</td>
<td>定义拾色器。</td>
</tr>
<tr>
<td>date</td>
<td>定义 date 控件（包括年、月、日，不包括时间）。</td>
</tr>
<tr>
<td>datetime</td>
<td>定义 date 和 time 控件（包括年、月、日、时、分、秒、几分之一秒，基于 UTC 时区）。</td>
</tr>
<tr>
<td>datetime-local</td>
<td>定义 date 和 time 控件（包括年、月、日、时、分、秒、几分之一秒，不带时区）。</td>
</tr>
<tr>
<td>email</td>
<td>定义用于 e-mail 地址的字段。</td>
</tr>
<tr>
<td>month</td>
<td>定义 month 和 year 控件（不带时区）。</td>
</tr>
<tr>
<td>number</td>
<td>定义用于输入数字的字段。</td>
</tr>
<tr>
<td>range</td>
<td>定义用于精确值不重要的输入数字的控件（比如 slider 控件）。</td>
</tr>
<tr>
<td>search</td>
<td>定义用于输入搜索字符串的文本字段。</td>
</tr>
<tr>
<td>tel</td>
<td>定义用于输入电话号码的字段。</td>
</tr>
<tr>
<td>time</td>
<td>定义用于输入时间的控件（不带时区）。</td>
</tr>
<tr>
<td>url</td>
<td>定义用于输入 URL 的字段。</td>
</tr>
<tr>
<td>week</td>
<td>定义 week 和 year 控件（不带时区）。</td>
</tr>
</tbody></table>
<ul>
<li>常见：<ul>
<li>text(默认) ：文本框</li>
<li>password：密码框</li>
<li>checkbox：多选框</li>
<li>radio：单选框</li>
<li>submit：提交按钮,  reset：重置按钮, image：图片按钮, button：普通按钮</li>
<li>file：选择文件的控件</li>
<li>search：搜索框</li>
<li>hidden： 不显示的控件</li>
</ul>
</li>
</ul>
<h3 id="4-4-Data-URL"><a href="#4-4-Data-URL" class="headerlink" title="4.4 Data URL"></a>4.4 Data URL</h3><ol>
<li><p>什么是Data URL</p>
<blockquote>
<p>Data URL是将图片转换为base64直接嵌入到网页中，使用<code>&lt;img src=&quot;data:[MIME type];base64&quot;/&gt;</code>这种方式引用图片，不需要再发送请求获取图片。</p>
</blockquote>
</li>
<li><p>Data URL能用在很多场合，跟传统的外部资源引用方式相比，它独有的用处：</p>
<ol>
<li>当访问外部资源很麻烦或受限时；</li>
<li>当图片是在服务器端用程序动态生成，每个访问用户显示的都不同时；</li>
<li>当图片的体积太小，占用一个http会话不是很值得时；</li>
</ol>
</li>
<li><p>Data URL缺点：</p>
<ol>
<li>base64编码后的图片会比原来的体积大三分之一左右；</li>
<li>Data URL形式的图片不会被缓存下来，每次访问页面都要被下载一次。</li>
</ol>
</li>
<li><p>优化方法：在CSS里使用Data URL</p>
</li>
</ol>
<p><a href="https://www.cnblogs.com/xuechenlei/p/5940371.html">Data URL简介及利弊</a></p>
<h3 id="4-5-重排和重绘"><a href="#4-5-重排和重绘" class="headerlink" title="4.5 重排和重绘"></a>4.5 重排和重绘</h3><p><code>重排</code>和<code>重绘</code>是<code>关键渲染路径</code>中的两步。<strong>重排必定会造成重绘</strong>。</p>
<blockquote>
<p>重排-Reflow ： 元素的<code>位置发生变动</code>时发生<code>重排</code>。</p>
</blockquote>
<ul>
<li>重排在关键渲染路径中的Layout阶段，计算每一个元素在设备视口内的确切位置和大小。当一个元素位置发生变化时，其父元素及其后边的元素位置都可能发生变化，代价极高。</li>
</ul>
<blockquote>
<p>重绘-Repaint： 元素的<code>样式发生变动</code>时，但位置没有发生变化。</p>
</blockquote>
<ul>
<li><p>重绘在关键渲染路径中的Paint阶段，将渲染树中的每个节点转换成屏幕上的实际像素，这一步通常称为绘制或栅格化。</p>
</li>
<li><p>避免过多重排重绘的方法：</p>
<ul>
<li>使用<code>DocumentFragment</code>进行Dom操作；</li>
<li>CSS样式尽量批量修改；</li>
<li>避免使用table布局；</li>
<li>为元素提前设置好高宽，不因多次渲染而改变位置。</li>
</ul>
</li>
</ul>
<p><a href="https://www.cnblogs.com/soyxiaobi/p/9963019.html">前端性能优化之重排重绘</a></p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>JS-Promise</title>
    <url>/2022/04/28/JS-Promise/</url>
    <content><![CDATA[<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1 2 4 3 </span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// promise成功后之执行.then函数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>Promise的构造函数是同步执行</li>
<li>.then()是异步执行的</li>
</ul>
<blockquote>
<p>Promise是异步编程的一种解决方案 , 简单说就是一个容器，里面保存着某个未来才会结束的事件的结果。</p>
</blockquote>
<ul>
<li><p>同步： 只有前一个任务执行完毕，才能继续执行下一个任务。</p>
</li>
<li><p>异步： 不进入主线程，进入的是任务队列，只有任务队列通知主线程某个异步任务可以执行了，该任务才会进入主线程。 </p>
</li>
<li><p>Promise对象的特点：</p>
<ul>
<li>对象的状态不受外界影响。</li>
<li>一旦状态改变，就不会再变，任何时候都可以得到这个结果。</li>
</ul>
</li>
<li><p>Promise有哪几种状态？</p>
<ul>
<li>pending（进行中）</li>
<li>fulfilled（已成功）</li>
<li>rejected（已失败）</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 同步是指：当程序1调用程序2时，程序1停下不动，直到程序2完成回到程序1来，程序1才继续执行下去。  </span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 异步是指：当程序1调用程序2时，程序1径自继续自己的下一个动作，不受程序2的的影响。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 为了解决“回调地域”等问题，ES6提出了promise来解决以上问题。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// promise：用同步的形式处理异步的问题。promise是一个对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// resolve(&#x27;success&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">reject</span>(<span class="string">&#x27;fail&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// resolve(&#x27;success&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// reject(&#x27;fail&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">resolve</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p3&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">resolve</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">500</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p4 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p4&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">resolve</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 需求：某一事件的处理需要以上三个事件的数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 结果：等待时间最长的事件结束</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Promise</span>.<span class="title function_">all</span>([p2, p3, p4]).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;都结束了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Promise</span>.<span class="title function_">race</span>([p2, p3, p4]).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ok!!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS-知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>JS-call、apply和bind</title>
    <url>/2022/04/28/JS-call%E3%80%81apply%E5%92%8Cbind/</url>
    <content><![CDATA[<h2 id="改变this指向的方式"><a href="#改变this指向的方式" class="headerlink" title="改变this指向的方式"></a>改变this指向的方式</h2><h3 id="1-基础"><a href="#1-基础" class="headerlink" title="1 基础"></a>1 基础</h3><ol>
<li><p>简介</p>
<ul>
<li><code>call</code>和<code>apply</code>都属于<code>Function.prototype</code>的一个方法，它是JS引擎内在实现的，因为属于<code>Function.prototype</code>，所以每个<code>function对象实例</code>都有<code>call</code>和<code>apply</code>属性。</li>
<li>目标函数调用call和apply后，会直接被执行。</li>
<li>目标函数调用bind后，不会立即执行，而是返回一个新的函数，调用新函数才会执行目标函数。</li>
</ul>
</li>
<li><p>作用 ：改变this的指向。 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    改变 this 的指向方式：</span></span><br><span class="line"><span class="comment">        1. call (this,arg1,arg2,arg3)</span></span><br><span class="line"><span class="comment">        2. apply (this,[arg1,arg2,arg3])</span></span><br><span class="line"><span class="comment">        3. bind (this,arg1,arg2,arg3) 手动调用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> oBtn1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn1&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fn5 = <span class="keyword">function</span> (<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, str);</span><br><span class="line">&#125;</span><br><span class="line">fn5.<span class="title function_">call</span>(oBtn1, <span class="string">&#x27;aa&#x27;</span>);</span><br><span class="line">fn5.<span class="title function_">apply</span>(oBtn1, [<span class="string">&#x27;aa&#x27;</span>]);</span><br><span class="line">fn5.<span class="title function_">bind</span>(oBtn1, <span class="string">&#x27;aa&#x27;</span>)();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">getName</span>.<span class="title function_">call</span>(obj2,  <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ));<span class="comment">// aaa</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">getName</span>.<span class="title function_">apply</span>(obj2, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]));<span class="comment">// aaa</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">getName</span>.<span class="title function_">bind</span>(obj2,<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> )());<span class="comment">// aaa</span></span><br></pre></td></tr></table></figure></li>
<li><p>区别 ：在于接收参数的方式不同</p>
<ul>
<li><code>call()</code> : 第一个参数是this值，其余参数都直接传递给函数。 传递给函数的<strong>参数必须逐个列举</strong>。</li>
<li><code>apply()</code> : 传递给函数的是<strong>参数数组</strong>。</li>
<li><code>bind()</code> ： 手动调用，返回的是函数。在使用时要加<code>()</code>。</li>
</ul>
</li>
<li><p>应用场景</p>
<ul>
<li>实现JS的继承，构造函数继承可以使用call实现；</li>
<li>判断JS的数据类型；<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用call判断js的数据类型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(&#123;&#125;)=== <span class="string">&#x27;[object Object]&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([])=== <span class="string">&#x27;[object Array]&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
<li>把伪数组转换为数组。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用call把伪数组转换成数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);<span class="comment">// Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>([...<span class="variable language_">arguments</span>]);<span class="comment">// es6  (3) [1, 2, 3]</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>));<span class="comment">//es5  (3) [1, 2, 3]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">get</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="2-call"><a href="#2-call" class="headerlink" title="2 call()"></a>2 call()</h3><ol>
<li><p>改变this指向</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// call实现改变this指向</span></span><br><span class="line">    <span class="keyword">var</span> person = &#123;</span><br><span class="line">        getName : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> person1 = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;ddd&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">getName</span>.<span class="title function_">call</span>(person1))</span><br></pre></td></tr></table></figure>

<ul>
<li>手写<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    手写call</span></span><br><span class="line"><span class="comment">    1. 写在哪？ Function.prototype后</span></span><br><span class="line"><span class="comment">    2. 对this进行判断，this必须是一个function，如果不是function则抛出异常</span></span><br><span class="line"><span class="comment">    3. 给上下文赋值，设置为接收到的参数或者是window</span></span><br><span class="line"><span class="comment">    4. 考虑参数，拿到除了第一个参数之外的参数</span></span><br><span class="line"><span class="comment">    5. 改变this的指向</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">mycall</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    context = context || <span class="variable language_">window</span>;<span class="comment">// 给context赋值</span></span><br><span class="line">    <span class="keyword">let</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>);<span class="comment">//获取除第一个参数之外的参数 </span></span><br><span class="line"></span><br><span class="line">    context.<span class="property">fn</span> = <span class="variable language_">this</span>;<span class="comment">// 改变this的指向</span></span><br><span class="line">    <span class="keyword">let</span> result = context.<span class="title function_">fn</span>(...args);<span class="comment">// 解构参数 </span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">getName</span>.<span class="title function_">mycall</span>(person1))</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="3-apply"><a href="#3-apply" class="headerlink" title="3 apply()"></a>3 apply()</h3><ul>
<li>手写apply()<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    手写apply</span></span><br><span class="line"><span class="comment">    与call的区别：将传入的第二个参数(数组)进行解构</span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    context = context || <span class="variable language_">window</span>;<span class="comment">// 给context赋值</span></span><br><span class="line">    context.<span class="property">fn</span> = <span class="variable language_">this</span>; <span class="comment">// 改变this的指向</span></span><br><span class="line">    <span class="keyword">let</span> result;</span><br><span class="line">    <span class="comment">// 判断是否有传入多的参数</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">arguments</span>[<span class="number">1</span>])&#123;</span><br><span class="line">        result = context.<span class="title function_">fn</span>(...<span class="variable language_">arguments</span>[<span class="number">1</span>]);<span class="comment">// 解构</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        result = context.<span class="title function_">fn</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> context.<span class="property">fn</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">getName</span>.<span class="title function_">myApply</span>(obj2,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]));<span class="comment">// 手写</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">getName</span>.<span class="title function_">apply</span>(obj2,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])); <span class="comment">// 调用</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-bind"><a href="#4-bind" class="headerlink" title="4 bind()"></a>4 bind()</h3><ul>
<li>手写bind()<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind1</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// arguments 可以获取一个函数的所有参数，arguments 是一个伪数组</span></span><br><span class="line">    <span class="comment">// 使用 Array.from() 方法将 arguments 伪数组转化成数组</span></span><br><span class="line">    <span class="keyword">const</span> args = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">    <span class="comment">// 获取 this 指向取出数组第一项，数组剩余的就是传递的参数</span></span><br><span class="line">    <span class="keyword">const</span> _this = args.<span class="title function_">shift</span>()</span><br><span class="line">    <span class="keyword">const</span> context = <span class="variable language_">this</span> <span class="comment">// 当前函数 fn1.bind(...) 中的 fn1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> context.<span class="title function_">apply</span>(_this, args)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this&#x27;</span>, <span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    fn1.<span class="title function_">bind1</span>(&#123; <span class="attr">x</span>: <span class="number">100</span> &#125;, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn2</span>();</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS-知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>JS-this</title>
    <url>/2022/04/28/JS-this/</url>
    <content><![CDATA[<h2 id="1-JS中的this"><a href="#1-JS中的this" class="headerlink" title="1 JS中的this"></a>1 JS中的this</h2><ul>
<li>this指向： <code>this指的是函数运行时 所在的“环境”</code></li>
</ul>
<blockquote>
<p>使用情况1 ： 在函数中直接使用</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">con</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(con);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数直接使用，get写法就等于get.call ，指向window</span></span><br><span class="line"><span class="title function_">get</span>(<span class="string">&#x27;hhh&#x27;</span>); </span><br><span class="line">get.<span class="title function_">call</span>(<span class="variable language_">window</span>, <span class="string">&#x27;hhh&#x27;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用情况2 ： 函数作为对象的方法被调用（谁调用，指向谁）</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zhangsna&#x27;</span>,</span><br><span class="line">    <span class="attr">run</span>: <span class="keyword">function</span>(<span class="params">time</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>在跑步，最多跑<span class="subst">$&#123;time&#125;</span>min`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数方法被调用，谁调用就指向谁</span></span><br><span class="line">person.<span class="title function_">run</span>(<span class="number">30</span>);</span><br><span class="line">person.<span class="property">run</span>.<span class="title function_">call</span>(person, <span class="number">30</span>);</span><br></pre></td></tr></table></figure>

<p>eg：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = a.<span class="property">say</span>;</span><br><span class="line"><span class="comment">// var fun = function () &#123;</span></span><br><span class="line"><span class="comment">//     console.log(this.name);</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="title function_">fun</span>()   <span class="comment">// 函数直接调用 fun.call(window)  222</span></span><br><span class="line">a.<span class="title function_">say</span>() <span class="comment">// a.say.call(a)  111</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="number">333</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span> (<span class="params">fun</span>) &#123;</span><br><span class="line">        <span class="title function_">fun</span>() <span class="comment">// fun.call(window,a.say)  则this指向a  222</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">b.<span class="title function_">say</span>(a.<span class="property">say</span>); <span class="comment">// 函数方法被调用</span></span><br><span class="line">b.<span class="property">say</span> = a.<span class="property">say</span>;</span><br><span class="line"><span class="comment">// b.say = function () &#123;</span></span><br><span class="line"><span class="comment">//     console.log(this.name);</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line">b.<span class="title function_">say</span>();   <span class="comment">// b.say.call(b) 333</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>普通函数的this指向问题：</p>
</blockquote>
<ul>
<li>谁调用这个方法/谁触发事件，this就指向谁<ul>
<li>事件处理函数 this =&gt; 指向绑定事件的那个dom元素</li>
<li>定时器中 this =&gt; 指向window</li>
<li>自定义函数 this =&gt; 指向window</li>
<li>自定义对象 this =&gt; 指向对象</li>
<li>在类中的 this   =&gt; 指向new出来的实例化对象</li>
</ul>
</li>
</ul>
<blockquote>
<p>箭头函数的 this 指向：</p>
</blockquote>
<ul>
<li>解释一：this指向的是定义时所在的对象，而不是使用时所在的对象。</li>
<li>解释二：箭头函数没有this，它的父作用域中的this是谁，箭头函数的this就是谁，否则就是window。</li>
<li>因为箭头函数没有this，所以它不能用作构造函数。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// -----4----- 箭头函数</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">x</span>:<span class="number">22</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>); <span class="comment">// 11</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">say</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// -----5----- 箭头函数</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">birth</span>: <span class="number">1990</span>,</span><br><span class="line">    <span class="attr">getAge</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="variable language_">this</span>.<span class="property">birth</span>;<span class="comment">// 1990</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title function_">fn</span> = (<span class="params"></span>)=&gt; <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getFullYear</span>() - <span class="variable language_">this</span>.<span class="property">birth</span>;<span class="comment">//2022-1990</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">fn</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">getAge</span>(); <span class="comment">//32</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-了解this"><a href="#2-了解this" class="headerlink" title="2 了解this"></a>2 了解this</h2><ul>
<li><p>历史原因：</p>
<ul>
<li>JS语言设计this是跟内存的数据结构有关。</li>
</ul>
</li>
<li><p>原理</p>
<ul>
<li>因为函数可以在不同的环境下执行，所以就需要一种机制，能够在函数体内获取当前的运行环境。</li>
</ul>
</li>
<li><p>设计目的</p>
<ul>
<li>this的设计目的就是在函数体内，指向函数当前的运行环境。</li>
</ul>
</li>
</ul>
<h2 id="3-改变this指向的方法"><a href="#3-改变this指向的方法" class="headerlink" title="3 改变this指向的方法"></a>3 改变this指向的方法</h2><ul>
<li>call、apply、bind ： 是所有函数都具有的方法</li>
<li>注意：函数也是对象，函数具有方法;</li>
<li>apply可以将数组展开：<br>```js<br>  console.log(Math.max.apply(null,[1,2,3,99]));// 99</li>
</ul>
<p>*** - 引擎会将函数单独保存在内存中。 </p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS-知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>JS-原型与原型链</title>
    <url>/2022/04/28/JS-%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    <content><![CDATA[<h2 id="1-原型与原型链"><a href="#1-原型与原型链" class="headerlink" title="1 原型与原型链"></a>1 原型与原型链</h2><h3 id="1-1-原型-prototype"><a href="#1-1-原型-prototype" class="headerlink" title="1.1 原型 prototype"></a>1.1 原型 prototype</h3><blockquote>
<p>原型：prototype </p>
</blockquote>
<ul>
<li><p>所有的<code>引用类型</code>都有一个<code>__proto__</code>(隐式原型)属性， 属性值是一个<code>普通的对象</code>；</p>
</li>
<li><p>所有的<code>函数</code>都有一个<code>prototype属性</code>， 属性值是一个普通的<code>对象</code>；</p>
</li>
<li><p>所有<code>引用类型的__proto__属性</code>都<code>指向</code>它<code>构造函数的prototype</code>。</p>
</li>
<li><p>为什么设计原型？ 答：为了实现继承。让对象的属性和方法实现共享。</p>
</li>
</ul>
<img src="proto.png" width="50%" height="60%">

<p>注意：</p>
<ul>
<li><strong>常规的对象和数组没有原型，原型是函数特有的。</strong></li>
</ul>
<blockquote>
<p>constructor</p>
</blockquote>
<ul>
<li>每个原型对象都有一个 constructor 属性，指向相关联的构造函数，所以构造函数和构造函数的 prototype 是可以相互指向的。<img src="constructor.png" width="50%" height="60%"> </li>
</ul>
<h3 id="1-2-原型链-proto"><a href="#1-2-原型链-proto" class="headerlink" title="1.2 原型链 proto"></a>1.2 原型链 <em>proto</em></h3><h4 id="1-2-1-原型链"><a href="#1-2-1-原型链" class="headerlink" title="1.2.1 原型链"></a>1.2.1 原型链</h4><ul>
<li><p>当访问一个对象的某个属性时，首先会在这个对象本身的属性上查找，如果没有找到，则会去它的<code>__proto__</code>(隐式原型)上查找，如果还没有找到就会在它的构造函数的<code>prototype</code>的<code>__proto__</code>中查找，这样一层一层向上查找就会形成一个链式结构，称为<code>原型链</code>。</p>
</li>
<li><p>原型链：每一个对象都有原型（<code>__proto__</code>），这个原型还有属于自己的原型，层层递进，最终形成了原型链，。原型链的最顶端是null。</p>
</li>
<li><p>谷歌浏览器改版后展示方式：<code>[[prototype]]</code>。</p>
</li>
<li><p>所有对象都有原型链。</p>
</li>
</ul>
<img src="prototype.png" width="50%" height="60%"> 
 

<h4 id="1-2-2-原型链的查找规则"><a href="#1-2-2-原型链的查找规则" class="headerlink" title="1.2.2 原型链的查找规则"></a>1.2.2 原型链的查找规则</h4><ul>
<li><p>从当前实例属性去查找，如果找到就返回，否者顺着原型链一层一层查找，直到找到null为止，若到null都没有找到，则报错。</p>
</li>
<li><p>如果要查找对象的属性或方法，首先去对象中查找，如果没有找到，则去对象的原型中继续查找，如果还没有找到，则去当前对象的原型的原型中查找，以此类推，如果最终还是找不到，则返回undefined。</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例</span></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person1.<span class="property">age</span> = <span class="number">28</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1);</span><br><span class="line">person1.<span class="title function_">getAge</span>();</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj =<span class="keyword">new</span> <span class="title class_">Fun</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">__proto__</span>); </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    constructor: ƒ  </span></span><br><span class="line"><span class="comment">    [[Prototype]]: Object </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">__proto__</span>.<span class="property">__proto__</span>); </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    constructor: ƒ,</span></span><br><span class="line"><span class="comment">    __defineGetter__: ƒ, </span></span><br><span class="line"><span class="comment">    __defineSetter__: ƒ, </span></span><br><span class="line"><span class="comment">    hasOwnProperty: ƒ, </span></span><br><span class="line"><span class="comment">    __lookupGetter__: ƒ, </span></span><br><span class="line"><span class="comment">    …</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><img src="egPrototype.png" alt="原型链查找规则"></p>
<h3 id="1-3-原型、原型链和继承"><a href="#1-3-原型、原型链和继承" class="headerlink" title="1.3 原型、原型链和继承"></a>1.3 原型、原型链和继承</h3><h4 id="1-3-1-原型的属性和方法可以被继承"><a href="#1-3-1-原型的属性和方法可以被继承" class="headerlink" title="1.3.1 原型的属性和方法可以被继承"></a>1.3.1 原型的属性和方法可以被继承</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getAge</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例</span></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">name</span>);</span><br><span class="line">person1.<span class="title function_">getAge</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li><p>使用原型链实现继承 : 共享属性和方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;zhangsan &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现原型链的继承</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>); </span><br></pre></td></tr></table></figure></li>
<li><p>面试题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 这个getName方法只有在Foo()执行后 才会存在，它执行后会覆盖4</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>); &#125; <span class="comment">// 全局getName方法 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>); &#125;</span><br><span class="line"><span class="comment">// 4的优先级比5高</span></span><br><span class="line"><span class="keyword">var</span> getName = <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>); &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Foo();// 返回的是this , 全局！</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Foo</span>.<span class="title function_">getName</span>(); <span class="comment">// 2 </span></span><br><span class="line"><span class="title function_">getName</span>(); <span class="comment">// 4  函数和变量的优先级， 变量优先级高！</span></span><br><span class="line"><span class="title class_">Foo</span>().<span class="title function_">getName</span>();<span class="comment">// 1  window.getName() 输出1 </span></span><br><span class="line"><span class="title function_">getName</span>(); <span class="comment">// 1   window.getName()</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Foo</span>().<span class="title function_">getName</span>();<span class="comment">// 3 原型中的getName()方法</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="1-3-2-查找自身的私有属性"><a href="#1-3-2-查找自身的私有属性" class="headerlink" title="1.3.2 查找自身的私有属性"></a>1.3.2 查找自身的私有属性</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person1.<span class="property">age</span> = <span class="number">28</span></span><br><span class="line">person1.<span class="property">demo</span> = <span class="string">&quot;demo&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用hasOwnProperty方法查找自身属性</span></span><br><span class="line"><span class="keyword">let</span> item;</span><br><span class="line"><span class="keyword">for</span>(item <span class="keyword">in</span> person1)&#123;</span><br><span class="line">    <span class="keyword">if</span>(person1.<span class="title function_">hasOwnProperty</span>(item))&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="itemProto.png" width="50%" height="60%"> 

<h4 id="1-3-3-借用构造函数实现继承"><a href="#1-3-3-借用构造函数实现继承" class="headerlink" title="1.3.3 借用构造函数实现继承"></a>1.3.3 借用构造函数实现继承</h4><ul>
<li>使用<code>原型</code>实现继承：改变一个对象的属性值，其他对象的属性值也<code>对应改变</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"> </span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;cName&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">array</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">14</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();<span class="comment">// 使用原型实现继承</span></span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">obj2.<span class="property">array</span>[<span class="number">2</span>] = <span class="string">&#x27;zhangsan&#x27;</span>;<span class="comment">// 改一个 另一个也对应改变</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">array</span> , obj2.<span class="property">array</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    (5) [1, 2, &#x27;zhangsan&#x27;, 4, 5] </span></span><br><span class="line"><span class="comment">    (5) [1, 2, &#x27;zhangsan&#x27;, 4, 5]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li>借用<code>构造函数</code>实现继承： 改变一个对象的属性值，<code>不影响</code>其他对象的属性。每次生成一个对象，对象本身的属性和方法不共享。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"> </span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;cName&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">array</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);<span class="comment">// this指向new它的对象</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">14</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">obj2.<span class="property">array</span>[<span class="number">2</span>] = <span class="string">&#x27;zhangsan&#x27;</span>;<span class="comment">// 改一个 另一个不变</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">array</span> , obj2.<span class="property">array</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    (5) [1, 2, 3, 4, 5] </span></span><br><span class="line"><span class="comment">    (5) [1, 2, &#x27;zhangsan&#x27;, 4, 5]</span></span><br><span class="line"><span class="comment">*/</span> </span><br></pre></td></tr></table></figure>

<h4 id="1-3-4-组合继承-（原型-借用构造函数-）"><a href="#1-3-4-组合继承-（原型-借用构造函数-）" class="headerlink" title="1.3.4 组合继承 （原型 + 借用构造函数 ）"></a>1.3.4 组合继承 （原型 + 借用构造函数 ）</h4><ul>
<li><p>原型</p>
<ul>
<li>优点： 共享属性和方法；</li>
<li>缺点： 无法给父构造函数传递参数。</li>
</ul>
</li>
<li><p>借用构造函数</p>
<ul>
<li>优点： 可以向父构造函数传递参数；</li>
<li>缺点： 不可以共享有些方法。</li>
</ul>
</li>
<li><p>组合继承：既可以传递参数，又可以实现该有的共享性。</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"> cName</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = cName;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">array</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">run</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">cName</span>)&#123; </span><br><span class="line">    <span class="comment">// 借用构造函数</span></span><br><span class="line">    <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,cName);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">14</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用原型</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&#x27;lisi&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&#x27;wangwu&#x27;</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">name</span> , obj2.<span class="property">name</span>); <span class="comment">//lisi wangwu</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">run</span> === obj2.<span class="property">run</span> );  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://www.cnblogs.com/Joe-and-Joan/p/10692844.html">原型与原型链</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS-知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>JS-闭包</title>
    <url>/2022/04/28/JS-%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<h1 id="闭包与递归"><a href="#闭包与递归" class="headerlink" title="闭包与递归"></a>闭包与递归</h1><h2 id="1-闭包"><a href="#1-闭包" class="headerlink" title="1 闭包"></a>1 闭包</h2><blockquote>
<p>闭包： 可以在一个内层函数中访问到其外层函数的作用域。</p>
</blockquote>
<ul>
<li><p>闭包是<code>一个函数</code>加上到<code>创建函数</code>的<code>作用域的连接</code>，闭包“关闭”了函数的自由变量。</p>
</li>
<li><p>简单来讲：闭包就是指有权访问另一个函数作用域中的变量的函数。（b带着a的ao出去了。）</p>
<ul>
<li>1 : 有两个函数，作用域有连接关系；</li>
<li>2 ：变量不自由==》 会停留在内存中，不会销毁。 </li>
</ul>
</li>
<li><p>理解：外部函数调用之后其变量对象本应该销毁，但是闭包的存在是我们仍然可以访问外部函数的变量对象。</p>
</li>
<li><p>闭包的特性：</p>
<ul>
<li>函数嵌套函数；</li>
<li>函数内部引用了函数外部的参数和变量；</li>
<li>参数和变量不会被垃圾回收机制收回。</li>
</ul>
</li>
<li><p>闭包的优点：</p>
<ul>
<li>保护函数内的变量安全，实现封装，防止变量流入其他环境发生命名冲突；</li>
<li>在内存中维持一个变量，可以做缓存；</li>
<li>匿名自执行函数可以减少内存消耗。</li>
</ul>
</li>
<li><h2 id="闭包的作用-使用"><a href="#闭包的作用-使用" class="headerlink" title="闭包的作用/使用"></a>闭包的作用/使用</h2></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> name =<span class="string">&quot;asd&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="title function_">a</span>();</span><br></pre></td></tr></table></figure>
<ul>
<li>JS的防抖和节流使用了闭包。</li>
</ul>
<h2 id="2-递归"><a href="#2-递归" class="headerlink" title="2 递归"></a>2 递归</h2><blockquote>
<p>递归函数： 自己调用自己。</p>
</blockquote>
<ul>
<li><p>注意</p>
<ul>
<li>必须有结束条件，如果没有结束条件就会变成死循环。</li>
</ul>
</li>
<li><p>作用</p>
<ul>
<li>累加，阶乘；</li>
<li>数组扁平化：把多维数组变成一维数组；</li>
<li>dom树的递归；</li>
<li>斐波那契数列。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 累加器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n + <span class="title function_">add</span>(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="title function_">add</span>(<span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阶乘</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n * <span class="title function_">add</span>(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="title function_">factorial</span>(<span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组扁平化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> i=<span class="number">0</span> ; i&lt; arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> arr[i]==<span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line">            result = result.<span class="title function_">concat</span>( <span class="title function_">fun</span>(arr[i]));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr1 = <span class="title function_">fun</span>([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,[<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,[<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;p&#x27;</span>]]]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dom树的递归</span></span><br><span class="line"><span class="keyword">var</span> arrDom = [];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">dom</span>) &#123;</span><br><span class="line">    <span class="comment">// node保存父元素</span></span><br><span class="line">    <span class="keyword">let</span> node = dom.<span class="property">parentNode</span>;</span><br><span class="line">    <span class="comment">// 判断条件： 如果父节点存在</span></span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">        arrDom.<span class="title function_">push</span>(node);</span><br><span class="line">        <span class="title function_">fun</span>(node);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;aaa&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrDom);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS-知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>JS-防抖和节流</title>
    <url>/2022/04/28/JS-%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
    <content><![CDATA[<h2 id="JS的防抖和节流"><a href="#JS的防抖和节流" class="headerlink" title="JS的防抖和节流"></a>JS的防抖和节流</h2><h3 id="1-防抖函数-debounce"><a href="#1-防抖函数-debounce" class="headerlink" title="1 防抖函数 - debounce"></a>1 防抖函数 - debounce</h3><blockquote>
<p>防抖： 在一段时间内允许多次触发函数，但是只在最后一次有效执行。</p>
</blockquote>
<ul>
<li>理解<ul>
<li>当持续触发事件，在一定时间内没有再触发事件，事件处理函数才会执行一次。如果在设定的事件到来之前又一次触发了事件，就重新开始延时。</li>
<li>（栗子）：王者荣耀回城，如果多次点击回城按钮，则最后一次才有效。</li>
<li>（栗子）王者荣耀回城是防抖，放技能后进入冷却就是节流。</li>
</ul>
</li>
<li>实际应用<ul>
<li>使用echarts时，改变浏览器宽度的时候，希望重新渲染。echarts的图像，可以使用此函数，提升性能。</li>
<li>解决输入搜索时的bug：输入结束后n秒才进行搜索请求，n秒内又输入内容，则重新计时。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 要求 : 打印结果只出现一次,在键盘抬起后一秒产生 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 获取输入框</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 防抖函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">delay, callback</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> timer;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// timer变量需要一直保存在内存中</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 使用闭包（函数里面return出函数）</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">clearTimeout</span>(timer);</span></span><br><span class="line"><span class="language-javascript">            timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">callback</span>(value)</span></span><br><span class="line"><span class="language-javascript">            &#125;, delay)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 在外部输出value值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 将防抖函数的return值（函数）赋值给debounceFunc</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> debounceFunc = <span class="title function_">debounce</span>(<span class="number">1000</span>, fn);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 4. 函数触发</span></span></span><br><span class="line"><span class="language-javascript">    input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">debounceFunc</span>(e.<span class="property">target</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-节流函数-throttling"><a href="#2-节流函数-throttling" class="headerlink" title="2 节流函数 - throttling"></a>2 节流函数 - throttling</h3><blockquote>
<p>节流： 在一段事件内，只做一件事情。</p>
</blockquote>
<ul>
<li><p>理解</p>
<ul>
<li>当持续触发事件的时候，保证一段时间内只调用一次事件处理函数。</li>
</ul>
</li>
<li><p>应用</p>
<ul>
<li>表单的提交：鼠标不断点击触发，规定在n秒内多次点击只有一次生效。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;button&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 节流函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">thro</span>(<span class="params">func, wait</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> timerOut;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 使用闭包</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 根据timerOut的值 判断程序是否进行</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (!timerOut) &#123;</span></span><br><span class="line"><span class="language-javascript">                timerOut = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">func</span>();</span></span><br><span class="line"><span class="language-javascript">                    timerOut = <span class="literal">null</span>;<span class="comment">// 程序运行之后timerOut设置为空</span></span></span><br><span class="line"><span class="language-javascript">                &#125;, wait)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>());</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;button&#x27;</span>).<span class="property">onclick</span> = <span class="title function_">thro</span>(handle,<span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul>
<li>防抖和节流都是用来防止高频率的JS代码的执行。</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS-知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>JS-面试代码阅读题1</title>
    <url>/2022/04/12/JS-%E9%9D%A2%E8%AF%95%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB%E9%A2%981/</url>
    <content><![CDATA[<h2 id="1-预编译"><a href="#1-预编译" class="headerlink" title="1 预编译"></a>1 预编译</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, c</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">            <span class="comment">/* </span></span><br><span class="line"><span class="comment">                ƒ a()&#123;</span></span><br><span class="line"><span class="comment">                    if(false)&#123;</span></span><br><span class="line"><span class="comment">                        var d =678</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 123</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// f c()&#123;&#125;</span></span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> d = <span class="number">678</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// console.log(d); // d is not defined 报错</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// undefinded</span></span><br><span class="line">            <span class="keyword">var</span> b = <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// f()&#123; &#125;</span></span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">//f c()&#123;&#125;          </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, c</span>) &#123;</span><br><span class="line">            <span class="comment">// 函数和变量声明提升</span></span><br><span class="line">            <span class="keyword">var</span> a;</span><br><span class="line">            <span class="keyword">var</span> b;</span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> d = <span class="number">678</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// f a()&#123;&#125;</span></span><br><span class="line">            a = <span class="number">123</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 123</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// f c()&#123;&#125;  </span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(d); <span class="comment">// undefinded </span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// undefinded</span></span><br><span class="line">            b = <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// f ()&#123;&#125;</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// f c()&#123;&#125;      </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="res1.png" alt="结果"></p>
<blockquote>
<p>预编译</p>
</blockquote>
<ul>
<li>预编译发生在代码执行的前一刻。</li>
<li>预编译的作用<ul>
<li>函数声明整体提升；</li>
<li>变量声明提升；</li>
</ul>
</li>
<li>预编译步骤<ul>
<li>创建AO对象(Activation object)</li>
<li>找形参和变量声明，将变量声明的名作为AO属性的名，值为undefined；</li>
<li>将实参和形参相统一；</li>
<li>在函数体中找到函数声明，值赋予函数体。（注意函数声明要区别于函数表达式）(函数声明会覆盖变量声明)</li>
</ul>
</li>
</ul>
<h2 id="2-this"><a href="#2-this" class="headerlink" title="2 this"></a>2 this</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = a.<span class="property">say</span>;</span><br><span class="line"><span class="comment">// var fun = function () &#123;</span></span><br><span class="line"><span class="comment">//     console.log(this.name);</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="title function_">fun</span>()   <span class="comment">// 函数直接调用 fun.call(window)  222</span></span><br><span class="line">a.<span class="title function_">say</span>() <span class="comment">// a.say.call(a)  111</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="number">333</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span> (<span class="params">fun</span>) &#123;</span><br><span class="line">        <span class="title function_">fun</span>() <span class="comment">// fun.call(window,a.say)  则this指向a  222</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">b.<span class="title function_">say</span>(a.<span class="property">say</span>); <span class="comment">// 函数方法被调用</span></span><br><span class="line">b.<span class="property">say</span> = a.<span class="property">say</span>;</span><br><span class="line"><span class="comment">// b.say = function () &#123;</span></span><br><span class="line"><span class="comment">//     console.log(this.name);</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line">b.<span class="title function_">say</span>();   <span class="comment">// b.say.call(b) 333</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>this练习</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// this确定练习</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj2&#x27;</span>,</span><br><span class="line">    <span class="attr">study</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// obj2</span></span><br><span class="line">        <span class="keyword">let</span> obj3 = &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;obj3&#x27;</span>,</span><br><span class="line">            <span class="attr">code</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// obj3</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        obj3.<span class="title function_">code</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj2.<span class="title function_">study</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj4 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj4&#x27;</span>,</span><br><span class="line">    <span class="attr">study</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// obj4</span></span><br><span class="line">        <span class="keyword">let</span> obj5 = &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;obj5&#x27;</span>,</span><br><span class="line">            <span class="attr">code</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// obj4</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        obj5.<span class="title function_">code</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj4.<span class="title function_">study</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj6 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj6&#x27;</span>,</span><br><span class="line">    <span class="attr">study</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// obj6</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> obj7 = &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;obj7&#x27;</span>,</span><br><span class="line">                <span class="attr">code</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//window</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            obj7.<span class="title function_">code</span>();</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj6.<span class="title function_">study</span>();</span><br></pre></td></tr></table></figure>


<h2 id="3-防抖和节流函数实现"><a href="#3-防抖和节流函数实现" class="headerlink" title="3 防抖和节流函数实现"></a>3 防抖和节流函数实现</h2><blockquote>
<p>防抖</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 要求 : 打印结果只出现一次,在键盘抬起后一秒产生 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 获取输入框</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 防抖函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">delay, callback</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> timer;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// timer变量需要一直保存在内存中</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 使用闭包（函数里面return出函数）</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">clearTimeout</span>(timer);</span></span><br><span class="line"><span class="language-javascript">            timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">callback</span>(value)</span></span><br><span class="line"><span class="language-javascript">            &#125;, delay)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 在外部输出value值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 将防抖函数的return值（函数）赋值给debounceFunc</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> debounceFunc = <span class="title function_">debounce</span>(<span class="number">1000</span>, fn);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 4. 函数触发</span></span></span><br><span class="line"><span class="language-javascript">    input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">debounceFunc</span>(e.<span class="property">target</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>节流</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;button&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 节流函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">thro</span>(<span class="params">func, wait</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> timerOut;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 使用闭包</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 根据timerOut的值 判断程序是否进行</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (!timerOut) &#123;</span></span><br><span class="line"><span class="language-javascript">                timerOut = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">func</span>();</span></span><br><span class="line"><span class="language-javascript">                    timerOut = <span class="literal">null</span>;<span class="comment">// 程序运行之后timerOut设置为空</span></span></span><br><span class="line"><span class="language-javascript">                &#125;, wait)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>());</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;button&#x27;</span>).<span class="property">onclick</span> = <span class="title function_">thro</span>(handle,<span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>




<h2 id="4-斐波那契数列-递归实现"><a href="#4-斐波那契数列-递归实现" class="headerlink" title="4 斐波那契数列-递归实现"></a>4 斐波那契数列-递归实现</h2><ul>
<li><p>常见描述：</p>
<ul>
<li>走楼梯：有一段楼梯有10级台阶，规定每一步只能跨一级或两级，要登上第 10 级台阶有几种不同的走法?</li>
<li>兔子繁殖问题：一般而言，兔子在出生两个月后就有繁殖能力，一对兔子每个月能生出一对小兔子来。如果所有兔子都不死，那么一年（12个月）以后可以繁殖多少对兔子？</li>
</ul>
</li>
<li><p>实现： 递归</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fun</span>(n - <span class="number">1</span>) + <span class="title function_">fun</span>(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fun(12)是前11个月的总体对数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title function_">fun</span>( <span class="number">12</span> ) );</span><br></pre></td></tr></table></figure>

<h2 id="5-原型和原型链的面试题"><a href="#5-原型和原型链的面试题" class="headerlink" title="5 原型和原型链的面试题"></a>5 原型和原型链的面试题</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 这个getName方法只有在Foo()执行后 才会存在，它执行后会覆盖4</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>); &#125; <span class="comment">// 全局getName方法 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>); &#125;</span><br><span class="line"><span class="comment">// 4的优先级比5高</span></span><br><span class="line"><span class="keyword">var</span> getName = <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>); &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Foo();// 返回的是this , 全局！</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Foo</span>.<span class="title function_">getName</span>(); <span class="comment">// 2 </span></span><br><span class="line"><span class="title function_">getName</span>(); <span class="comment">// 4  函数和变量的优先级， 变量优先级高！</span></span><br><span class="line"><span class="title class_">Foo</span>().<span class="title function_">getName</span>();<span class="comment">// 1  window.getName() 输出1 </span></span><br><span class="line"><span class="title function_">getName</span>(); <span class="comment">// 1   window.getName()</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Foo</span>().<span class="title function_">getName</span>();<span class="comment">// 3 原型中的getName()方法</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>代码</tag>
      </tags>
  </entry>
  <entry>
    <title>JS-面试总结1(ES6)</title>
    <url>/2022/04/12/JS-%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%931/</url>
    <content><![CDATA[<h2 id="1-原型与原型链"><a href="#1-原型与原型链" class="headerlink" title="1 原型与原型链"></a>1 原型与原型链</h2><h3 id="1-1-原型-prototype"><a href="#1-1-原型-prototype" class="headerlink" title="1.1 原型 prototype"></a>1.1 原型 prototype</h3><blockquote>
<p>原型：prototype </p>
</blockquote>
<ul>
<li>所有的<code>引用类型</code>都有一个<code>__proto__</code>(隐式原型)属性， 属性值是一个<code>普通的对象</code>；</li>
<li>所有的<code>函数</code>都有一个<code>prototype属性</code>， 属性值是一个普通的<code>对象</code>；</li>
<li>所有<code>引用类型的__proto__属性</code>都<code>指向</code>它<code>构造函数的prototype</code>。</li>
</ul>
<img src="proto.png" width="50%" height="60%">

<p>注意：</p>
<ul>
<li><strong>常规的对象和数组没有原型，原型是函数特有的。</strong></li>
</ul>
<blockquote>
<p>constructor</p>
</blockquote>
<ul>
<li>每个原型对象都有一个 constructor 属性，指向相关联的构造函数，所以构造函数和构造函数的 prototype 是可以相互指向的。<img src="constructor.png" width="50%" height="60%"> </li>
</ul>
<h3 id="1-2-原型链-proto"><a href="#1-2-原型链-proto" class="headerlink" title="1.2 原型链 proto"></a>1.2 原型链 <em>proto</em></h3><blockquote>
<p>当访问一个对象的某个属性时，首先会在这个对象本身的属性上查找，如果没有找到，则会去它的<code>__proto__</code>(隐式原型)上查找，如果还没有找到就会在它的构造函数的<code>prototype</code>的<code>__proto__</code>中查找，这样一层一层向上查找就会形成一个链式结构，称为<code>原型链</code>。<br>谷歌浏览器改版后展示方式：<code>[[prototype]]</code>。<br>所有对象都有原型链。<br><img src="prototype.png" width="50%" height="60%"> </p>
</blockquote>
<h3 id="1-3-原型、原型链和继承"><a href="#1-3-原型、原型链和继承" class="headerlink" title="1.3 原型、原型链和继承"></a>1.3 原型、原型链和继承</h3><blockquote>
<p>原型的属性和方法可以被继承</p>
</blockquote>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getAge</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例</span></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">name</span>);</span><br><span class="line">person1.<span class="title function_">getAge</span>();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原型链的查找规则</p>
</blockquote>
<ul>
<li>从当前实例属性去查找，如果找到就返回，否者顺着原型链一层一层查找，直到找到null为止，若到null都没有找到，则报错。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例</span></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person1.<span class="property">age</span> = <span class="number">28</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1);</span><br><span class="line">person1.<span class="title function_">getAge</span>();</span><br></pre></td></tr></table></figure>
<p><img src="egPrototype.png" alt="原型链查找规则"></p>
<blockquote>
<p>查找自身的私有属性</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person1.<span class="property">age</span> = <span class="number">28</span></span><br><span class="line">person1.<span class="property">demo</span> = <span class="string">&quot;demo&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用hasOwnProperty方法查找自身属性</span></span><br><span class="line"><span class="keyword">let</span> item;</span><br><span class="line"><span class="keyword">for</span>(item <span class="keyword">in</span> person1)&#123;</span><br><span class="line">    <span class="keyword">if</span>(person1.<span class="title function_">hasOwnProperty</span>(item))&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="itemProto.png" width="50%" height="60%"> 

<p><a href="https://www.cnblogs.com/Joe-and-Joan/p/10692844.html">原型与原型链</a></p>
<h2 id="2-JS中的this"><a href="#2-JS中的this" class="headerlink" title="2 JS中的this"></a>2 JS中的this</h2><blockquote>
<p>使用情况1 ： 在函数中直接使用</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">con</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(con);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数直接使用，get写法就等于get.call ，指向window</span></span><br><span class="line"><span class="title function_">get</span>(<span class="string">&#x27;hhh&#x27;</span>); </span><br><span class="line">get.<span class="title function_">call</span>(<span class="variable language_">window</span>, <span class="string">&#x27;hhh&#x27;</span>);</span><br></pre></td></tr></table></figure>


<blockquote>
<p>使用情况2 ： 函数作为对象的方法被调用（谁调用，指向谁）</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zhangsna&#x27;</span>,</span><br><span class="line">    <span class="attr">run</span>: <span class="keyword">function</span>(<span class="params">time</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>在跑步，最多跑<span class="subst">$&#123;time&#125;</span>min`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数方法被调用，谁调用就指向谁</span></span><br><span class="line">person.<span class="title function_">run</span>(<span class="number">30</span>);</span><br><span class="line">person.<span class="property">run</span>.<span class="title function_">call</span>(person, <span class="number">30</span>);</span><br></pre></td></tr></table></figure>

<p>eg：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = a.<span class="property">say</span>;</span><br><span class="line"><span class="comment">// var fun = function () &#123;</span></span><br><span class="line"><span class="comment">//     console.log(this.name);</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="title function_">fun</span>()   <span class="comment">// 函数直接调用 fun.call(window)  222</span></span><br><span class="line">a.<span class="title function_">say</span>() <span class="comment">// a.say.call(a)  111</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="number">333</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span> (<span class="params">fun</span>) &#123;</span><br><span class="line">        <span class="title function_">fun</span>() <span class="comment">// fun.call(window,a.say)  则this指向a  222</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">b.<span class="title function_">say</span>(a.<span class="property">say</span>); <span class="comment">// 函数方法被调用</span></span><br><span class="line">b.<span class="property">say</span> = a.<span class="property">say</span>;</span><br><span class="line"><span class="comment">// b.say = function () &#123;</span></span><br><span class="line"><span class="comment">//     console.log(this.name);</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line">b.<span class="title function_">say</span>();   <span class="comment">// b.say.call(b) 333</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>普通函数的this指向问题：</p>
</blockquote>
<ul>
<li>谁调用这个方法/谁触发事件，this就指向谁<ul>
<li>事件处理函数 this =&gt; 指向绑定事件的那个dom元素</li>
<li>定时器中 this =&gt; 指向window</li>
<li>自定义函数 this =&gt; 指向window</li>
<li>自定义对象 this =&gt; 指向对象</li>
<li>在类中的 this   =&gt; 指向new出来的实例化对象</li>
</ul>
</li>
</ul>
<blockquote>
<p>箭头函数的 this 指向：</p>
</blockquote>
<ul>
<li>解释一：this指向的是定义时所在的对象，而不是使用时所在的对象。</li>
<li>解释二：箭头函数没有this，它的父作用域中的this是谁，箭头函数的this就是谁，否则就是window。</li>
<li>因为箭头函数没有this，所以它不能用作构造函数。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// -----4----- 箭头函数</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">x</span>:<span class="number">22</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>); <span class="comment">// 11</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">say</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// -----5----- 箭头函数</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">birth</span>: <span class="number">1990</span>,</span><br><span class="line">    <span class="attr">getAge</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="variable language_">this</span>.<span class="property">birth</span>;<span class="comment">// 1990</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title function_">fn</span> = (<span class="params"></span>)=&gt; <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getFullYear</span>() - <span class="variable language_">this</span>.<span class="property">birth</span>;<span class="comment">//2022-1990</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">fn</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">getAge</span>(); <span class="comment">//32</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-var、let、const三者的特点"><a href="#3-var、let、const三者的特点" class="headerlink" title="3 var、let、const三者的特点"></a>3 var、let、const三者的特点</h2><h3 id="3-1-var"><a href="#3-1-var" class="headerlink" title="3.1 var"></a>3.1 var</h3><ul>
<li>声明提升（变量提升）</li>
<li>允许重复声明变量（变量覆盖）</li>
<li>函数作用域 （没有块级作用域）</li>
</ul>
<h3 id="3-2-let"><a href="#3-2-let" class="headerlink" title="3.2 let"></a>3.2 let</h3><ul>
<li>不允许重复声明；</li>
<li>不存在变量提升。暂时性死区：在一个作用域内，不允许同名变量进入；</li>
<li>块级作用域（es6中，一个{}就是一个块级作用域）</li>
</ul>
<h3 id="3-3-const"><a href="#3-3-const" class="headerlink" title="3.3 const"></a>3.3 const</h3><ul>
<li>const定义的变量不能修改，赋值后不允许再次更改；</li>
<li>不允许重复声明；</li>
<li>不存在变量提升；</li>
<li>const声明后必须赋值，否则报错；</li>
<li>支持块级作用域；</li>
<li>可以更改对象的属性的值（引用数据类型不能改地址）</li>
</ul>
<h2 id="4-Promise"><a href="#4-Promise" class="headerlink" title="4 Promise"></a>4 Promise</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1 2 4 3 </span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>Promise的构造函数是同步执行</li>
<li>.then()是异步执行的</li>
</ul>
<h2 id="5-JS作用域"><a href="#5-JS作用域" class="headerlink" title="5 JS作用域"></a>5 JS作用域</h2><h3 id="5-1-作用域常见类型"><a href="#5-1-作用域常见类型" class="headerlink" title="5.1 作用域常见类型"></a>5.1 作用域常见类型</h3><blockquote>
<p>全局作用域</p>
</blockquote>
<ul>
<li>全局作用域在一面打开时被创建，页面关闭时被销毁。</li>
<li>写在script标签中的变量和函数，作用域为全局，在页面的任意位置都可以访问到。</li>
<li>在全局作用域中有全局对象window，由浏览器创建，可以直接调用。</li>
<li>全局作用域中声明的变量和函数会作为window对象的属性和方法保存。<blockquote>
<p>函数作用域</p>
</blockquote>
</li>
<li>调用函数时被创建，执行完毕被销毁。</li>
<li>每调用一次函数就会创建一个新的函数作用域，他们之间相互独立。</li>
<li>函数作用域可以访问到全局作用域的变量，在函数外无法访问到函数作用域内的变量。</li>
<li>在函数作用域中访问变量、函数时，会现在自身作用域中寻找，若没找到，则会到上一级寻找， 一直到全局作用域。</li>
</ul>
<p>注意：JS可以模拟块级作用域。</p>
<h3 id="5-2-作用域的深层次理解"><a href="#5-2-作用域的深层次理解" class="headerlink" title="5.2 作用域的深层次理解"></a>5.2 作用域的深层次理解</h3><ul>
<li><p>执行期的上下文</p>
<ul>
<li>当函数代码执行的前期会创建一个执行期上下文的内部对象(<code>AO</code>)(局部作用域)；</li>
<li>这个内部对象是在预编译的时候创建出来的，因为当函数被调用的时候，会先进行预编译；</li>
<li>在全局代码执行的前期会创建一个执行期的上下文的对象<code>GO</code>(全局作用域)。</li>
</ul>
</li>
<li><p>作用域链</p>
<ul>
<li>作用域链会被保存到一个隐式的属性中[[scope]]。这个属性是用户无法访问的，但是JS引擎将会访问它，这里面存储的是作用域链。</li>
<li><code>AO</code>和<code>GO</code>的集合</li>
</ul>
</li>
</ul>
<h3 id="5-3-预编译"><a href="#5-3-预编译" class="headerlink" title="5.3 预编译"></a>5.3 预编译</h3><blockquote>
<p>函数作用域-预编译</p>
</blockquote>
<ul>
<li>预编译发生在代码执行的前一刻。</li>
<li>预编译的作用<ul>
<li>函数声明整体提升；</li>
<li>变量声明提升；</li>
</ul>
</li>
<li>预编译步骤<ul>
<li>创建AO对象(Activation object)</li>
<li>找形参和变量声明，将变量声明的名作为AO属性的名，值为undefined；</li>
<li>将实参和形参相统一；</li>
<li>在函数体中找到函数声明，值赋予函数体。（注意函数声明要区别于函数表达式）(函数声明会覆盖变量声明)</li>
</ul>
</li>
</ul>
<blockquote>
<p>全局作用域 - 预编译</p>
</blockquote>
<ul>
<li>创建GO对象；</li>
<li>找变量声明，将变量名作为GO对象的属性名，值是undefined；</li>
<li>找函数声明，值赋予函数体。</li>
</ul>
<h2 id="6-闭包"><a href="#6-闭包" class="headerlink" title="6 闭包"></a>6 闭包</h2><blockquote>
<p>闭包： 可以在一个内层函数中访问到其外层函数的作用域。</p>
</blockquote>
<ul>
<li>简单来讲：闭包就是指有权访问另一个函数作用域中的变量的函数。（b带着a的ao出去了。）</li>
<li>理解：外部函数调用之后其变量对象本应该销毁，但是闭包的存在是我们仍然可以访问外部函数的变量对象。</li>
<li>闭包的特性：<ul>
<li>函数嵌套函数；</li>
<li>函数内部引用了函数外部的参数和变量；</li>
<li>参数和变量不会被垃圾回收机制收回。</li>
</ul>
</li>
<li>闭包的优点：<ul>
<li>保护函数内的变量安全，实现封装，防止变量流入其他环境发生命名冲突；</li>
<li>在内存中维持一个变量，可以做缓存；</li>
<li>匿名自执行函数可以减少内存消耗。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> name =<span class="string">&quot;asd&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="title function_">a</span>();</span><br></pre></td></tr></table></figure>
<ul>
<li>JS的防抖和节流使用了闭包。</li>
</ul>
<h2 id="7-JS的防抖和节流"><a href="#7-JS的防抖和节流" class="headerlink" title="7 JS的防抖和节流"></a>7 JS的防抖和节流</h2><h3 id="7-1-防抖函数-debounce"><a href="#7-1-防抖函数-debounce" class="headerlink" title="7.1 防抖函数 - debounce"></a>7.1 防抖函数 - debounce</h3><blockquote>
<p>防抖： 在一段时间内允许多次触发函数，但是只在最后一次有效执行。</p>
</blockquote>
<ul>
<li>理解<ul>
<li>当持续触发事件，在一定时间内没有再触发事件，事件处理函数才会执行一次。如果在设定的事件到来之前又一次触发了事件，就重新开始延时。</li>
<li>（栗子）：王者荣耀回城，如果多次点击回城按钮，则最后一次才有效。</li>
<li>（栗子）王者荣耀回城是防抖，放技能后进入冷却就是节流。</li>
</ul>
</li>
<li>实际应用<ul>
<li>使用echarts时，改变浏览器宽度的时候，希望重新渲染。echarts的图像，可以使用此函数，提升性能。</li>
<li>解决输入搜索时的bug：输入结束后n秒才进行搜索请求，n秒内又输入内容，则重新计时。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 要求 : 打印结果只出现一次,在键盘抬起后一秒产生 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 获取输入框</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 防抖函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">delay, callback</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> timer;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// timer变量需要一直保存在内存中</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 使用闭包（函数里面return出函数）</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">clearTimeout</span>(timer);</span></span><br><span class="line"><span class="language-javascript">            timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">callback</span>(value)</span></span><br><span class="line"><span class="language-javascript">            &#125;, delay)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 在外部输出value值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 将防抖函数的return值（函数）赋值给debounceFunc</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> debounceFunc = <span class="title function_">debounce</span>(<span class="number">1000</span>, fn);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 4. 函数触发</span></span></span><br><span class="line"><span class="language-javascript">    input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">debounceFunc</span>(e.<span class="property">target</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-2-节流函数-throttling"><a href="#7-2-节流函数-throttling" class="headerlink" title="7.2 节流函数 - throttling"></a>7.2 节流函数 - throttling</h3><blockquote>
<p>节流： 在一段事件内，只做一件事情。</p>
</blockquote>
<ul>
<li><p>理解</p>
<ul>
<li>当持续触发事件的时候，保证一段时间内只调用一次事件处理函数。</li>
</ul>
</li>
<li><p>应用</p>
<ul>
<li>表单的提交：鼠标不断点击触发，规定在n秒内多次点击只有一次生效。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;button&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 节流函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">thro</span>(<span class="params">func, wait</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> timerOut;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 使用闭包</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 根据timerOut的值 判断程序是否进行</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (!timerOut) &#123;</span></span><br><span class="line"><span class="language-javascript">                timerOut = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">func</span>();</span></span><br><span class="line"><span class="language-javascript">                    timerOut = <span class="literal">null</span>;<span class="comment">// 程序运行之后timerOut设置为空</span></span></span><br><span class="line"><span class="language-javascript">                &#125;, wait)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>());</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;button&#x27;</span>).<span class="property">onclick</span> = <span class="title function_">thro</span>(handle,<span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul>
<li>防抖和节流都是用来防止高频率的JS代码的执行。</li>
</ul>
<h2 id="8-call、apply和bind"><a href="#8-call、apply和bind" class="headerlink" title="8 call、apply和bind"></a>8 call、apply和bind</h2><h3 id="8-1-基础"><a href="#8-1-基础" class="headerlink" title="8.1 基础"></a>8.1 基础</h3><ol>
<li><p>简介</p>
<ul>
<li><code>call</code>和<code>apply</code>都属于<code>Function.prototype</code>的一个方法，它是JS引擎内在实现的，因为属于<code>Function.prototype</code>，所以每个<code>function对象实例</code>都有<code>call</code>和<code>apply</code>属性。</li>
<li>目标函数调用call和apply后，会直接被执行。</li>
<li>目标函数调用bind后，不会立即执行，而是返回一个新的函数，调用新函数才会执行目标函数。</li>
</ul>
</li>
<li><p>作用 ：改变this的指向。 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    改变 this 的指向方式：</span></span><br><span class="line"><span class="comment">        1. call (this,arg1,arg2,arg3)</span></span><br><span class="line"><span class="comment">        2. apply (this,[arg1,arg2,arg3])</span></span><br><span class="line"><span class="comment">        3. bind (this,arg1,arg2,arg3) 手动调用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> oBtn1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn1&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fn5 = <span class="keyword">function</span> (<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, str);</span><br><span class="line">&#125;</span><br><span class="line">fn5.<span class="title function_">call</span>(oBtn1, <span class="string">&#x27;aa&#x27;</span>);</span><br><span class="line">fn5.<span class="title function_">apply</span>(oBtn1, [<span class="string">&#x27;aa&#x27;</span>]);</span><br><span class="line">fn5.<span class="title function_">bind</span>(oBtn1, <span class="string">&#x27;aa&#x27;</span>)();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">getName</span>.<span class="title function_">call</span>(obj2,  <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ));<span class="comment">// aaa</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">getName</span>.<span class="title function_">apply</span>(obj2, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]));<span class="comment">// aaa</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">getName</span>.<span class="title function_">bind</span>(obj2,<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> )());<span class="comment">// aaa</span></span><br></pre></td></tr></table></figure></li>
<li><p>区别 ：在于接收参数的方式不同</p>
<ul>
<li><code>call()</code> : 第一个参数是this值，其余参数都直接传递给函数。 传递给函数的<strong>参数必须逐个列举</strong>。</li>
<li><code>apply()</code> : 传递给函数的是<strong>参数数组</strong>。</li>
<li><code>bind()</code> ： 手动调用，返回的是函数。在使用时要加<code>()</code>。</li>
</ul>
</li>
<li><p>应用场景</p>
<ul>
<li>实现JS的继承，构造函数继承可以使用call实现；</li>
<li>判断JS的数据类型；<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用call判断js的数据类型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(&#123;&#125;)=== <span class="string">&#x27;[object Object]&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([])=== <span class="string">&#x27;[object Array]&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
<li>把伪数组转换为数组。</li>
</ul>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用call把伪数组转换成数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);<span class="comment">// Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>([...<span class="variable language_">arguments</span>]);<span class="comment">// es6  (3) [1, 2, 3]</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>));<span class="comment">//es5  (3) [1, 2, 3]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">get</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="8-2-call"><a href="#8-2-call" class="headerlink" title="8.2 call()"></a>8.2 call()</h3><ol>
<li><p>改变this指向</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// call实现改变this指向</span></span><br><span class="line">    <span class="keyword">var</span> person = &#123;</span><br><span class="line">        getName : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> person1 = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;ddd&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">getName</span>.<span class="title function_">call</span>(person1))</span><br></pre></td></tr></table></figure>

<ul>
<li>手写<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    手写call</span></span><br><span class="line"><span class="comment">    1. 写在哪？ Function.prototype后</span></span><br><span class="line"><span class="comment">    2. 对this进行判断，this必须是一个function，如果不是function则抛出异常</span></span><br><span class="line"><span class="comment">    3. 给上下文赋值，设置为接收到的参数或者是window</span></span><br><span class="line"><span class="comment">    4. 考虑参数，拿到除了第一个参数之外的参数</span></span><br><span class="line"><span class="comment">    5. 改变this的指向</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">mycall</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    context = context || <span class="variable language_">window</span>;<span class="comment">// 给context赋值</span></span><br><span class="line">    <span class="keyword">let</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>);<span class="comment">//获取除第一个参数之外的参数 </span></span><br><span class="line"></span><br><span class="line">    context.<span class="property">fn</span> = <span class="variable language_">this</span>;<span class="comment">// 改变this的指向</span></span><br><span class="line">    <span class="keyword">let</span> result = context.<span class="title function_">fn</span>(...args);<span class="comment">// 解构参数 </span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">getName</span>.<span class="title function_">mycall</span>(person1))</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="8-3-apply"><a href="#8-3-apply" class="headerlink" title="8.3 apply()"></a>8.3 apply()</h3><ul>
<li>手写apply()<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    手写apply</span></span><br><span class="line"><span class="comment">    与call的区别：将传入的第二个参数(数组)进行解构</span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    context = context || <span class="variable language_">window</span>;<span class="comment">// 给context赋值</span></span><br><span class="line">    context.<span class="property">fn</span> = <span class="variable language_">this</span>; <span class="comment">// 改变this的指向</span></span><br><span class="line">    <span class="keyword">let</span> result;</span><br><span class="line">    <span class="comment">// 判断是否有传入多的参数</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">arguments</span>[<span class="number">1</span>])&#123;</span><br><span class="line">        result = context.<span class="title function_">fn</span>(...<span class="variable language_">arguments</span>[<span class="number">1</span>]);<span class="comment">// 解构</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        result = context.<span class="title function_">fn</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> context.<span class="property">fn</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">getName</span>.<span class="title function_">myApply</span>(obj2,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]));<span class="comment">// 手写</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">getName</span>.<span class="title function_">apply</span>(obj2,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])); <span class="comment">// 调用</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="8-4-bind"><a href="#8-4-bind" class="headerlink" title="8.4 bind()"></a>8.4 bind()</h3><ul>
<li>手写bind()<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind1</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// arguments 可以获取一个函数的所有参数，arguments 是一个伪数组</span></span><br><span class="line">    <span class="comment">// 使用 Array.from() 方法将 arguments 伪数组转化成数组</span></span><br><span class="line">    <span class="keyword">const</span> args = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">    <span class="comment">// 获取 this 指向取出数组第一项，数组剩余的就是传递的参数</span></span><br><span class="line">    <span class="keyword">const</span> _this = args.<span class="title function_">shift</span>()</span><br><span class="line">    <span class="keyword">const</span> context = <span class="variable language_">this</span> <span class="comment">// 当前函数 fn1.bind(...) 中的 fn1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> context.<span class="title function_">apply</span>(_this, args)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this&#x27;</span>, <span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    fn1.<span class="title function_">bind1</span>(&#123; <span class="attr">x</span>: <span class="number">100</span> &#125;, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn2</span>();</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-router</title>
    <url>/2022/04/13/Vue-router/</url>
    <content><![CDATA[<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><h3 id="1-1-vue-router的理解"><a href="#1-1-vue-router的理解" class="headerlink" title="1.1 vue-router的理解"></a>1.1 vue-router的理解</h3><blockquote>
<p>vue-router是vue的一个插件库，专门用于实现SPA(单页面)应用。</p>
</blockquote>
<h3 id="1-2-对SPA应用的理解"><a href="#1-2-对SPA应用的理解" class="headerlink" title="1.2 对SPA应用的理解"></a>1.2 对SPA应用的理解</h3><ol>
<li>SPA：单页面Web应用；</li>
<li>整个应用只有<strong>一个完整的页面</strong>；</li>
<li>点击页面中的导航链接不会刷新页面，只会做页面的<strong>局部更新</strong>；</li>
<li>数据需要通过<strong>ajax请求</strong>获取。</li>
</ol>
<ul>
<li>作用<ul>
<li>跳转不同组件</li>
<li>路径传值</li>
<li>拦截</li>
</ul>
</li>
</ul>
<h3 id="1-3-路由的理解"><a href="#1-3-路由的理解" class="headerlink" title="1.3 路由的理解"></a>1.3 路由的理解</h3><blockquote>
<p>什么是路由?</p>
</blockquote>
<ul>
<li>一个路由就是一组映射关系（key-value）</li>
<li>key为路径，value为 function/component<blockquote>
<p>路由分类</p>
</blockquote>
</li>
<li>前端路由<ul>
<li>理解：value是component ， 用于页面内容的展示；</li>
<li>工作过程： 当浏览器的路径改变时，对应的组件就会显示。</li>
</ul>
</li>
<li>后端路由<ul>
<li>理解：value是function ， 用于处理客户端提交的请求；</li>
<li>工作过程： 当服务器接收到一个请求时，根据<strong>请求路径</strong>找到匹配的<strong>函数</strong>来处理请求，返回响应、数据。</li>
</ul>
</li>
</ul>
<h2 id="2-路由基础"><a href="#2-路由基础" class="headerlink" title="2 路由基础"></a>2 路由基础</h2><h3 id="2-1-路由的使用步骤"><a href="#2-1-路由的使用步骤" class="headerlink" title="2.1 路由的使用步骤"></a>2.1 路由的使用步骤</h3><ul>
<li>安装vue-router</li>
<li>应用插件 <code>Vue.use(VueRouter)</code> (index.js)</li>
<li>编写router配置项 （index.js文件）</li>
<li>实现切换 <code>&lt;router-link to=&quot;/path&quot;&gt;xxx&lt;/router-link&gt;</code>   (APP.vue)</li>
<li>指定展示位置 <code>&lt;router-view name=&quot;path&quot;&gt;&lt;/router-view&gt;</code> (APP.vue)</li>
<li>在<code>main.js</code>中要引入router</li>
</ul>
<h3 id="2-2-router-link相关配置"><a href="#2-2-router-link相关配置" class="headerlink" title="2.2 router-link相关配置"></a>2.2 router-link相关配置</h3><ul>
<li><p><code>to</code> ： 表示目标路由的链接；</p>
</li>
<li><p><code>tag</code> ： 默认生成a标签，如果希望修改，则<code>tag=&#39;div&#39;</code>；</p>
</li>
<li><p>组件形式的跳转方式</p>
<ul>
<li>replace</li>
<li>append</li>
</ul>
</li>
<li><p>exact： 精准路由匹配模式</p>
</li>
</ul>
<h3 id="2-3-编程式导航"><a href="#2-3-编程式导航" class="headerlink" title="2.3 编程式导航"></a>2.3 编程式导航</h3><ul>
<li>页面导航的两种方式<ul>
<li>声明式导航： 通过点击链接实现导航方式。<ul>
<li>eg: <code>&lt;router-link to=&quot;/path&quot;&gt;xxx&lt;/router-link&gt;</code> </li>
</ul>
</li>
<li>编程式导航： 通过调用JS形式的API实现导航的方式。<ul>
<li>eg: 普通网页中的<code>location.href</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;con&quot;&gt;</span><br><span class="line">    &lt;h1&gt;编程式导航&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button @click=&quot;goF&quot;&gt;前进&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;goBack&quot;&gt;后退&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;go&quot;&gt;后退两个页面&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;pushO&quot;&gt;回到首页&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;goH&quot;&gt;回到用户首页&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">      // 前进</span><br><span class="line">      goF() &#123;</span><br><span class="line">        this.$router.forward();</span><br><span class="line">      &#125;,</span><br><span class="line">      //  后退一次</span><br><span class="line">      goBack() &#123;</span><br><span class="line">        this.$router.back();</span><br><span class="line">      &#125;,</span><br><span class="line">      // 后退到定义的步数的页面</span><br><span class="line">      go() &#123;</span><br><span class="line">        this.$router.go(-2);</span><br><span class="line">      &#125;,</span><br><span class="line">      // 转向新加（自己定义）的页面</span><br><span class="line">      pushO() &#123;</span><br><span class="line">        this.$router.push(&quot;/&quot;);</span><br><span class="line">      &#125;,</span><br><span class="line">      goH() &#123; </span><br><span class="line">        this.$router.push(&#123;</span><br><span class="line">          name: &quot;User&quot;,</span><br><span class="line">          params: &#123;</span><br><span class="line">            name: &quot;lis&quot;,</span><br><span class="line">            age: 124,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">  .con button &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    background: #f2f2f2;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    height: 40px;</span><br><span class="line">    margin: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-重定向"><a href="#2-4-重定向" class="headerlink" title="2.4 重定向"></a>2.4 重定向</h3><ul>
<li>页面重定向</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/test&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Test&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">Test</span>,</span><br><span class="line">  <span class="attr">redirect</span>:<span class="string">&#x27;/details&#x27;</span> </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="2-5-嵌套路由-子路由"><a href="#2-5-嵌套路由-子路由" class="headerlink" title="2.5 嵌套路由 (子路由)"></a>2.5 嵌套路由 (子路由)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 当 /user/:id/profile 匹配成功</span></span><br><span class="line">        <span class="comment">// UserProfile 将被渲染到 User 的 &lt;router-view&gt; 内部</span></span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;profile&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">UserProfile</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 当 /user/:id/posts 匹配成功</span></span><br><span class="line">        <span class="comment">// UserPosts 将被渲染到 User 的 &lt;router-view&gt; 内部</span></span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;posts&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">UserPosts</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<h2 id="3-路由传参"><a href="#3-路由传参" class="headerlink" title="3 路由传参"></a>3 路由传参</h2><ul>
<li>路由传参有三种方式<ul>
<li><code>path + query</code> : 刷新页面的使用参数【不会】丢失，地址栏【能】看到参数；</li>
<li><code>name + params</code>: 刷新页面时候是参数【会】丢失，地址栏【不能】看到参数；</li>
<li><code>url  + params</code>: 刷新页面的使用参数【不会】丢失，地址栏【能】看到参数；</li>
</ul>
</li>
</ul>
<h2 id="4-路由"><a href="#4-路由" class="headerlink" title="4 路由"></a>4 路由</h2><h3 id="4-1-导航守卫"><a href="#4-1-导航守卫" class="headerlink" title="4.1 导航守卫"></a>4.1 导航守卫</h3><blockquote>
<p>导航守卫：主要是用来通过跳转或取消的方式守卫导航。</p>
</blockquote>
<ul>
<li>全局导航守卫<ul>
<li>router.beforeEach()</li>
<li>router.afterEach()</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">beforeResolve</span>(<span class="keyword">async</span> to =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">requiresCamera</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">askForCameraPermission</span>()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="title class_">NotAllowedError</span>) &#123;</span><br><span class="line">        <span class="comment">// ... 处理错误，然后取消导航</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 意料之外的错误，取消导航并把错误传给全局处理器</span></span><br><span class="line">        <span class="keyword">throw</span> error</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>组件内导航守卫<ul>
<li>beforeRouteEnter()</li>
<li>beforeRouteUpdate()</li>
<li>beforeRouteLeave()</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">      <span class="title function_">goF</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 导航守卫</span></span><br><span class="line">    beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">      <span class="comment">// 在这个钩子中不能用 this </span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;to&#x27;</span>,to); <span class="comment">// 要跳转到哪个路由对象</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;from&#x27;</span>,<span class="keyword">from</span>); <span class="comment">// 从哪里离开</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;next&#x27;</span>,next);<span class="comment">// 方法 （可以接收参数，这个方法必须调用）</span></span><br><span class="line">      <span class="comment">// 有next才能成功跳转</span></span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;to&#x27;</span>,to);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;from&#x27;</span>,<span class="keyword">from</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;next&#x27;</span>,next);<span class="comment">// 方法</span></span><br><span class="line">      <span class="comment">// 有next才能成功跳转 next的值 默认是true</span></span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">      <span class="comment">// 如果next中的值时false，则不能从当前页面离开</span></span><br><span class="line">      <span class="title function_">next</span>(<span class="literal">false</span>);</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>路由独享</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/users/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">UserDetails</span>,</span><br><span class="line">    <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// reject the navigation</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="4-2-watch"><a href="#4-2-watch" class="headerlink" title="4.2 watch"></a>4.2 watch</h3><ul>
<li>1 监听路由的变化</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    $route(to, <span class="keyword">from</span>)&#123;</span><br><span class="line">      <span class="comment">// to: 最新的路由</span></span><br><span class="line">      <span class="comment">// from： 上一次的路由</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(to.<span class="property">path</span> , <span class="keyword">from</span>.<span class="property">path</span> );</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<ul>
<li>2 监听数据的变化</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="title function_">a</span>(<span class="params">to, <span class="keyword">from</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(to , <span class="keyword">from</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 深度监听</span></span><br><span class="line">&lt;script &gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        data () &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">a</span>: <span class="number">1</span> ,</span><br><span class="line">                <span class="attr">b</span>:&#123;</span><br><span class="line">                    <span class="attr">c</span>:<span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">methods</span>: &#123;</span><br><span class="line">            <span class="title function_">btn</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">a</span>++;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">b</span>.<span class="property">c</span> =<span class="number">2</span>;</span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">watch</span>: &#123;</span><br><span class="line">            <span class="title function_">a</span>(<span class="params">to, <span class="keyword">from</span></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(to , <span class="keyword">from</span>);</span><br><span class="line">            &#125;    ,</span><br><span class="line">            <span class="attr">b</span>:&#123;</span><br><span class="line">                <span class="title function_">handler</span>(<span class="params">to</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B:&#x27;</span>, to.<span class="property">c</span>);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">// 深度监听</span></span><br><span class="line">                <span class="attr">deep</span>: <span class="literal">true</span> </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-基础</title>
    <url>/2022/04/16/Vue-%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="1-slot插槽"><a href="#1-slot插槽" class="headerlink" title="1 slot插槽"></a>1 slot插槽</h2><blockquote>
<p>插槽：用于决定将携带的内容，插入到指定的某个位置从而使模块分块，具有模块化的特性。</p>
</blockquote>
<ul>
<li>插槽就是子组件中的提供给父组件使用的一个占位符，用<code>&lt;slot&gt;&lt;/slot&gt;</code>表示，父组件可以在这个占位符中填充任何模板代码，如 HTML、组件等，填充的内容会替换子组件的<code>&lt;slot&gt;&lt;/slot&gt;</code>标签.</li>
<li><a href="https://blog.csdn.net/weixin_41568816/article/details/107601930">vue中的三种插槽</a></li>
</ul>
<h2 id="2-Vue插件的使用"><a href="#2-Vue插件的使用" class="headerlink" title="2 Vue插件的使用"></a>2 Vue插件的使用</h2><ul>
<li><p>使用插件的步骤</p>
<ul>
<li>下载( 使用 npm install) eg:<code>npm install vue-awesome-swiper@3.1.3 -S</code></li>
<li>引入<ul>
<li>全局引入（在main.js）</li>
<li>按需引入（局部引入）</li>
</ul>
</li>
<li>配置（看文档）</li>
</ul>
</li>
<li><p>以swiper插件为例(轮播图)：<a href="https://blog.csdn.net/u012570307/article/details/107203851">vue-awesome-swiper插件的使用</a></p>
</li>
<li><p>Mint UI 移动端开发常用框架 ：<a href="http://mint-ui.github.io/#!/zh-cn">Mint UI</a></p>
</li>
</ul>
<h2 id="3-样式穿透"><a href="#3-样式穿透" class="headerlink" title="3 样式穿透"></a>3 样式穿透</h2><blockquote>
<p>样式穿透：  在vue开发过程中，当我们引入第三方组件库时(如使用element-ui)，需要在局部组件中修改第三方组件库样式，而又不想去除scoped属性造成组件之间的样式覆盖。这时我们可以通过一些方法穿透scoped。</p>
</blockquote>
<ul>
<li>实现：<ul>
<li>方式1 ：<code>::v-deep</code>；</li>
<li>方式2 ：sass 和 less使用 <code>/deep/</code>；</li>
<li>方式3 ：<code>&gt;&gt;&gt;</code> 。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>其他问题</title>
    <url>/2022/04/18/%E5%85%B6%E4%BB%96/</url>
    <content><![CDATA[<h2 id="1-函数柯里化"><a href="#1-函数柯里化" class="headerlink" title="1 函数柯里化"></a>1 函数柯里化</h2><ul>
<li>在计算机科学中，柯里化(<code>Currying</code>)是把<code>接受多个参数的函数</code>变换成<code>接受一个单一参数的函数</code>，并且返回接受余下的参数且返回结果的新函数的技术。</li>
<li>作用<ul>
<li>参数复用：本质上来说时降低通用性，提高适用性；</li>
<li>提前返回<ul>
<li>经典实例：元素绑定事件监听器，区分IE浏览器的attachEvent方法</li>
</ul>
</li>
<li>延迟计算：柯里化函数不会立即执行计算，第一次只是返回一个函数，后面的调用才会进行计算。</li>
</ul>
</li>
</ul>
<h2 id="2-登录验证"><a href="#2-登录验证" class="headerlink" title="2 登录验证"></a>2 登录验证</h2><ul>
<li><a href="https://www.cnblogs.com/itlihao/p/14846026.html">几种登录验证的方式</a></li>
</ul>
<h3 id="2-1-传统方式-Cookie-Session认证"><a href="#2-1-传统方式-Cookie-Session认证" class="headerlink" title="2.1 传统方式 Cookie-Session认证"></a>2.1 传统方式 Cookie-Session认证</h3><ul>
<li><p>认证过程：</p>
<ul>
<li>用户输入用户名、密码或用短信验证码方式登录系统；</li>
<li>服务器端验证后，返回一个SessionId，客户端将SessionId保存在cookie中，下次访问时带着SessionId；</li>
<li>当客户端再次发起请求时，自动带上cookie信息，服务端通过cookie获取Session信息进行校验，判断对应用户是否存在。</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>每次用户认证后服务器都要创建一条记录，这个记录(Session)一般保存在内存中。当很多用户同时认证后，会有很多条记录，增加服务器负担。</li>
<li>如果session保存在内存中，不利于可扩展性。</li>
</ul>
</li>
</ul>
<p><img src="cookie-sessionId.jpg" alt="Cookie-Session认证"></p>
<h3 id="2-2-基于token认证"><a href="#2-2-基于token认证" class="headerlink" title="2.2 基于token认证"></a>2.2 基于token认证</h3><ul>
<li><p>认证过程</p>
<ul>
<li>用户在登录表单中输入用户名和密码，然后点击登录。服务器端会返回一个token，访问其他接口时带着token；</li>
<li>请求通过在请求头中携带token发送登录请求之后，通过后端查询数据库验证用户的合法性；</li>
<li>每次发送访问请求时提供token信息，然后根据这个token得到相关用户信息去数据库查到用户信息进行验证账号密码等，通过则让用户访问服务端接口，不通过则拒绝访问。</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>与sessionId的方式本质上没有什么区别；</li>
<li>需要用token去redis数据库查询是否有相应用户；</li>
<li>会占用redis的内存。</li>
</ul>
</li>
</ul>
<p><img src="token.png" alt="基于token认证"></p>
<h3 id="2-3-JWT认证方式"><a href="#2-3-JWT认证方式" class="headerlink" title="2.3 JWT认证方式"></a>2.3 JWT认证方式</h3><blockquote>
<p>JWT :Json web token是为了在网络应用环境间传递声明而执行的一种基于JSON传世格式的开放标准，可实现无状态、分布式的web应用授权。</p>
</blockquote>
<ul>
<li><p>认证过程</p>
<ul>
<li>用户登录服务器，服务端验证用户账号密码，使用secret生成JWT令牌和过期时间，然后将令牌返回给客户端；</li>
<li>客户端访问服务端时，在请求头中带上这个令牌，服务器端使用secret验证令牌是否合法，如果合法则让用户访问服务器接口，不合法则拒绝；</li>
<li>服务器并不保存token。</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>用户主动注销，服务器并不能让token主动失效。</li>
</ul>
</li>
</ul>
<p><img src="JWT.png" alt="JWT认证"></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS-面试总结3</title>
    <url>/2022/04/30/CSS-%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%933/</url>
    <content><![CDATA[<h2 id="1-CSS渲染和解析"><a href="#1-CSS渲染和解析" class="headerlink" title="1 CSS渲染和解析"></a>1 CSS渲染和解析</h2><p><a href="https://blog.csdn.net/qq_43743402/article/details/121046578">CSS渲染原理</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>eslintrc中的问题</title>
    <url>/2022/04/29/eslintrc%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<ol>
<li><p>报错：Vue运行出现Missing semicolon错误</p>
<ul>
<li>增加分号</li>
</ul>
</li>
<li><p>报错：Strings must use singlequote.</p>
<ul>
<li>/* eslint-disable */</li>
</ul>
</li>
<li><p>报错：eslint报错Expected linebreaks to be ‘LF’ but found ‘CRLF’的解决方案</p>
<ul>
<li>在.eslintrc文件 rules 里面 配置<code>&quot;linebreak-style&quot;: [0 ,&quot;error&quot;, &quot;windows&quot;], </code></li>
</ul>
</li>
</ol>
]]></content>
      <tags>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML开发规范</title>
    <url>/2022/05/01/HTML%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h1 id="HTML代码书写规范"><a href="#HTML代码书写规范" class="headerlink" title="HTML代码书写规范"></a>HTML代码书写规范</h1><ol>
<li><p>块级元素与块级元素平级，行内元素与行内元素平级。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>块级元素可以包含行内元素或某些块元素，但行内元素不能包含块元素，它只能包含其它的行内元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>几个特殊的块级元素只能包含行内元素，不能再包含块级元素。</p>
<ul>
<li>h1、h2、h3、h4、h5、h6、p、dt </li>
</ul>
</li>
<li><p>块级元素不能放在标签p里面。</p>
</li>
<li><p><code>li标签</code>可以包含 <code>div标签</code>，因为li 和 div 标签都是装载内容的容器。</p>
</li>
</ol>
<h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><ul>
<li>h1-h6 : 1-6级标题 </li>
<li>p : 段落 </li>
<li>div : 定义文档中的节 </li>
<li>ul : 定义无序列表 </li>
<li>ol : 定义有序列表 </li>
<li>li : 定义无序列表与有序列表中的项 </li>
<li>hr : 水平线 </li>
<li>address : 定义文档作者或拥有者的联系信息 </li>
<li>blockquote : 定义长的引用  </li>
<li>form : 定义表单  </li>
<li>audio : 定义声音内容 </li>
<li>video : 定义视频 </li>
<li>nav : 定义导航链接 </li>
<li>dl : 定义定义列表 </li>
<li>dt : 定义定义列表中的项目 </li>
<li>dd : 定义定义列表中项目的描述 </li>
<li>menu : 定义命令的菜单/列表 </li>
<li>table : 定义表格  </li>
<li>tbody : 定义表格主体 </li>
<li>thead : 定义表格头部 </li>
<li>tfoot : 定义表格中的表注内容（脚注） </li>
<li>tr : 定义表格中的行 </li>
<li>th : 定义表格中的表头单元格 </li>
<li>colgroup : 定义表格中供格式化的列组 </li>
<li>col : 定义表格中一个或多个列的属性值。【在colgroup中使用 】 </li>
<li>header : 定义 section 或 page 的页眉 </li>
<li>footer : 定义 section 或 page 的页脚 </li>
<li>section : 定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分 </li>
<li>article : 定义文章 </li>
<li>aside : 定义页面内容之外的内容。【可用作文章的侧栏。】 </li>
<li>datails : 定义元素的细节。【用于描述有关文档或文档片段的详细信息。】 </li>
<li>summary : 为 details 元素定义可见的标题。</li>
</ul>
<h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><ul>
<li>br : 定义换行 </li>
<li>a : 定义超链接 </li>
<li>i : 定义文字倾斜 </li>
<li>b : 定义文字加粗 </li>
<li>em : 定义文字倾斜，语义更加强调  </li>
<li>cite : 定义引用 </li>
<li>code : 定义计算机代码文本   </li>
<li>q : 定义短的引用  </li>
<li>small : 定义小号文本 </li>
<li>strong : 定义语气更为强烈的强调文本，文字加粗 </li>
<li>sup : 定义上标文本 </li>
<li>sub : 定义下标文本 </li>
<li>time : 定义日期/时间 </li>
<li>var : 定义文本的变量部分  </li>
<li>label : 定义 input 元素的标注 </li>
<li>datalist : 定义下拉列表 </li>
<li>Keygen : 定义生成密钥。 </li>
<li>output : 定义输出的一些类型。【如脚本输出】 </li>
<li>map : 定义图像映射 </li>
<li>area : 定义图像地图内部的区域 </li>
<li>source : 定义媒介源 </li>
<li>track : 定义用在媒体播放器中的文本轨道 </li>
<li>link : 定义文档与外部资源的关系 </li>
<li>command : 定义命令按钮 </li>
<li>style : 定义文档的样式信息 </li>
<li>span : 定义文档中的节 </li>
<li>base : 定义页面中所有链接的默认地址或默认目标</li>
</ul>
<h3 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h3><ul>
<li>img : 定义图像 </li>
<li>input : 定义输入控件 </li>
<li>meter  : 定义预定义范围内的度量 </li>
<li>progress : 定义任何类型的任务的进度 </li>
<li>textarea : 定义多行的文本输入控件 </li>
<li>button : 定义按钮 </li>
<li>select : 定义选择列表（下拉列表） </li>
<li>iframe : 定义内联框架 </li>
<li>canvas : 定义图形 </li>
<li>td : 定义表格中的单元格</li>
</ul>
<h3 id="HTML字符集"><a href="#HTML字符集" class="headerlink" title="HTML字符集"></a>HTML字符集</h3><table>
<thead>
<tr>
<th>显示结果</th>
<th>描述</th>
<th>实体名称</th>
<th>实体编号</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>空格</td>
<td><code>&amp;nbsp;    </code></td>
<td></td>
</tr>
<tr>
<td>&lt;</td>
<td>小于号</td>
<td><code>    &amp;lt;</code></td>
<td>&lt;</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于号</td>
<td><code>   &amp;gt;   </code></td>
<td>&gt;</td>
</tr>
<tr>
<td>&amp;</td>
<td>和号</td>
<td><code>&amp;amp;    </code></td>
<td>&amp;</td>
</tr>
<tr>
<td>“</td>
<td>引号</td>
<td><code>&amp;quot;</code></td>
<td>“</td>
</tr>
<tr>
<td>‘</td>
<td>撇号</td>
<td><code>&amp;apos; </code>(IE不支持)</td>
<td>‘</td>
</tr>
<tr>
<td>￠</td>
<td>分</td>
<td><code>&amp;cent;</code></td>
<td>¢</td>
</tr>
<tr>
<td>￡</td>
<td>镑</td>
<td><code>   &amp;pound;   </code></td>
<td>£</td>
</tr>
<tr>
<td>￥</td>
<td>日元</td>
<td><code>&amp;yen;    </code></td>
<td>¥</td>
</tr>
<tr>
<td>€</td>
<td>欧元</td>
<td><code>&amp;euro;    </code></td>
<td>€</td>
</tr>
<tr>
<td>§</td>
<td>小节</td>
<td><code>&amp;sect;</code></td>
<td>§</td>
</tr>
<tr>
<td>©</td>
<td>版权</td>
<td><code>&amp;copy;</code></td>
<td>©</td>
</tr>
<tr>
<td>®</td>
<td>注册商标</td>
<td><code>&amp;reg;</code></td>
<td>®</td>
</tr>
<tr>
<td>™</td>
<td>商标</td>
<td><code>&amp;trade;    </code></td>
<td>™</td>
</tr>
<tr>
<td>×</td>
<td>乘号</td>
<td><code>&amp;times;</code></td>
<td>×</td>
</tr>
<tr>
<td>÷</td>
<td>除号</td>
<td><code>&amp;divide;    </code></td>
<td>÷</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS开发规范</title>
    <url>/2022/05/01/CSS%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h1 id="CSS规范"><a href="#CSS规范" class="headerlink" title="CSS规范"></a>CSS规范</h1><h2 id="1-命名空间规范"><a href="#1-命名空间规范" class="headerlink" title="1 命名空间规范"></a>1 命名空间规范</h2><ol>
<li><p>布局：以 g 为命名空间，例如：.g-wrap 、.g-header、.g-content。</p>
</li>
<li><p>工具：以 u 为命名空间，表示不耦合业务逻辑的、可复用的的工具，例如：u-clearfix、u-ellipsis。（例如清除浮动，全局背景颜色等）</p>
</li>
<li><p>状态：以 s 为命名空间，表示动态的、具有交互性质的状态，例如：.s-current、s-selected。</p>
</li>
<li><p>组件：以 m 为命名空间，表示可复用、移植的组件模块，例如：m-slider、m-dropMenu。</p>
</li>
<li><p>钩子：以 j 为命名空间，表示特定给 JavaScript 调用的类名，例如：j-request、j-open。</p>
</li>
</ol>
<h2 id="2-CSS书写顺序"><a href="#2-CSS书写顺序" class="headerlink" title="2 CSS书写顺序"></a>2 CSS书写顺序</h2><blockquote>
<p>位置 大小 文字 背景 其他</p>
</blockquote>
<ol>
<li><p>位置属性(<code>position</code>, <code>top</code>, <code>right</code>, <code>z-index</code>, <code>display</code>, <code>float</code>等)</p>
</li>
<li><p>大小(<code>width</code>, <code>height</code>, <code>padding</code>, <code>margin</code>)</p>
</li>
<li><p>文字系列(<code>font</code>, <code>line-height</code>, <code>letter-spacing</code>, <code>color</code>, <code>text-align</code>等)</p>
</li>
<li><p>背景(<code>background</code>, <code>border</code>等)</p>
</li>
<li><p>其他(<code>animation</code>,<code>transition</code>等)</p>
</li>
</ol>
<h2 id="3-连字符CSS选择器的命名规范"><a href="#3-连字符CSS选择器的命名规范" class="headerlink" title="3 连字符CSS选择器的命名规范"></a>3 连字符CSS选择器的命名规范</h2><ol>
<li><p>长名称或词组可以使用<code>中横线</code>(<code>-</code>)来为选择器命名。</p>
</li>
<li><p>不建议使用“_”下划线来命名CSS选择器:</p>
<ul>
<li>输入的时候少按一个shift键；</li>
<li>浏览器兼容问题 （比如使用_tips的选择器命名，在IE6是无效的）;</li>
<li>能良好区分JavaScript变量命名（JS变量命名是用<code>_</code>）.</li>
</ul>
</li>
</ol>
<h2 id="4-代码注释"><a href="#4-代码注释" class="headerlink" title="4 代码注释"></a>4 代码注释</h2><ol>
<li><p>单行注释:星号与内容之间必须保留一个空格。<br><code>/* 表格隔行变色 */</code></p>
</li>
<li><p>多行注释:星号要一列对齐，星号与内容之间必须保留一个空格。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sometimes you need to include optional context for the entire component. Do that up here if it&#x27;s important enough.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li>
<li><p>规则声明块内注释: 使用 // 注释，<code>// </code>后面加上一个空格，注释独立一行。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.foo</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    // ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>文件注释: 文件顶部必须包含文件注释，用 @name 标识文件说明。星号要一列对齐，星号与内容之间必须保留一个空格，标识符冒号与内容之间必须保留一个空格。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @name: 文件名或模块名</span></span><br><span class="line"><span class="comment"> * @description: 文件或模块描述</span></span><br><span class="line"><span class="comment"> * @author: author-name(mail-name@domain.com)</span></span><br><span class="line"><span class="comment"> *          author-name2(mail-name2@domain.com)</span></span><br><span class="line"><span class="comment"> * @update: 2015-04-29 00:02</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<ul>
<li>@description为文件或模块描述。</li>
<li>@update为可选项，建议每次改动都更新一下。</li>
<li>当该业务项目主要由固定的一个或多个人负责时，需要添加@author标识，一方面是尊重劳动成果，另一方面方便在需要时快速定位责任人。</li>
</ul>
</li>
</ol>
<h2 id="5-单位"><a href="#5-单位" class="headerlink" title="5 单位"></a>5 单位</h2><table>
<thead>
<tr>
<th>单位</th>
<th>类型</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td><code>px</code></td>
<td>Absolute</td>
<td>像素 (计算机屏幕上的一个点)，1px = 1/96in</td>
</tr>
<tr>
<td><code>pt</code></td>
<td>Absolute</td>
<td>Points, 1pt = 1/72in</td>
</tr>
<tr>
<td><code>pc</code></td>
<td>Absolute</td>
<td>Picas, 1pc = 12pt</td>
</tr>
<tr>
<td><code>in</code></td>
<td>Absolute</td>
<td>Inches, 1in = 96px = 2.54cm</td>
</tr>
<tr>
<td><code>cm</code></td>
<td>Absolute</td>
<td>Centimeters, 1cm = 96/2.54px</td>
</tr>
<tr>
<td><code>mm</code></td>
<td>Absolute</td>
<td>Millimeters, 1mm = 1/10cm</td>
</tr>
<tr>
<td><code>q</code></td>
<td>Absolute</td>
<td>Quarter-millimeters, 1q = 1/4mm</td>
</tr>
<tr>
<td><code>%</code></td>
<td>Relative</td>
<td>相对于父元素的宽度或字体大小</td>
</tr>
<tr>
<td><code>em</code></td>
<td>Relative</td>
<td>相对于父元素的字体大小</td>
</tr>
<tr>
<td><code>rem</code></td>
<td>Relative</td>
<td>(即root em) 相对于html标签的字体大小</td>
</tr>
<tr>
<td><code>ex</code></td>
<td>Relative</td>
<td>当前字体环境中 x 字母的高度</td>
</tr>
<tr>
<td><code>ch</code></td>
<td>Relative</td>
<td>当前字体环境中 0 数字的高度</td>
</tr>
<tr>
<td><code>vw</code></td>
<td>Relative</td>
<td>1% 视口（浏览器可视区域）的宽度</td>
</tr>
<tr>
<td><code>vh    </code></td>
<td>Relative</td>
<td>1% 视口（浏览器可视区域）的高度</td>
</tr>
<tr>
<td><code>vmin</code></td>
<td>Relative</td>
<td>1% 视口（浏览器可视区域）的宽度和高度中较小的尺寸</td>
</tr>
<tr>
<td><code>vmax    </code></td>
<td>Relative</td>
<td>1% 视口（浏览器可视区域）的宽度和高度中较大的尺寸</td>
</tr>
</tbody></table>
<h2 id="6-CSS选择器"><a href="#6-CSS选择器" class="headerlink" title="6 CSS选择器"></a>6 CSS选择器</h2><h3 id="6-1-基本选择器"><a href="#6-1-基本选择器" class="headerlink" title="6.1  基本选择器"></a>6.1  基本选择器</h3><table>
<thead>
<tr>
<th>选择器</th>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>*    </code></td>
<td>通配选择器</td>
<td>选择所有的元素</td>
</tr>
<tr>
<td><code>E    </code></td>
<td>元素选择器</td>
<td>选择指定的元素</td>
</tr>
<tr>
<td><code>#idName</code></td>
<td>id选择器</td>
<td>选择id属性等于idName的元素</td>
</tr>
<tr>
<td><code>.className</code></td>
<td>class选择器</td>
<td>选择class属性包含className的元素</td>
</tr>
</tbody></table>
<h3 id="6-2-关系选择器"><a href="#6-2-关系选择器" class="headerlink" title="6.2  关系选择器"></a>6.2  关系选择器</h3><table>
<thead>
<tr>
<th>选择器</th>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>E F</code></td>
<td>包含选择器</td>
<td>选择所有包含在E元素里面的F元素</td>
</tr>
<tr>
<td><code>E&gt;F</code></td>
<td>子选择器</td>
<td>选择所有作为E元素的子元素F</td>
</tr>
<tr>
<td><code>E+F</code></td>
<td>相邻选择器</td>
<td>选择紧贴在E元素之后的F元素</td>
</tr>
<tr>
<td><code>E~F</code></td>
<td>兄弟选择器</td>
<td>选择E元素所有兄弟元素F</td>
</tr>
</tbody></table>
<h3 id="6-3-属性选择器"><a href="#6-3-属性选择器" class="headerlink" title="6.3  属性选择器"></a>6.3  属性选择器</h3><table>
<thead>
<tr>
<th>选择器</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>E[att]</code></td>
<td>选择具有att属性的E元素</td>
</tr>
<tr>
<td><code>E[att=&quot;val&quot;]</code></td>
<td>选择具有att属性且属性值等于val的E元素</td>
</tr>
<tr>
<td><code>E[att~=&quot;val&quot;]</code></td>
<td>选择具有att属性且属性值其中一个等于val的E元素（包含只有一个值且该值等于val的情况）</td>
</tr>
<tr>
<td>`E[att</td>
<td>=”val”]`</td>
</tr>
<tr>
<td><code>E[att^=&quot;val&quot;]</code></td>
<td>选择具有att属性且属性值为以val开头的字符串的E元素</td>
</tr>
<tr>
<td><code>E[att$=&quot;val&quot;]</code></td>
<td>选择具有att属性且属性值为以val结尾的字符串的E元素</td>
</tr>
<tr>
<td><code>E[att*=&quot;val&quot;]</code></td>
<td>选择具有att属性且属性值为包含val的字符串的E元素</td>
</tr>
</tbody></table>
<h3 id="6-4-伪类选择器"><a href="#6-4-伪类选择器" class="headerlink" title="6.4  伪类选择器"></a>6.4  伪类选择器</h3><table>
<thead>
<tr>
<th>选择器</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>E:link    </code></td>
<td>设置超链接a在未被访问前的样式</td>
</tr>
<tr>
<td><code>E:visited    </code></td>
<td>设置超链接a在其链接地址已被访问过时的样式</td>
</tr>
<tr>
<td><code>E:hover    </code></td>
<td>设置元素鼠标在其悬停时的样式</td>
</tr>
<tr>
<td><code>E:active    </code></td>
<td>设置元素在被用户激活（在鼠标点击与释放之间发生的事件）时的样式</td>
</tr>
<tr>
<td><code>E:focus    </code></td>
<td>设置元素在成为输入焦点（该元素的onfocus事件发生）时的样式。(一般应用于表单元素)</td>
</tr>
<tr>
<td><code>E:checked    </code></td>
<td>匹配用户界面上处于选中状态的元素E。(用于input type为radio与checkbox时)</td>
</tr>
<tr>
<td><code>E:enabled    </code></td>
<td>匹配用户界面上处于可用状态的元素E。(一般应用于表单元素)</td>
</tr>
<tr>
<td><code>E:disabled    </code></td>
<td>匹配用户界面上处于禁用状态的元素E。(一般应用于表单元素)</td>
</tr>
<tr>
<td><code>E:empty    </code></td>
<td>匹配没有任何子元素（包括text节点）的元素E</td>
</tr>
<tr>
<td><code>E:root    </code></td>
<td>匹配E元素在文档的根元素。在HTML中，根元素永远是HTML</td>
</tr>
<tr>
<td><code>E:not(s)    </code></td>
<td>匹配不含有s选择符的元素E</td>
</tr>
<tr>
<td><code>E:first-child</code></td>
<td>匹配父元素的第一个子元素E</td>
</tr>
<tr>
<td><code>E:last-child</code></td>
<td>匹配父元素的最后一个子元素E</td>
</tr>
<tr>
<td><code>E:only-child    </code></td>
<td>匹配父元素仅有的一个子元素E</td>
</tr>
<tr>
<td><code>E:nth-child(n)</code></td>
<td>匹配父元素的第n个子元素E</td>
</tr>
<tr>
<td><code>E:nth-last-child(n)</code></td>
<td>匹配父元素的倒数第n个子元素E</td>
</tr>
<tr>
<td><code>E:first-of-type</code></td>
<td>匹配同类型中的第一个同级兄弟元素E</td>
</tr>
<tr>
<td><code>E:last-of-type</code></td>
<td>匹配同类型中的最后一个同级兄弟元素E</td>
</tr>
<tr>
<td><code>E:only-of-type</code></td>
<td>匹配同类型中的唯一的一个同级兄弟元素E</td>
</tr>
<tr>
<td><code>E:nth-of-type(n)</code></td>
<td>匹配同类型中的第n个同级兄弟元素E</td>
</tr>
<tr>
<td><code>E:nth-last-of-type(n)    </code></td>
<td>匹配同类型中的倒数第n个同级兄弟元素E</td>
</tr>
</tbody></table>
<h3 id="6-5-伪元素选择器"><a href="#6-5-伪元素选择器" class="headerlink" title="6.5  伪元素选择器"></a>6.5  伪元素选择器</h3><table>
<thead>
<tr>
<th>选择器</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>E:before/E::before</code></td>
<td>在目标元素E的前面插入的内容。用来和content属性一起使用</td>
</tr>
<tr>
<td><code>E:after/E::after</code></td>
<td>在目标元素E的后面插入的内容。用来和content属性一起使用</td>
</tr>
<tr>
<td><code>E:first-letter/E::first-letter</code></td>
<td>设置元素内的第一个字符的样式</td>
</tr>
<tr>
<td><code>E:first-line/E::first-line</code></td>
<td>设置元素内的第一行的样式</td>
</tr>
<tr>
<td><code>E::placeholder</code></td>
<td>设置元素文字占位符的样式。(一般用于input输入框)</td>
</tr>
<tr>
<td><code>E::selection</code></td>
<td>设置元素被选择时的字体颜色和背景颜色</td>
</tr>
</tbody></table>
<h2 id="7-其他"><a href="#7-其他" class="headerlink" title="7 其他"></a>7 其他</h2><ul>
<li><p>尽量使用CSS缩写属性。</p>
</li>
<li><p>写属性值的时候去掉小数点前的“ 0 ”。</p>
</li>
<li><p>定义选择器名称，属性，属性值均为小写。</p>
</li>
<li><p>不要随意使用ID选择器。</p>
</li>
<li><p>为选择器添加状态前缀，“.is-”前缀。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>JS书写规范</title>
    <url>/2022/05/01/JS%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h1 id="JavaScript开发规范"><a href="#JavaScript开发规范" class="headerlink" title="JavaScript开发规范"></a>JavaScript开发规范</h1><h2 id="1-基本准则"><a href="#1-基本准则" class="headerlink" title="1 基本准则"></a>1 基本准则</h2><ul>
<li><p>    符合web标准，结构表现行为分离，兼容性优良。页面性能方面，代码要求简洁明了有序， 尽可能的减小服务器负载，保证最快的解析速度；</p>
</li>
<li><p>    项目的维护和二次开发可能是直接或间接的团队合作，所以创建易维护的代码是一个项目成功与否的关键，易维护的代码意味着具有如下特性；</p>
</li>
<li><p>    阅读性好：如良好的注释和命名规范，有文档；</p>
</li>
<li><p>    具有一致性：看起来如同一个人编写；</p>
</li>
<li><p>    代码的松耦合，高度模块化：将页面内的元素视为一个个模块，相互独立，尽量避免耦合过高的代码，从html,css,js三个层面都要考虑模块化；</p>
</li>
<li><p>    严格按照规范编写代码。</p>
</li>
</ul>
<h2 id="2-命名规范"><a href="#2-命名规范" class="headerlink" title="2 命名规范"></a>2 命名规范</h2><table>
<thead>
<tr>
<th>JavaScript变量起名类型</th>
<th>变量命名前缀</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td><code>Array 数组</code></td>
<td>a</td>
<td>aList，aGroup</td>
</tr>
<tr>
<td><code>Boolean 逻辑</code></td>
<td>b</td>
<td>bChecked，bHasLogin</td>
</tr>
<tr>
<td><code>Function 函数</code></td>
<td>f</td>
<td>fGetHtml，fInit</td>
</tr>
<tr>
<td><code>Integer 数字</code></td>
<td>n</td>
<td>nPage，nTotal</td>
</tr>
<tr>
<td><code>Object 对象</code></td>
<td>o</td>
<td>oButton，oDate</td>
</tr>
<tr>
<td><code>Regular Expression 正则</code></td>
<td>r</td>
<td>rDomain，rEmail</td>
</tr>
<tr>
<td><code>String 字符</code></td>
<td>s</td>
<td>sName，sHtml</td>
</tr>
</tbody></table>
<ul>
<li>特殊情况<ul>
<li><p>作用域不大临时变量可以简写，比如：str，num，bol，obj，fun，arr。</p>
</li>
<li><p>循环变量可以简写，比如：i，j，k等。</p>
</li>
<li><p>某些作为不允许修改值的变量认为是常量，全部字母都大写。例如：COPYRIGHT，PI。常量可以存在于函数中，也可以存在于全局。必须采用全大写的命名，且单词以_分割，常量通常用于ajax请求url，和一些不会改变的数据。</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>函数命名</p>
</blockquote>
<ol>
<li><p>普通函数：首字母小写，驼峰式命名，统一使用动词或者动词+名词形式。例如：<code>fnGetVersion()</code>，<code>fnSubmitForm()</code>，<code>fnInit()</code>。</p>
</li>
<li><p>内部函数：使用 <code>_fn + 动词 + 名词形式</code> ，内部函数必需在函数最后定义。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fnGetNumber</span>(<span class="params">nTotal</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nTotal &lt; <span class="number">100</span>) &#123;</span><br><span class="line">        nTotal = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">_fnAdd</span>(nTotal);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_fnAdd</span>(<span class="params">nNumber</span>) &#123;</span><br><span class="line">        nNumber++;</span><br><span class="line">        <span class="keyword">return</span> nNumber;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(<span class="title function_">fGetNumber</span>(<span class="number">10</span>)); <span class="comment">//alert 101</span></span><br></pre></td></tr></table></figure></li>
<li><p>对象方法与事件响应函数：对象方法命名使用<code>fn对象类名 + 动词 + 名词形式</code>；例如： <code>fnAddressGetEmail()</code>.</p>
</li>
<li><p>事件响应函数：<code>fn + 触发事件对象名 + 事件名或者模块名</code>。例如：<code>fnDivClick()</code>，<code>fnAddressSubmitButtonClick()</code>.</p>
</li>
</ol>
<h2 id="3-其他"><a href="#3-其他" class="headerlink" title="3 其他"></a>3 其他</h2><ul>
<li><p>引号的使用，单引号<code>&#39; &#39;</code>优先（如果不是引号嵌套，不要使用双引号） .</p>
</li>
<li><p>注释</p>
<ul>
<li><p>公共组件维护者和各栏目WD都需要在文件头部加上注释说明：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*文件用途说明</span></span><br><span class="line"><span class="comment">*作者姓名、联系方式</span></span><br><span class="line"><span class="comment">*制作日期</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure></li>
<li><p>大的模块注释方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//================</span></span><br><span class="line"><span class="comment">// 代码用途</span></span><br><span class="line"><span class="comment">//================</span></span><br></pre></td></tr></table></figure></li>
<li><p>小的注释：<code>//代码说明</code></p>
</li>
<li><p>注释单独一行，不要在代码后的同一行内加注释。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">var</span> name = “abc”;   V</span><br><span class="line"><span class="keyword">var</span> name =”abc”; <span class="comment">//姓名 X</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>JS-作用域</title>
    <url>/2022/05/04/JS-%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    <content><![CDATA[<h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><h2 id="1-作用域常见类型"><a href="#1-作用域常见类型" class="headerlink" title="1 作用域常见类型"></a>1 作用域常见类型</h2><blockquote>
<p>全局作用域</p>
</blockquote>
<ul>
<li>全局作用域在一面打开时被创建，页面关闭时被销毁。</li>
<li>写在script标签中的变量和函数，作用域为全局，在页面的任意位置都可以访问到。</li>
<li>在全局作用域中有全局对象window，由浏览器创建，可以直接调用。</li>
<li>全局作用域中声明的变量和函数会作为window对象的属性和方法保存。</li>
</ul>
<blockquote>
<p>函数作用域</p>
</blockquote>
<ul>
<li>调用函数时被创建，执行完毕被销毁。</li>
<li>每调用一次函数就会创建一个新的函数作用域，他们之间相互独立。</li>
<li>函数作用域可以访问到全局作用域的变量，在函数外无法访问到函数作用域内的变量。</li>
<li>在函数作用域中访问变量、函数时，会现在自身作用域中寻找，若没找到，则会到上一级寻找， 一直到全局作用域。</li>
</ul>
<p>注意：</p>
<ul>
<li>JS没有块级作用域，但是可以模拟块级作用域。</li>
<li>不是有<code>&#123;&#125;</code>就是作用域。</li>
</ul>
<h2 id="2-作用域的深层次理解"><a href="#2-作用域的深层次理解" class="headerlink" title="2 作用域的深层次理解"></a>2 作用域的深层次理解</h2><ul>
<li><p>执行期的上下文</p>
<ul>
<li>当函数代码执行的前期会创建一个执行期上下文的内部对象(<code>AO</code>)(局部作用域)；</li>
<li>这个内部对象是在预编译的时候创建出来的，因为当函数被调用的时候，会先进行预编译；</li>
<li>在全局代码执行的前期会创建一个执行期的上下文的对象<code>GO</code>(全局作用域)。</li>
</ul>
</li>
<li><p>作用域链</p>
<ul>
<li>作用域链会被保存到一个隐式的属性中[[scope]]。这个属性是用户无法访问的，但是JS引擎将会访问它，这里面存储的是作用域链。</li>
<li>从内部向外链接。作用域链从当前作用域开始找，如果找不到则向外作用域找，找到返回，找不到报错。</li>
<li>从内部逐级向上查找。</li>
<li><code>AO</code>和<code>GO</code>的集合</li>
</ul>
</li>
</ul>
<ul>
<li><p>变量提升（悬挂变量声明）</p>
<ul>
<li>JS提升所有变量声明（var，函数），将他们移到其作用域的开头</li>
<li>eg:<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var变量提升 JS不存在块级作用域</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// undefined</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>( <span class="literal">false</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> x = <span class="number">1</span> ; </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// undefined</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>执行顺序、优先级</p>
<ul>
<li><code>变量</code> &gt; <code>函数</code> &gt; <code>参数</code> &gt; <code>变量提升</code></li>
</ul>
</li>
</ul>
<h2 id="3-面试题"><a href="#3-面试题" class="headerlink" title="3 面试题"></a>3 面试题</h2><ul>
<li><p>eg1：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// var str  变量提升</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str);<span class="comment">// undefined</span></span><br><span class="line">    <span class="keyword">var</span> str =<span class="string">&#x27;234&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>eg2：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str1); <span class="comment">// 报错 未定义</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">str1</span> =<span class="string">&#x27;2343&#x27;</span>; <span class="comment">// 全局变量 没有进行变量提升 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>();</span><br></pre></td></tr></table></figure></li>
<li><p>eg3:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">str2</span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">str2</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str2);<span class="comment">// f str2()&#123; return &#x27;2&#x27;; &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn2</span>(<span class="string">&#x27;222&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params">str3</span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">str3</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> str3 =<span class="string">&#x27;999&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str3);<span class="comment">// 999</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn3</span>(<span class="string">&#x27;23332&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm-二叉树遍历方式</title>
    <url>/2022/05/05/Algorithm-%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="1-二叉树的递归遍历"><a href="#1-二叉树的递归遍历" class="headerlink" title="1 二叉树的递归遍历"></a>1 二叉树的递归遍历</h1><ul>
<li><p>递归三要素：</p>
<ul>
<li>① <code>确定递归函数的参数和返回值</code> ： 确定哪些参数是递归的过程中需要处理的，那么就在递归函数中加上这个参数，并且要明确每次递归的返回值是什么，进而确定递归函数的返回类型。</li>
<li>② <code>确定终止条件</code> ： 如果递归的终止条件有问题，会导致操作系统的内存栈溢出的错误。</li>
<li>③ <code>确定单层递归的逻辑</code> ： 确定每一层递归需要处理的信息。 </li>
</ul>
</li>
<li><p>递归的实现： 每一次递归调用都会把函数的局部变量、参数值和返回地址等压入调用栈中，然后递归返回的时候，从栈顶弹出上一次递归的各项参数。</p>
</li>
<li><p>二叉树的前序遍历</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">let</span> dfs = <span class="keyword">function</span>(<span class="params">root</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>( root === <span class="literal">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">        result.<span class="title function_">push</span>(root.<span class="property">val</span>);</span><br><span class="line">        <span class="title function_">dfs</span>(root.<span class="property">left</span>);</span><br><span class="line">        <span class="title function_">dfs</span>(root.<span class="property">right</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">dfs</span>( root );</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>二叉树的中序遍历</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res =[];</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="keyword">function</span>(<span class="params">root</span>)&#123;</span><br><span class="line">        <span class="comment">// 中序： 左中右</span></span><br><span class="line">        <span class="keyword">if</span>( root === <span class="literal">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="title function_">fn</span>(root.<span class="property">left</span>);</span><br><span class="line">        res.<span class="title function_">push</span>(root.<span class="property">val</span>);</span><br><span class="line">        <span class="title function_">fn</span>(root.<span class="property">right</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>二叉树的后序遍历</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="keyword">function</span>(<span class="params">root</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>( root === <span class="literal">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="title function_">fn</span>(root.<span class="property">left</span>);<span class="comment">// 左</span></span><br><span class="line">        <span class="title function_">fn</span>(root.<span class="property">right</span>);<span class="comment">// 右</span></span><br><span class="line">        res.<span class="title function_">push</span>(root.<span class="property">val</span>);<span class="comment">//  中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="2-二叉树的迭代遍历"><a href="#2-二叉树的迭代遍历" class="headerlink" title="2 二叉树的迭代遍历"></a>2 二叉树的迭代遍历</h1><ul>
<li><p>前序遍历（迭代法）</p>
<ul>
<li>前序遍历的顺序是中左右，先访问的节点是中间节点，要处理的元素也是中间节点。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  前序遍历 : 入栈（右左），出栈（中左右）</span></span><br><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">const</span> stack = [root]; <span class="comment">//栈 </span></span><br><span class="line">    <span class="keyword">let</span> cur = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>( !root ) <span class="keyword">return</span> res; <span class="comment">// 如果root为空 则返回res</span></span><br><span class="line">    <span class="comment">// 循环 栈的长度不为0</span></span><br><span class="line">    <span class="keyword">while</span>( stack.<span class="property">length</span>)&#123;</span><br><span class="line">        cur = stack.<span class="title function_">pop</span>(); <span class="comment">//弹出元素</span></span><br><span class="line">        res.<span class="title function_">push</span>(cur.<span class="property">val</span>); </span><br><span class="line">        <span class="keyword">if</span>(cur.<span class="property">right</span>) stack.<span class="title function_">push</span>(cur.<span class="property">right</span>);</span><br><span class="line">        <span class="keyword">if</span>(cur.<span class="property">left</span>)  stack.<span class="title function_">push</span>(cur.<span class="property">left</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>中序遍历（迭代法）</p>
<ul>
<li>中序遍历的顺序是左中右，先访问的是二叉树顶部的节点，然后一层层向下访问，直到到达树左面的最底部，再开始处理节点，这会造成处理顺序和访问顺序不一致的问题。所以，再使用迭代法写中序遍历的时候，需要只用指针的遍历来帮助访问节点。栈则用来处理节点上的元素。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  中序遍历： 左中右  入栈（左右），出栈（左中右）</span></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res =[];</span><br><span class="line">    <span class="keyword">const</span> stack = [];</span><br><span class="line">    <span class="keyword">let</span> cur = root; <span class="comment">// 根节点</span></span><br><span class="line">    <span class="keyword">while</span>(cur!= <span class="literal">null</span> || stack.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="comment">// 指针访问节点，访问到最底层</span></span><br><span class="line">        <span class="keyword">if</span>( cur != <span class="literal">null</span> )&#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(cur);<span class="comment">// 将访问的放入栈中</span></span><br><span class="line">            cur = cur.<span class="property">left</span>; <span class="comment">// 左子树</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cur = stack.<span class="title function_">pop</span>();<span class="comment">// 从栈中弹出的数据，就是要处理的数据</span></span><br><span class="line">            res.<span class="title function_">push</span>(cur.<span class="property">val</span>);</span><br><span class="line">            cur = cur.<span class="property">right</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>后序遍历（迭代法）<ul>
<li>后序遍历的顺序是左右中，可以调整一下先序遍历的顺序就可以变成中左右的遍历顺序，然后再反转result数据即可。</li>
<li>先序中左右 -&gt;(调整代码左右顺序) 中右左 -&gt; (反转result数组) 左右中</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res =[];</span><br><span class="line">    <span class="keyword">const</span> stack = [root];</span><br><span class="line">    <span class="keyword">let</span> cur = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> res.<span class="title function_">reverse</span>();</span><br><span class="line">    <span class="keyword">while</span>( stack.<span class="property">length</span>)&#123;</span><br><span class="line">        cur = stack.<span class="title function_">pop</span>();</span><br><span class="line">        res.<span class="title function_">push</span>(cur.<span class="property">val</span>);</span><br><span class="line">        <span class="keyword">if</span>( cur.<span class="property">left</span> )  stack.<span class="title function_">push</span>(cur.<span class="property">left</span>);</span><br><span class="line">        <span class="keyword">if</span>( cur.<span class="property">right</span> ) stack.<span class="title function_">push</span>(cur.<span class="property">right</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">reverse</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<ul>
<li>递归与迭代：<ul>
<li>从时间复杂度上来讲，迭代法和递归法差不多（在不考虑函数调用开销和函数调用产生的堆栈开销）。但是，空间复杂度上，递归开销较大。</li>
<li>递归容易理解，但是收敛不好，容易栈溢出。</li>
</ul>
</li>
</ul>
<h1 id="4-二叉树的层序遍历"><a href="#4-二叉树的层序遍历" class="headerlink" title="4 二叉树的层序遍历"></a>4 二叉树的层序遍历</h1><pre><code class="js">var levelOrder = function(root) &#123;
    //二叉树的层序遍历
    let res=[],queue=[];
    queue.push(root); 
    while(queue.length &amp;&amp; root!==null)&#123;
        // 记录当前层级节点数
        let length=queue.length;
        //存放每一层的节点 
        let cur=[];
        for(let i=0;i&lt;length;i++)&#123;
            let node=queue.shift();
            cur.push(node.val);
            // 存放当前层下一层的节点
            if(node.left) queue.push(node.left);
           if(node.right) queue.push(node.right);
        &#125;
        //把每一层的结果放到结果数组
        res.push(cur);
    &#125;
    return res;
&#125;;
</code></pre>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS-自适应布局</title>
    <url>/2022/05/06/CSS-%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS-知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>JS-对象模式</title>
    <url>/2022/05/05/JS-%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="JavaScript对象模式"><a href="#JavaScript对象模式" class="headerlink" title="JavaScript对象模式"></a>JavaScript对象模式</h1><h2 id="1-工厂模式"><a href="#1-工厂模式" class="headerlink" title="1 工厂模式"></a>1 工厂模式</h2><blockquote>
<p>工厂模式：静态工厂方法，由一个工厂对象决定创建某一种产品对象类的实例。主要用来创建同一类对象。</p>
</blockquote>
<ul>
<li>将多个类封装在一个函数中，通过这个函数就可以创建我们需要的对象，这样开发者就不需要再关注这些对象到底依赖于哪个基类。这个函数我们称为工厂函数，这种模式叫做简单工厂模式。</li>
<li>作用<ul>
<li>可用于对不同的类进行实例化；</li>
<li>可创建相似对象；（把多个相似类的相似部分提取出来，不相似部分做针对性处理即可）。</li>
</ul>
</li>
</ul>
<h2 id="2-构造函数"><a href="#2-构造函数" class="headerlink" title="2 构造函数"></a>2 构造函数</h2><blockquote>
<p>构造函数：在JS种，用new关键字来调用的函数称为构造函数，其首字母一般要大写。</p>
</blockquote>
<ul>
<li><p>JS语言使用构造函数作为对象的模板：</p>
<ul>
<li>所谓构造函数，就是专门用来生成实例对象的函数。它就是对象的模板，描述实例对象的基本结构。</li>
</ul>
</li>
<li><p>构造函数的两个特点：</p>
<ul>
<li>函数体内使用了this关键字，代表了所要生成的对象实例（this指向new出来的对象）；</li>
<li>生成对象的时候，必须使用new关键字。</li>
</ul>
</li>
</ul>
<h2 id="3-原型模式"><a href="#3-原型模式" class="headerlink" title="3 原型模式"></a>3 原型模式</h2><blockquote>
<p><code>prototype属性</code>：这个属性包含一个<code>prototype对象</code>，所有实例对象<code>需要共享</code>的属性和方法放在 <code>prototype对象</code> 中，<code>不需要共享</code>的属性和方法的就放在<code>构造函数</code>中。</p>
</blockquote>
<ul>
<li>注意<ul>
<li>函数拥有prototype属性|方法；</li>
<li>共享的属性和方法放在prototype中，不共享的放在构造函数中；</li>
<li>new的缺点： 无法共享属性和方法。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">run</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;跑快点&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// person方法共享</span></span><br><span class="line"><span class="title class_">Fun</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">person</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;人具有的能力&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 写法2</span></span><br><span class="line"><span class="title class_">Fun</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    person : <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;人具有的能力&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="title class_">Fun</span>();</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="title class_">Fun</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o1.<span class="property">run</span> === o2.<span class="property">run</span> ); <span class="comment">// false 不共享</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o1.<span class="property">person</span> === o2.<span class="property">person</span>); <span class="comment">// true  共享</span></span><br></pre></td></tr></table></figure>


<h2 id="4-函数和对象关系"><a href="#4-函数和对象关系" class="headerlink" title="4 函数和对象关系"></a>4 函数和对象关系</h2><ul>
<li>函数有： <code>prototype</code></li>
<li>对象有： <code>__proto__</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过构造函数创建对象</span></span><br><span class="line">  <span class="keyword">var</span> obj =<span class="keyword">new</span> <span class="title class_">Fun</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Fun</span>.<span class="property"><span class="keyword">prototype</span></span> === obj.<span class="property">__proto__</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>原型与原型链</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj =<span class="keyword">new</span> <span class="title class_">Fun</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">__proto__</span>); </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    constructor: ƒ  </span></span><br><span class="line"><span class="comment">    [[Prototype]]: Object </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">__proto__</span>.<span class="property">__proto__</span>); </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    constructor: ƒ,</span></span><br><span class="line"><span class="comment">    __defineGetter__: ƒ, </span></span><br><span class="line"><span class="comment">    __defineSetter__: ƒ, </span></span><br><span class="line"><span class="comment">    hasOwnProperty: ƒ, </span></span><br><span class="line"><span class="comment">    __lookupGetter__: ƒ, </span></span><br><span class="line"><span class="comment">    …</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="5-new关键字"><a href="#5-new关键字" class="headerlink" title="5 new关键字"></a>5 new关键字</h2><ul>
<li>new操作符具体做了什么？<ul>
<li>1 创建了一个对象 new Object();</li>
<li>2 原型赋值【指向共同一个原型对象】; <code>对象.__proto__ = Fun.prototype</code></li>
<li>3 改变this指向。<code>Fun.call(obj)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS-知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>JS-深拷贝和浅拷贝</title>
    <url>/2022/05/07/JS-%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<h1 id="JS-深拷贝和浅拷贝"><a href="#JS-深拷贝和浅拷贝" class="headerlink" title="JS-深拷贝和浅拷贝"></a>JS-深拷贝和浅拷贝</h1><h2 id="1-浅拷贝"><a href="#1-浅拷贝" class="headerlink" title="1 浅拷贝"></a>1 浅拷贝</h2><blockquote>
<p>浅拷贝：只复制一层对象，当对象的属性是引用类型时，实质上复制的是其引用。当引用指向的值发生改变时，原对象的属性值也会跟着变化。</p>
</blockquote>
<ul>
<li>新旧对象：相互影响；</li>
<li>复制引用；</li>
<li>浅拷贝的实现<ul>
<li>引用类型对象的属性值发生变化时；</li>
<li>Object.assign();(es6新增)</li>
</ul>
</li>
</ul>
<h2 id="2-深拷贝"><a href="#2-深拷贝" class="headerlink" title="2 深拷贝"></a>2 深拷贝</h2><blockquote>
<p>深拷贝： 在拷贝的时候创建新的对象，并把原对象所有的属性都深拷贝到新对象。原属性如果是对象，也会重新创建新的对象并拷贝到新对象属性中。深拷贝旧对象和新对象是相互独立的。</p>
</blockquote>
<ul>
<li>新旧对象：互不影响。</li>
<li>深拷贝的实现<ul>
<li>JSON.parse() + JSON.stringify();</li>
<li>递归实现深拷贝</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 深拷贝方法封装</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: &#123;</span><br><span class="line">        <span class="attr">c</span>: <span class="string">&#x27;hhh&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> oCopy = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj == <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(k)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[k] == <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">                    <span class="comment">// 递归实现</span></span><br><span class="line">                    oCopy[k] = <span class="title function_">fun</span>(obj[k]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    oCopy[k] = obj[k];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> oCopy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> createObj = <span class="title function_">fun</span>(obj);</span><br><span class="line"><span class="comment">// console.log(obj, createObj);</span></span><br><span class="line"></span><br><span class="line">createObj.<span class="property">b</span>.<span class="property">c</span> = <span class="string">&#x27;123455&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj, createObj);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS-知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>JS-面试总结2</title>
    <url>/2022/05/07/JS-%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%932/</url>
    <content><![CDATA[<h1 id="JS-面试总结2"><a href="#JS-面试总结2" class="headerlink" title="JS-面试总结2"></a>JS-面试总结2</h1><h2 id="1-new操作符具体做了什么？"><a href="#1-new操作符具体做了什么？" class="headerlink" title="1 new操作符具体做了什么？"></a>1 new操作符具体做了什么？</h2><ul>
<li>1 创建了一个对象 new Object();</li>
<li>2 原型赋值【指向共同一个原型对象】; <code>对象.__proto__ = Fun.prototype</code></li>
<li>3 改变this指向。<code>Fun.call(obj)</code></li>
</ul>
<h2 id="2-封装一个对象深拷贝的方法"><a href="#2-封装一个对象深拷贝的方法" class="headerlink" title="2 封装一个对象深拷贝的方法"></a>2 封装一个对象深拷贝的方法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 深拷贝方法封装</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: &#123;</span><br><span class="line">        <span class="attr">c</span>: <span class="string">&#x27;hhh&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> oCopy = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj == <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(k)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[k] == <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">                    <span class="comment">// 递归实现</span></span><br><span class="line">                    oCopy[k] = <span class="title function_">fun</span>(obj[k]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    oCopy[k] = obj[k];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> oCopy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> createObj = <span class="title function_">fun</span>(obj);</span><br><span class="line"><span class="comment">// console.log(obj, createObj);</span></span><br><span class="line"></span><br><span class="line">createObj.<span class="property">b</span>.<span class="property">c</span> = <span class="string">&#x27;123455&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj, createObj);</span><br></pre></td></tr></table></figure>

<h2 id="3-合并数组的方法"><a href="#3-合并数组的方法" class="headerlink" title="3 合并数组的方法"></a>3 合并数组的方法</h2><h2 id="4-数组去重"><a href="#4-数组去重" class="headerlink" title="4 数组去重"></a>4 数组去重</h2><ul>
<li>ES6中的new Set();</li>
<li>filter</li>
<li>判断逻辑的形式</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>JS-ES6</title>
    <url>/2022/05/09/JS-ES6/</url>
    <content><![CDATA[<h2 id="1-let和set"><a href="#1-let和set" class="headerlink" title="1 let和set"></a>1 let和set</h2><h3 id="1-1-var"><a href="#1-1-var" class="headerlink" title="1.1 var"></a>1.1 var</h3><ul>
<li>声明提升（变量提升）</li>
<li>允许重复声明变量（变量覆盖）</li>
<li>函数作用域 （没有块级作用域）</li>
</ul>
<h3 id="1-2-let"><a href="#1-2-let" class="headerlink" title="1.2 let"></a>1.2 let</h3><ul>
<li>不允许重复声明；</li>
<li>不存在变量提升。暂时性死区：在一个作用域内，不允许同名变量进入；</li>
<li>块级作用域（es6中，一个{}就是一个块级作用域）</li>
</ul>
<h3 id="1-3-const"><a href="#1-3-const" class="headerlink" title="1.3 const"></a>1.3 const</h3><ul>
<li>const定义的变量不能修改，赋值后不允许再次更改；</li>
<li>不允许重复声明；</li>
<li>不存在变量提升；</li>
<li>const声明后必须赋值，否则报错；</li>
<li>支持块级作用域；</li>
<li>可以更改对象的属性的值（引用数据类型不能改地址）</li>
</ul>
<h2 id="2-闭包"><a href="#2-闭包" class="headerlink" title="2 闭包"></a>2 闭包</h2><ul>
<li><p>闭包：外部函数中声明内部函数，在内部函数中引用外部函数中定义的局部变量，此时外部函数执行完后变量会继续存在在内存中不会被释放。</p>
</li>
<li><p>eg： 有3个li，点击对应的li打印对应的序号。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;ul1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>001<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>0012<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>00123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 要求： 点击li输出对应的序号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> oUl1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ul1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> aLi = oUl1.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 方法1：点击li输出索引，使用自定义属性的方式响应式输出点击的值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// for (var i = 0; i &lt; aLi.length; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     aLi[i].index = i;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     aLi[i].onclick = function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         console.log(this.index);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        方法2：闭包</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        闭包：外部函数中声明内部函数,在内部函数中引用外部函数中定义的局部变量，此时外部函数执行完后变量会继续留在内存中，不会被释放。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// for (var i=0; i&lt;aLi.length;i++)&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     (function(index)&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         aLi[i].onclick = function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//             console.log(index);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     &#125;)(i);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 方法3：let实现-块级作用域</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; aLi.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        aLi[i].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 局部作用域内的变量提升</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> b = <span class="number">20</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(b);<span class="comment">//undefined:在局部作用域中定义了变量，所以会进行变量提升操作，等价于</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        var b;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        console.log(b);</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        b=200;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> b = <span class="number">200</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-解构赋值"><a href="#3-解构赋值" class="headerlink" title="3 解构赋值"></a>3 解构赋值</h2><ul>
<li><p>数组的解构赋值</p>
</li>
<li><p>对象的解构赋值</p>
</li>
<li><p>字符串的解构赋值</p>
</li>
<li><p>函数参数的解构赋值</p>
</li>
<li><p>给函数参数设置默认值</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组的解构赋值</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a0, a1, a2] = arr;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a0, a1, a2);<span class="comment">//1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a, b, c, d] = arr;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c, d);<span class="comment">//1 2 3 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [e, , f] = arr;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e, f);<span class="comment">//1 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象的解构赋值</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    age</span><br><span class="line">&#125; = obj;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, age);<span class="comment">//名称必须对应，顺序可以不一致</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串解构</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;abcde&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> [s0, s1, s2, s3, s4] = str;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s0, s1, s2, s3, s4);<span class="comment">//与数组一致</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数参数解构</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">[x, y, z]</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>([x, y, z]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给函数参数设置默认值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">m, n, u = <span class="number">666</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(m, n, u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn2</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> j = <span class="number">9</span>;</span><br><span class="line">[i, j] = [j, i];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i, j);</span><br></pre></td></tr></table></figure>

<h2 id="4-rest"><a href="#4-rest" class="headerlink" title="4 rest"></a>4 rest</h2><ul>
<li>作用：<ul>
<li>可以合并数组（与Array.concat()中作用相同）</li>
<li>可以拆分数组</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">x, y</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取所有实参</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">callee</span>);<span class="comment">//调用函数自身</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fn1</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">x, y, ...rest</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取剩下参数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(rest);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fn2</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> [a, b, c, d, e] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]];</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c, d, e);<span class="comment">// 1 2 3 [4,5] undefined</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="5-函数的扩展"><a href="#5-函数的扩展" class="headerlink" title="5 函数的扩展"></a>5 函数的扩展</h2><h3 id="5-1-箭头函数"><a href="#5-1-箭头函数" class="headerlink" title="5.1 箭头函数"></a>5.1 箭头函数</h3><blockquote>
<p>ES6 允许使用“箭头”（=&gt;）定义函数。</p>
</blockquote>
<ul>
<li>如果箭头函数只有一个参数，<code>()</code>可省略；</li>
<li>如果不加<code>&#123;&#125;</code>，默认有return。 </li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="keyword">const</span> fn3 = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn3</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn4</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun2</span> = v=&gt;v;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意（与普通函数的区别）<ul>
<li>箭头函数是不能new的；</li>
<li>内部不能使用arguments对象；</li>
<li>箭头函数的 this 指向:<ul>
<li>this指向的是定义时所在的对象，而不是使用时所在的对象；</li>
<li>箭头函数没有this，它的父作用域中的this是谁，那箭头函数的this就是谁，否者就是window。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="5-2-函数参数的默认值"><a href="#5-2-函数参数的默认值" class="headerlink" title="5.2 函数参数的默认值"></a>5.2 函数参数的默认值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 函数参数默认值的扩展</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">x = <span class="number">100</span>, y = <span class="number">200</span></span>) &#123;</span><br><span class="line">    <span class="comment">// body </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">x </span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = x || <span class="number">0</span> ;<span class="comment">// 原来的写法 </span></span><br><span class="line">    <span class="comment">// body </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-rest"><a href="#5-3-rest" class="headerlink" title="5.3 rest"></a>5.3 rest</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. rest</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">x, y, ...rest</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取剩下参数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(rest);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn2</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<h2 id="6-数组的扩展"><a href="#6-数组的扩展" class="headerlink" title="6 数组的扩展"></a>6 数组的扩展</h2><h3 id="6-1-类数组转化为数组-Array-from"><a href="#6-1-类数组转化为数组-Array-from" class="headerlink" title="6.1 类数组转化为数组 - Array.from()"></a>6.1 类数组转化为数组 - Array.from()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 类数组 转化为 数组</span></span><br><span class="line"><span class="keyword">let</span> aLi = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aLi);<span class="comment">// 类数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(aLi)); <span class="comment">// es6，转化成数组的形式</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...aLi]);</span><br><span class="line"><span class="keyword">let</span> json1 = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(json1));</span><br></pre></td></tr></table></figure>

<h3 id="6-2-find-和-findIndex"><a href="#6-2-find-和-findIndex" class="headerlink" title="6.2 find() 和 findIndex()"></a>6.2 find() 和 findIndex()</h3><ul>
<li><code>find() </code> :  查找，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined。</li>
<li> <code>findIndex()</code> ： 查找，用于找出第一个符合条件的数组成员。找到返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">value, index, arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].<span class="title function_">findIndex</span>(<span class="keyword">function</span>(<span class="params">value, index, arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h3 id="6-3-for…of遍历数组"><a href="#6-3-for…of遍历数组" class="headerlink" title="6.3 for…of遍历数组"></a>6.3 for…of遍历数组</h3><ul>
<li><code>entries()</code>，<code>keys()</code>和<code>values()</code>——用于遍历数组。它们都返回一个遍历器对象，可以用<code>for...of</code>循环进行遍历.</li>
<li>区别<ul>
<li><code>keys()</code>是对键名的遍历;</li>
<li><code>values()</code>是对键值的遍历;</li>
<li><code>entries()</code>是对键值对的遍历。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. 实例方法：entries()，keys() 和 values()</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].<span class="title function_">keys</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].<span class="title function_">values</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#x27;a&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, elem] <span class="keyword">of</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>].<span class="title function_">entries</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index, elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 &quot;a&quot;</span></span><br><span class="line"><span class="comment">// 1 &quot;b&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// foreach循环</span></span><br><span class="line"><span class="keyword">let</span> list = [&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">12</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;wangwu&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">14</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;liuneng&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">16</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhaoqi&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">13</span></span><br><span class="line">&#125;]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list);</span><br><span class="line">list.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">value, index, arr</span>) &#123;</span><br><span class="line">    value.<span class="property">age</span> += <span class="number">1</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list);</span><br></pre></td></tr></table></figure>

<h3 id="6-4-flat-扁平化数组"><a href="#6-4-flat-扁平化数组" class="headerlink" title="6.4 flat() - 扁平化数组"></a>6.4 flat() - 扁平化数组</h3><ul>
<li><code>flat()</code>: 用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数据没有影响。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]].<span class="title function_">flat</span>()</span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"><span class="comment">// 可以传递参数</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]].<span class="title function_">flat</span>(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 创建数组的方式 (2种)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> arr2 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">5</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> arr3 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr3);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 将一组值转换为数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>)); </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="7-对象的扩展"><a href="#7-对象的扩展" class="headerlink" title="7 对象的扩展"></a>7 对象的扩展</h2><h3 id="7-1-函数方法的简写"><a href="#7-1-函数方法的简写" class="headerlink" title="7.1 函数方法的简写"></a>7.1 函数方法的简写</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 简写</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;wangw&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">13</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">    <span class="comment">// 对象种的函数名称部分可简写</span></span><br><span class="line">    <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;eating&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-2-for…in对象的遍历"><a href="#7-2-for…in对象的遍历" class="headerlink" title="7.2 for…in对象的遍历"></a>7.2 for…in对象的遍历</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5. 对象的遍历 for...in </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> p <span class="keyword">in</span> obj5) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p);<span class="comment">//key</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj5[p]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj5));<span class="comment">//[&#x27;name&#x27;, &#x27;age&#x27;, &#x27;eat&#x27;, &#x27;sex999&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(obj5));<span class="comment">//[&#x27;wangw&#x27;, 13, ƒ, &#x27;nv&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(obj5));</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            0: (2) [&#x27;name&#x27;, &#x27;wangw&#x27;]</span></span><br><span class="line"><span class="comment">            1: (2) [&#x27;age&#x27;, 13]</span></span><br><span class="line"><span class="comment">            2: (2) [&#x27;eat&#x27;, ƒ]</span></span><br><span class="line"><span class="comment">            3: (2) [&#x27;sex999&#x27;, &#x27;nv&#x27;]</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> obj5);<span class="comment">// 判断某一属性是否在对象中</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ddd&#x27;</span> <span class="keyword">in</span> obj5);<span class="comment">// </span></span><br></pre></td></tr></table></figure>

<h3 id="7-3-对象新增方法"><a href="#7-3-对象新增方法" class="headerlink" title="7.3 对象新增方法"></a>7.3 对象新增方法</h3><h4 id="7-3-1-object-is"><a href="#7-3-1-object-is" class="headerlink" title="7.3.1 object.is()"></a>7.3.1 object.is()</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. object.is()返回的结果基本与===结果相同</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;11&#x27;</span> === <span class="number">11</span>);<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="string">&#x27;11&#x27;</span>, <span class="number">11</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="number">0</span> === -<span class="number">0</span>);<span class="comment">//true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(+<span class="number">0</span>, -<span class="number">0</span>));<span class="comment">//false 特例 </span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>);<span class="comment">//false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="title class_">NaN</span>));<span class="comment">//true 特例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象永远不可能相等</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(&#123;&#125;,&#123;&#125;));<span class="comment">//true 特例</span></span><br></pre></td></tr></table></figure>

<h4 id="7-3-2-Object-assign"><a href="#7-3-2-Object-assign" class="headerlink" title="7.3.2 Object.assign()"></a>7.3.2 Object.assign()</h4><blockquote>
<p><code>Object.assign()方法</code>用于<code>对象的合并</code>，将源对象（source）的所有可枚举属性，复制到目标对象（target）。</p>
</blockquote>
<ul>
<li>Object.assign()方法<ul>
<li>第一个参数是目标对象;</li>
<li>后面的参数都是源对象。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, source1, source2);</span><br><span class="line">target <span class="comment">// &#123;a:1, b:2, c:3&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 对象的合并 :浅拷贝</span></span><br><span class="line"><span class="keyword">let</span> obj4 = &#123; ...obj, ...obj2 &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj4);</span><br><span class="line"><span class="keyword">let</span> obj5 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(obj, obj2);<span class="comment">// 把obj2合并到了obj中去了，obj改变</span></span><br><span class="line"><span class="keyword">let</span> obj6 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj, obj2);<span class="comment">// 设置一个空对象，obj不再改变</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj5); </span><br></pre></td></tr></table></figure>

<h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 属性表达式</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> x = <span class="string">&#x27;sex&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> obj2 = &#123;</span></span><br><span class="line"><span class="language-javascript">        [x + <span class="number">999</span>]: <span class="string">&#x27;nv&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj2);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="8-set"><a href="#8-set" class="headerlink" title="8 set"></a>8 set</h2><blockquote>
<p>Set中没有重复的值，可以用来去重。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. Set: 它是类数组，没有数组的方法，不允许成员重复</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> arr1 =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> s1  = <span class="keyword">new</span> <span class="title class_">Set</span>(arr1);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s1);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> arr2 = [...s1];</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr2);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// add()  添加成员,有返回值（返回操作完了的set结构） </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="title function_">add</span>(<span class="number">10</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// delete() 删除成员，删除成功后返回true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="title function_">delete</span>(<span class="number">5</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// has(): 元素是否存在</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="title function_">has</span>(<span class="number">5</span>));</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="property">size</span>);<span class="comment">//大小</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(s1.clear());// 清空</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 遍历 for...of 索引和value是一样的</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> [index, value] <span class="keyword">of</span> s1.<span class="title function_">entries</span>())&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(index,value);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. Weakset : 只能以对象作为成员</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> w1 = <span class="keyword">new</span> <span class="title class_">WeakSet</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// w1.add(888); 报错  TypeError: Invalid value used in weak set </span></span></span><br><span class="line"><span class="language-javascript">    w1.<span class="title function_">add</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;lisi&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>:<span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(w1);  </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="9-map"><a href="#9-map" class="headerlink" title="9 map"></a>9 map</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Map</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> m1 = <span class="keyword">new</span> <span class="title class_">Map</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    m1.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>);<span class="comment">// 增加</span></span></span><br><span class="line"><span class="language-javascript">    m1.<span class="title function_">set</span>(<span class="string">&#x27;age&#x27;</span>, <span class="number">23</span>);</span></span><br><span class="line"><span class="language-javascript">    m1.<span class="title function_">set</span>(<span class="string">&#x27;num&#x27;</span>, <span class="number">123233</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(m1);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(m1.<span class="property">size</span>);<span class="comment">// 获取大小</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(m1.<span class="title function_">delete</span>(<span class="string">&#x27;name&#x27;</span>));<span class="comment">// 删除数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(m1.<span class="title function_">get</span>(<span class="string">&#x27;age&#x27;</span>));<span class="comment">// 获取值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(m1.clear()); // 清空</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 循环</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>( <span class="keyword">let</span> [index, value] <span class="keyword">of</span> m1.<span class="title function_">entries</span>())&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(index,value);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Weakmap :只能用对象作为 key</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> w1 = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span></span><br><span class="line"><span class="language-javascript">    w1.<span class="title function_">set</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">abc</span>:<span class="string">&#x27;deds&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">sex</span>:<span class="string">&#x27;1&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,<span class="string">&#x27;ddddd&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(w1);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="10-继承"><a href="#10-继承" class="headerlink" title="10 继承"></a>10 继承</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 原有的继承写法：</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义一个类</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27; is eating!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Lisi&#x27;</span>, <span class="number">23</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p1);</span></span><br><span class="line"><span class="language-javascript">    p1.<span class="title function_">eat</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 属性继承</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, age, school</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, age);<span class="comment">// 改变this指向</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">school</span> = school;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 方法继承</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Student</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">code</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27; is coding!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> s1 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;wangwu&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;ssss&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s1);</span></span><br><span class="line"><span class="language-javascript">    s1.<span class="title function_">code</span>();     </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="11-module"><a href="#11-module" class="headerlink" title="11 module"></a>11 module</h2><blockquote>
<p>引入 ： <code>import</code> 。import命令用于输入其他模块提供的功能。</p>
</blockquote>
<ul>
<li>全部引入: <code>import &#39;./xxxx&#39;</code></li>
<li>按需引入： <code>import &#123;b,c&#125; from &#39;./xxxx&#39;</code></li>
</ul>
<blockquote>
<p>导出(抛出)： <code>export</code>。export命令用于规定模块的对外接口。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抛出函数</span></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">export</span> f;</span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;f&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>export default</code>命令: 为模块指定默认输出。</p>
</blockquote>
<ul>
<li>export default命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此export default命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能唯一对应export default命令。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// export default输出类</span></span><br><span class="line"><span class="comment">// MyClass.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> &#123; ... &#125;</span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyClass</span> <span class="keyword">from</span> <span class="string">&#x27;MyClass&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> o = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br></pre></td></tr></table></figure>

<h2 id="12-promise"><a href="#12-promise" class="headerlink" title="12 promise"></a>12 promise</h2><blockquote>
<p>Promise是异步编程的一种解决方案 , 简单说就是一个容器，里面保存着某个未来才会结束的事件的结果。</p>
</blockquote>
<ul>
<li><p>同步： 只有前一个任务执行完毕，才能继续执行下一个任务。</p>
</li>
<li><p>异步： 不进入主线程，进入的是任务队列，只有任务队列通知主线程某个异步任务可以执行了，该任务才会进入主线程。 </p>
</li>
<li><p>Promise对象的特点：</p>
<ul>
<li>对象的状态不受外界影响。</li>
<li>一旦状态改变，就不会再变，任何时候都可以得到这个结果。</li>
</ul>
</li>
<li><p>Promise有哪几种状态？</p>
<ul>
<li>pending（进行中）</li>
<li>fulfilled（已成功）</li>
<li>rejected（已失败）</li>
</ul>
</li>
<li><p>Promise的构造函数是同步执行</p>
</li>
<li><p>.then()是异步执行的</p>
</li>
<li><p>提出的目的：为了解决“回调地域”等问题，提出了promise来解决以上问题。</p>
</li>
</ul>
<h2 id="13-class"><a href="#13-class" class="headerlink" title="13 class"></a>13 class</h2><blockquote>
<p>class关键字： 定义类。es6的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* ES6：继承的实现*/</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//  定义一个类</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">name</span> = name;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27; is eating &#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;lisi&#x27;</span>, <span class="number">23</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p1);</span></span><br><span class="line"><span class="language-javascript">    p1.<span class="title function_">eat</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 继承</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">constructor</span>(<span class="params">...param</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">super</span>(...param);<span class="comment">// 继承属性  取出的是数组的形式</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">school</span> = param[<span class="number">2</span>];</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">code</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27; is coding!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> s1 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;wang&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;xxx&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s1);</span></span><br><span class="line"><span class="language-javascript">    s1.<span class="title function_">eat</span>();</span></span><br><span class="line"><span class="language-javascript">    s1.<span class="title function_">code</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="14-async和await"><a href="#14-async和await" class="headerlink" title="14 async和await"></a>14 async和await</h2><blockquote>
<p>async函数：返回Promise，async函数的引入使得异步操作变得更加方便。它是 Generator 函数的语法糖。</p>
</blockquote>
<ul>
<li>使用<ul>
<li>一般是async和await配合使用，若单独使用会报错，若有await则必有async。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">request1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1 ok&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">resolve</span>();<span class="comment">//加resolve才能继续进行</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,<span class="number">1500</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> p;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">request2</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2 ok&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">resolve</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;,<span class="number">1500</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> p;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">request3</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3 ok&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">resolve</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;,<span class="number">1500</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> p;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 异步方法前加async ， 调用前加await</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span>  <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求1 开始&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">await</span> <span class="title function_">request1</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求2 开始&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">await</span> <span class="title function_">request2</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求3 开始&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">await</span> <span class="title function_">request3</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;都结束了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fn1</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="15-字符串扩展"><a href="#15-字符串扩展" class="headerlink" title="15 字符串扩展"></a>15 字符串扩展</h2><h3 id="15-1-模板字符串"><a href="#15-1-模板字符串" class="headerlink" title="15.1 模板字符串"></a>15.1 模板字符串</h3><blockquote>
<p>使用( `` )飘号。</p>
</blockquote>
<ul>
<li>使用：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> info = <span class="string">`我的名字是：<span class="subst">$&#123;person.username&#125;</span>, 性别：<span class="subst">$&#123;person.sex&#125;</span>, 今年<span class="subst">$&#123;person.age&#125;</span>岁了`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info);</span><br><span class="line"><span class="comment">//我的名字是Alex，性别：male，今年18岁了</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="15-2-新增方法"><a href="#15-2-新增方法" class="headerlink" title="15.2 新增方法"></a>15.2 新增方法</h3><h4 id="15-2-1-includes-方法"><a href="#15-2-1-includes-方法" class="headerlink" title="15.2.1 includes()方法"></a>15.2.1 includes()方法</h4><ul>
<li>返回布尔值，表示是否找到了参数字符串；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;Hello world!&#x27;</span>;</span><br><span class="line">s.<span class="title function_">startsWith</span>(<span class="string">&#x27;Hello&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">s.<span class="title function_">endsWith</span>(<span class="string">&#x27;!&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">s.<span class="title function_">includes</span>(<span class="string">&#x27;o&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h4 id="15-2-2-repeat-方法"><a href="#15-2-2-repeat-方法" class="headerlink" title="15.2.2 repeat() 方法"></a>15.2.2 repeat() 方法</h4><ul>
<li>返回一个新字符串，表示将原字符串重复n次。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;x&#x27;</span>.<span class="title function_">repeat</span>(<span class="number">3</span>) <span class="comment">// &quot;xxx&quot;</span></span><br><span class="line"><span class="string">&#x27;hello&#x27;</span>.<span class="title function_">repeat</span>(<span class="number">2</span>) <span class="comment">// &quot;hellohello&quot;</span></span><br><span class="line"><span class="string">&#x27;na&#x27;</span>.<span class="title function_">repeat</span>(<span class="number">0</span>) <span class="comment">// &quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="15-2-3-padStart-，padEnd"><a href="#15-2-3-padStart-，padEnd" class="headerlink" title="15.2.3 padStart()，padEnd()"></a>15.2.3 padStart()，padEnd()</h4><ul>
<li>如果某个字符串不够指定长度，会在头部或尾部补全。<code>padStart()</code>用于头部补全，<code>padEnd()</code>用于尾部补全。</li>
<li>使用场景： 可以给日期补0，变成01，02……</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;x&#x27;</span>.<span class="title function_">padStart</span>(<span class="number">5</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;ababx&#x27; 在日期对象处可能有用处</span></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.<span class="title function_">padStart</span>(<span class="number">4</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;abax&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.<span class="title function_">padEnd</span>(<span class="number">5</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;xabab&#x27;</span></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.<span class="title function_">padEnd</span>(<span class="number">4</span>, <span class="string">&#x27;ab&#x27;</span>) <span class="comment">// &#x27;xaba&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="15-2-4-trimStart-，trimEnd"><a href="#15-2-4-trimStart-，trimEnd" class="headerlink" title="15.2.4 trimStart()，trimEnd()"></a>15.2.4 trimStart()，trimEnd()</h4><ul>
<li><code>trim()</code> : 去除前后空格；</li>
<li><code>trimStart()</code> : 消除字符串头部的空格，返回的新字符串，不会修改原始字符串;</li>
<li><code>trimEnd()</code> : 消除尾部的空格, 回的新字符串，不会修改原始字符串。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="string">&#x27;  abc  &#x27;</span>; </span><br><span class="line">s.<span class="title function_">trim</span>() <span class="comment">// &quot;abc&quot;</span></span><br><span class="line">s.<span class="title function_">trimStart</span>() <span class="comment">// &quot;abc  &quot;</span></span><br><span class="line">s.<span class="title function_">trimEnd</span>() <span class="comment">// &quot;  abc&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="15-2-5-replaceAll"><a href="#15-2-5-replaceAll" class="headerlink" title="15.2.5 replaceAll()"></a>15.2.5 replaceAll()</h4><blockquote>
<p>replaceAll()方法，可以一次性替换所有匹配。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;aabbcc&#x27;</span>.<span class="title function_">replaceAll</span>(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;_&#x27;</span>)</span><br><span class="line"><span class="comment">// &#x27;aa__cc&#x27;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS-知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-Vuex</title>
    <url>/2022/05/13/Vue-Vuex/</url>
    <content><![CDATA[<h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><blockquote>
<p>Vuex： 状态管理（集中式存储管理应用的所有组件的状态）。</p>
</blockquote>
<h3 id="1-state"><a href="#1-state" class="headerlink" title="1 state"></a>1 state</h3><blockquote>
<p>用来放入数据。（类似于组件中的data）</p>
</blockquote>
<ul>
<li><p>数据获取方式1： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;about&quot;&gt;</span><br><span class="line">    &lt;h1&gt;This is an about page&lt;/h1&gt;</span><br><span class="line">        &lt;button @click=&quot;goF&quot;&gt;前进&lt;/button&gt;</span><br><span class="line">        &lt;!-- 使用 $store.state.xxx --&gt;</span><br><span class="line">        &lt;p&gt;Count:&#123;&#123;$store.state.count&#125;&#125;&lt;/p&gt;   </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">state</span>: &#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">num</span>:<span class="number">666</span></span><br><span class="line">&#125;, </span><br></pre></td></tr></table></figure></li>
<li><p>数据获取方式2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt; Vuex &lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">        &lt;p&gt;Count:&#123;&#123;count&#125;&#125;&lt;/p&gt; </span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapState &#125; from &quot;vuex&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    // 计算属性 另一种使用vuex中数据的方式</span><br><span class="line">    // 对state进行映射</span><br><span class="line">    computed: &#123;</span><br><span class="line">        ...mapState([&quot;count&quot;])  </span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-getters"><a href="#2-getters" class="headerlink" title="2 getters"></a>2 getters</h3><blockquote>
<p>getters可以认为是store的计算属性。（类似于组件中的computed）</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算属性</span></span><br><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line">  <span class="title function_">result</span>(<span class="params">state</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">count</span> * state.<span class="property">num</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapState , mapGetters&#125; from &quot;vuex&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    // 计算属性 另一种使用vuex中数据的方式</span><br><span class="line">    // 对state进行映射</span><br><span class="line">    computed: &#123;</span><br><span class="line">        ...mapState([&quot;count&quot;]),</span><br><span class="line">        ...mapGetters([&quot;result&quot;]),</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-mutations"><a href="#3-mutations" class="headerlink" title="3 mutations"></a>3 mutations</h3><blockquote>
<p>处理同步方法, 类似于组件中的methods.</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相当于methods 处理同步的方法</span></span><br><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">  <span class="comment">// 每次+1 要把state传入，因为要操作，所以必须传入</span></span><br><span class="line">  <span class="title function_">add</span>(<span class="params">state</span>)&#123;</span><br><span class="line">    state.<span class="property">count</span>++;</span><br><span class="line">    <span class="comment">// 如果不写state 可以直接写成this.state.count 这种方式 获取参数</span></span><br><span class="line">    <span class="comment">// this.state.count++; </span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 传参</span></span><br><span class="line">  <span class="title function_">addFun</span>(<span class="params">state,num</span>)&#123;</span><br><span class="line">    state.<span class="property">count</span> += num;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">reduce</span>(<span class="params">state</span>)&#123;</span><br><span class="line">    state.<span class="property">count</span>--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapState , mapMutations , mapGetters&#125; from &quot;vuex&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    // 计算属性 另一种使用vuex中数据的方式</span><br><span class="line">    // 对state进行映射</span><br><span class="line">    computed: &#123;</span><br><span class="line">        ...mapState([&quot;count&quot;]),</span><br><span class="line">        ...mapGetters([&quot;result&quot;]),</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        // 简便的调用方式 对mutations进行映射</span><br><span class="line">        ...mapMutations([&#x27;add&#x27;,&#x27;addFun&#x27;]) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="4-actions"><a href="#4-actions" class="headerlink" title="4 actions"></a>4 actions</h3><blockquote>
<p><code>Action</code>类似于<code>mutation</code>，<code>Action</code>提交的是<code>mutation</code>，而不是直接变更状态。<br><code>Action</code> <code>可以包含</code>任意异步操作, 可以处理异步方法。action更加容易调试。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理异步的方法</span></span><br><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">  <span class="comment">// 延迟1s后count减一</span></span><br><span class="line">  <span class="title function_">reduceFun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>( <span class="function">() =&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">commit</span>(<span class="string">&#x27;reduce&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 形参 ， </span></span><br><span class="line">  <span class="title function_">reduceFun1</span>(<span class="params">&#123;commit&#125;</span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>( <span class="function">() =&gt;</span>&#123;</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;reduce&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt; </span><br><span class="line">import &#123; mapState , mapMutations , mapActions , mapGetters&#125; from &quot;vuex&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    // 计算属性 另一种使用vuex中数据的方式</span><br><span class="line">    // 对state进行映射</span><br><span class="line">    computed: &#123;</span><br><span class="line">        ...mapState([&quot;count&quot;]),</span><br><span class="line">        ...mapGetters([&quot;result&quot;]),</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        // 简便的调用方式 对mutations进行映射</span><br><span class="line">        ...mapMutations([&#x27;add&#x27;,&#x27;addFun&#x27;]),</span><br><span class="line">        // 对actions进行映射</span><br><span class="line">        ...mapActions([&#x27;reduceFun&#x27;]),</span><br><span class="line">        add()&#123;</span><br><span class="line">            this.$store.commit(&#x27;add&#x27;);</span><br><span class="line">        &#125;,</span><br><span class="line">        // 有参传递</span><br><span class="line">        addNum(num)&#123;</span><br><span class="line">            this.$store.commit(&#x27;addFun&#x27;,num);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>mapState</code>和<code>mapGetters</code>写在<code>computed</code>中；</li>
<li><code>mapMutations</code>和<code>mapActions</code>写在<code>methods</code>中。</li>
</ul>
<h3 id="5-modules"><a href="#5-modules" class="headerlink" title="5 modules"></a>5 modules</h3><blockquote>
<p>Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: moduleA,</span><br><span class="line">    <span class="attr">b</span>: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.<span class="property">state</span>.<span class="property">a</span> <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.<span class="property">state</span>.<span class="property">b</span> <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure>

<h2 id="Vuex目录文件管理"><a href="#Vuex目录文件管理" class="headerlink" title="Vuex目录文件管理"></a>Vuex目录文件管理</h2><ul>
<li>分离store中index.js的结构  </li>
</ul>
<p><img src="Vuex%E7%9B%AE%E5%BD%95.png" alt="Vuex中store目录结构"><br><img src="Vuex目录2.png" width="50%" height="60%"> </p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-性能优化</title>
    <url>/2022/05/12/Vue-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="1-Object-freeze性能优化"><a href="#1-Object-freeze性能优化" class="headerlink" title="1 Object.freeze性能优化"></a>1 Object.freeze性能优化</h2><blockquote>
<p>对于纯展示的大数据时，可以使用Object.freeze提升性能。</p>
</blockquote>
<ul>
<li><p>Object.freeze() 方法可以冻结一个对象，冻结指的是不能向这个对象添加新的属性，不能修改其已有属性的值，不能删除已有属性，以及不能修改该对象已有属性的可枚举性、可配置性、可写性。该方法返回被冻结的对象。</p>
</li>
<li><p><a href="https://blog.csdn.net/muzidigbig/article/details/122121002">Vue性能提升之Object.freeze()</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-连接数据库</title>
    <url>/2022/05/10/Java-%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h2 id="1-使用JDBC连接数据库"><a href="#1-使用JDBC连接数据库" class="headerlink" title="1 使用JDBC连接数据库"></a>1 使用JDBC连接数据库</h2><ul>
<li>加载驱动程序；</li>
<li>连接数据库；</li>
<li>访问数据库；</li>
<li>执行查询；要用statement类的executeQuery()方法来下达select指令以查询数据库，executeQuery()方法会把数据库响应的查询结果存放在ResultSet类对象中供我们使用。即语句：ResultSet rs=s.executeQuery(sql); </li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-生命周期</title>
    <url>/2022/05/12/Vue-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h2 id="1-生命周期"><a href="#1-生命周期" class="headerlink" title="1 生命周期"></a>1 生命周期</h2><h3 id="1-1-是什么？"><a href="#1-1-是什么？" class="headerlink" title="1.1 是什么？"></a>1.1 是什么？</h3><blockquote>
<p>vue中每一个组件都是独立的，每一个组件都有自己的生命周期，从一个组件创建、数据初始化、挂载、更新和销毁。</p>
</blockquote>
<ul>
<li>接口数据请求写在：created()方法中。</li>
</ul>
<h3 id="1-2-有哪些？"><a href="#1-2-有哪些？" class="headerlink" title="1.2 有哪些？"></a>1.2 有哪些？</h3><h4 id="1-2-1-beforeCreate-和-created"><a href="#1-2-1-beforeCreate-和-created" class="headerlink" title="1.2.1 beforeCreate() 和 created()"></a>1.2.1 beforeCreate() 和 created()</h4><blockquote>
<p>vue实例初始化，以及事件初始化</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue实例初始化之后，以及事件初始化 实例创建之前调用</span></span><br><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--------1.beforeCreate--------&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;el&#x27;</span>,<span class="variable language_">this</span>.<span class="property">$el</span>);<span class="comment">//undefined</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data&#x27;</span>,<span class="variable language_">this</span>.<span class="property">$data</span>);<span class="comment">//undefined</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;innerHTML&#x27;</span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>).<span class="property">innerHTML</span>);<span class="comment">//  &lt;p&gt; &#123;&#123; count &#125;&#125; &lt;/p&gt; </span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    实例创建成功 </span></span><br><span class="line"><span class="comment">    在调用该方法前，初始化会被用到的状态包括：props、methods、data、computed、watch等。</span></span><br><span class="line"><span class="comment">    在这个阶段，会实现对data中属性的监听，也就是当data中的属性值发生变化时，视图也会发生变化。</span></span><br><span class="line"><span class="comment">    created：</span></span><br><span class="line"><span class="comment">        可以：所有状态都初始化完成，可以在该阶段发送异步ajax请求获取数据</span></span><br><span class="line"><span class="comment">        不可以：无法获取到对应的$el选项（无法获取到dom）</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="title function_">created</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--------2.Created--------&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;el&#x27;</span>,<span class="variable language_">this</span>.<span class="property">$el</span>);<span class="comment">//undefined</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data&#x27;</span>,<span class="variable language_">this</span>.<span class="property">$data</span>);<span class="comment">//count: 1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;innerHTML&#x27;</span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>).<span class="property">innerHTML</span>);<span class="comment">// &lt;p&gt; &#123;&#123; count &#125;&#125; &lt;/p&gt; </span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="1-2-2-beforeMount-和-mounted"><a href="#1-2-2-beforeMount-和-mounted" class="headerlink" title="1.2.2 beforeMount() 和 mounted()"></a>1.2.2 beforeMount() 和 mounted()</h4><blockquote>
<p>创建虚拟dom和真正的dom。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    虚拟dom已经创建完成，马上进行渲染</span></span><br><span class="line"><span class="comment">    在这里可以更改data中的数据，但是不会触发updated</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="title function_">beforeMount</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--------3.beforeMount--------&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;el&#x27;</span>,<span class="variable language_">this</span>.<span class="property">$el</span>);<span class="comment">// &#123;&#123; count &#125;&#125; </span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data&#x27;</span>,<span class="variable language_">this</span>.<span class="property">$data</span>);<span class="comment">//count: 1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;innerHTML&#x27;</span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>).<span class="property">innerHTML</span>); <span class="comment">// &lt;p&gt; &#123;&#123; count &#125;&#125; &lt;/p&gt; </span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    初始化阶段结束，真正的DOM已经创建，可以发送异步请求获取数据，也可以访问dom元素</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--------4.mounted--------&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;el&#x27;</span>,<span class="variable language_">this</span>.<span class="property">$el</span>); <span class="comment">//&lt;p&gt;  1 &lt;/p&gt; </span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data&#x27;</span>,<span class="variable language_">this</span>.<span class="property">$data</span>);<span class="comment">//count: 1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;innerHTML&#x27;</span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>).<span class="property">innerHTML</span>); <span class="comment">//&lt;p&gt;  1 &lt;/p&gt; </span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//  页面已完成全部渲染 - 完成状态 -mounted</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-3-beforeUpdate-和-updated"><a href="#1-2-3-beforeUpdate-和-updated" class="headerlink" title="1.2.3 beforeUpdate() 和 updated()"></a>1.2.3 beforeUpdate() 和 updated()</h4><blockquote>
<p>数据更新</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当data数据发生,执行5-6</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    更新前，可用于获取更新前各种状态数据</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="title function_">beforeUpdate</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--------5.beforeUpdate--------&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;el&#x27;</span>,<span class="variable language_">this</span>.<span class="property">$el</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data&#x27;</span>,<span class="variable language_">this</span>.<span class="property">$data</span>);                </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;innerHTML&#x27;</span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>).<span class="property">innerHTML</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    更新后执行该钩子函数，所有的状态数据都是最新的</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="title function_">updated</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--------6.updated--------&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;el&#x27;</span>,<span class="variable language_">this</span>.<span class="property">$el</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data&#x27;</span>,<span class="variable language_">this</span>.<span class="property">$data</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;innerHTML&#x27;</span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>).<span class="property">innerHTML</span>); </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="1-2-4-beforeDestroy-和-destroyed"><a href="#1-2-4-beforeDestroy-和-destroyed" class="headerlink" title="1.2.4 beforeDestroy() 和 destroyed()"></a>1.2.4 beforeDestroy() 和 destroyed()</h4><blockquote>
<p>组件销毁</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 销毁时进行7-8 */</span> </span><br><span class="line"><span class="comment">// 在Vue实例销毁之前调用，此时实例仍然可用</span></span><br><span class="line"><span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--------7.beforeDestroy--------&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;el&#x27;</span>,<span class="variable language_">this</span>.<span class="property">$el</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data&#x27;</span>,<span class="variable language_">this</span>.<span class="property">$data</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;innerHTML&#x27;</span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>).<span class="property">innerHTML</span>); </span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    组件已经销毁，事件监听器被移除， 所有的子实例也会被销毁</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="title function_">destroyed</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--------8.destroyed--------&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;el&#x27;</span>,<span class="variable language_">this</span>.<span class="property">$el</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data&#x27;</span>,<span class="variable language_">this</span>.<span class="property">$data</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;innerHTML&#x27;</span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app&#x27;</span>).<span class="property">innerHTML</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-组件</title>
    <url>/2022/05/10/Vue-%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="1-什么是组件"><a href="#1-什么是组件" class="headerlink" title="1 什么是组件"></a>1 什么是组件</h2><h3 id="1-1-组件"><a href="#1-1-组件" class="headerlink" title="1.1 组件"></a>1.1 组件</h3><blockquote>
<p>组件： 组件就是把一个较大的网页进行功能模块的拆分，形成一个个的组成部分。组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可抽象为一个组件树。</p>
</blockquote>
<h3 id="1-2-组件的使用"><a href="#1-2-组件的使用" class="headerlink" title="1.2 组件的使用"></a>1.2 组件的使用</h3><ol>
<li>定义子组件</li>
<li>在父组件中引入子组件，并注册组件</li>
</ol>
<h2 id="2-组件的参数传递"><a href="#2-组件的参数传递" class="headerlink" title="2 组件的参数传递"></a>2 组件的参数传递</h2><h3 id="2-1-父传子"><a href="#2-1-父传子" class="headerlink" title="2.1 父传子"></a>2.1 父传子</h3><blockquote>
<p>父组件绑定数据，子组件通过<code>prors参数</code>接收。</p>
</blockquote>
<ul>
<li><p>父组件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;my-Component :message=&quot;msg&quot;&gt;&lt;/my-Component&gt; </span><br></pre></td></tr></table></figure></li>
<li><p>子组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  父组件向子组件通信msg，通过props来传递</span></span><br><span class="line">    <span class="string">&#x27;myComponent&#x27;</span>:&#123;</span><br><span class="line">        <span class="attr">template</span>:tpl,</span><br><span class="line">        <span class="comment">// props：用来接收父组件要传递给子组件的内容</span></span><br><span class="line">        <span class="attr">props</span>:[<span class="string">&#x27;message&#x27;</span>,<span class="string">&#x27;fn1&#x27;</span>],  <span class="comment">// 数组形式</span></span><br><span class="line">        <span class="comment">// props还可以是对象形式：</span></span><br><span class="line">        <span class="attr">props</span>: &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="title class_">String</span>,</span><br><span class="line">            <span class="attr">likes</span>: <span class="title class_">Number</span>,</span><br><span class="line">            <span class="attr">isPublished</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">            <span class="attr">commentIds</span>: <span class="title class_">Array</span>,</span><br><span class="line">            <span class="attr">author</span>: <span class="title class_">Object</span>,</span><br><span class="line">            <span class="attr">callback</span>: <span class="title class_">Function</span>,</span><br><span class="line">            <span class="attr">contactsPromise</span>: <span class="title class_">Promise</span> <span class="comment">// or any other constructor</span></span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-2-子传父"><a href="#2-2-子传父" class="headerlink" title="2.2 子传父"></a>2.2 子传父</h3><blockquote>
<p>子组件给父组件传递参数：使用自定义事件，使用<code>$emit</code>。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;counter-event-example&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; total &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter</span> <span class="attr">v-on:increment</span>=<span class="string">&quot;incrementTotal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button-counter</span> <span class="attr">v-on:increment</span>=<span class="string">&quot;incrementTotal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;button-counter&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">&#x27;&lt;button v-on:click=&quot;incrementHandler&quot;&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">counter</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">incrementHandler</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">counter</span> += <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$emit(<span class="string">&#x27;increment&#x27;</span>) <span class="comment">//子组件自定义事件</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#counter-event-example&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">total</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">incrementTotal</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">total</span> += <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-兄弟组件传值"><a href="#2-3-兄弟组件传值" class="headerlink" title="2.3 兄弟组件传值"></a>2.3 兄弟组件传值</h3><blockquote>
<p>兄弟组件传值： bus总线传值。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bus.js  - 用于暴露一个vue实例</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vue</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 兄弟A 传值</span></span><br><span class="line"><span class="keyword">import</span> bus <span class="keyword">from</span> <span class="string">&#x27;路径&#x27;</span></span><br><span class="line">bus.$emit(<span class="string">&#x27;自定义事件名称&#x27;</span>,输出数据)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 兄弟B 接值</span></span><br><span class="line"><span class="keyword">import</span> bus <span class="keyword">from</span> <span class="string">&#x27;路径&#x27;</span></span><br><span class="line">bus.<span class="title function_">on</span>(<span class="string">&#x27;自定义事件名&#x27;</span>,<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://blog.csdn.net/mrsun_web/article/details/119999413">兄弟组件传值实例</a></li>
</ul>
<h2 id="3-组件内样式局部化-scoped"><a href="#3-组件内样式局部化-scoped" class="headerlink" title="3 组件内样式局部化 -scoped"></a>3 组件内样式局部化 -scoped</h2><h3 id="3-1-作用"><a href="#3-1-作用" class="headerlink" title="3.1 作用"></a>3.1 作用</h3><blockquote>
<p>scoped属性的作用： 是加上该属性会使得样式只对当前的组件有用。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加“ scoped”属性以将CSS限制在此组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h3</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">40px</span> <span class="number">0</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">list-style-type</span>: none;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#42b983</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-原理"><a href="#3-2-原理" class="headerlink" title="3.2 原理"></a>3.2 原理</h3><blockquote>
<p>使用scoped属性： 就会在节点上添加自定义属性（data-v-xxxx），然后css根据属性选择器添加样式。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .example&#123;</span><br><span class="line">        color:red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;scoped测试案例&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.<span class="property">example</span>[data-v-5558831a] &#123;</span><br><span class="line">  <span class="attr">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;example&quot;</span> <span class="attr">data-v-5558831a</span>&gt;</span>scoped测试案例<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-面试题1</title>
    <url>/2022/05/10/Vue-%E9%9D%A2%E8%AF%95%E9%A2%981/</url>
    <content><![CDATA[<h2 id="1-简述在Vue-js中使用插件的步骤"><a href="#1-简述在Vue-js中使用插件的步骤" class="headerlink" title="1 简述在Vue.js中使用插件的步骤"></a>1 简述在Vue.js中使用插件的步骤</h2><ul>
<li>使用插件的步骤<ul>
<li>下载( 使用 npm install)  </li>
<li>引入<ul>
<li>全局引入（在main.js）</li>
<li>按需引入（局部引入）</li>
</ul>
</li>
<li>配置（看文档）</li>
</ul>
</li>
</ul>
<h2 id="2-Vue-js中引入组件有几种方式？简述步骤"><a href="#2-Vue-js中引入组件有几种方式？简述步骤" class="headerlink" title="2 Vue.js中引入组件有几种方式？简述步骤"></a>2 Vue.js中引入组件有几种方式？简述步骤</h2><h2 id="3-vue数据双向绑定的原理"><a href="#3-vue数据双向绑定的原理" class="headerlink" title="3 vue数据双向绑定的原理"></a>3 vue数据双向绑定的原理</h2><blockquote>
<p>vue数据双向绑定是通过<code>v-model</code>来实现的。<br>双向数据绑定是通过<code>数据劫持</code>结合<code>发布订阅者模式</code>的方式来实现的，通过 <code>Object.defineProperty()</code> 来劫持各个属性的<code>setter</code>和<code>getter</code>，在数据发生变化时，发布消息给订阅者，触发相应的监听回调来渲染视图。</p>
</blockquote>
<ul>
<li>原理：<ul>
<li><code>Object.defineProperty(obj, prop, descriptor)方法</code>，接收三个参数:<ul>
<li>obj（定义其上属性的对象）</li>
<li>prop（定义或修改的属性）</li>
<li>descriptor（具体的改变方法）就是用这个方法来定义一个值，当调用时我们使用了它里面的get方法，当我们给这个属性赋值时，又用到了它里面的set方法。</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Book</span> = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Book</span>, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    name = value;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你取了一个书名叫做&#x27;</span> + value);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;《&#x27;</span> + name + <span class="string">&#x27;》&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="title class_">Book</span>.<span class="property">name</span> = <span class="string">&#x27;vue权威指南&#x27;</span>;  <span class="comment">// 你取了一个书名叫做vue权威指南</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Book</span>.<span class="property">name</span>);  <span class="comment">// 《vue权威指南》</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML-移动端开发</title>
    <url>/2022/05/16/HTML-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="1-zepto"><a href="#1-zepto" class="headerlink" title="1 zepto"></a>1 zepto</h2><blockquote>
<p>Zepto是一个轻量级的、针对现代高级浏览器的JavaScript工具库，它兼容jQuery的API,主要用在移动端。</p>
</blockquote>
<ul>
<li><p>与jQuery对比：</p>
<ul>
<li>相同点： api相差无几；</li>
<li>不同点：<ul>
<li>jQuery更多是在PC端被应用，因此，考虑了很多低级浏览器的的兼容性问题；而Zepto.js则是直接抛弃了低级浏览器的适配问题，显得很轻盈；</li>
<li>Zepto.js在移动端被运用的更加广泛；更注重在移动端的使用</li>
<li>jQuery的底层是通过DOM来实现效果的，zepto.js 是用css3来实现的；</li>
</ul>
</li>
</ul>
</li>
<li><p>注意</p>
<ul>
<li>在移动端页面使用click事件会有300毫秒的延迟。</li>
</ul>
</li>
<li><p>差异：</p>
<ul>
<li><p>1.针对移动端程序，Zepto有一些基本的触摸事件可以用来做触摸屏交互（tap事件、swipe事件），Zepto是不支持IE浏览器的；</p>
</li>
<li><p>2.Dom操作的区别：添加id时jQuery不会生效而Zepto会生效;</p>
</li>
<li><p>3.事件触发的区别：使用 jQuery 时 load 事件的处理函数不会执行；使用 Zepto 时 load 事件的处理函数会执行;</p>
</li>
<li><p>4.事件委托的差异</p>
<ul>
<li>在Zepto中，当a被点击后，依次弹出了内容为”a事件“和”b事件“，说明虽然事件委托在.a上可是却也触发了.b上的委托。但是在 jQuery 中只会触发.a上面的委托弹出”a事件“。</li>
<li>Zepto中，document上所有的click委托事件都依次放入到一个队列中，点击的时候先看当前元素是不是.a，符合则执行，然后查看是不是.b，符合则执行。</li>
<li>在jQuery中，document上委托了2个click事件，点击后通过选择符进行匹配，执行相应元素的委托事件。</li>
</ul>
</li>
<li><p>5.width()和height()的区别：Zepto由盒模型(box-sizing)决定，用.width()返回赋值的width，用.css(‘width’)返回加border等的结果；jQuery会忽略盒模型，始终返回内容区域的宽/高(不包含padding、border);</p>
</li>
<li><p>6.offset()的区别：Zepto返回{top,left,width,height}；jQuery返回{width,height};</p>
</li>
<li><p>7.Zepto无法获取隐藏元素宽高，jQuery 可以;</p>
</li>
<li><p>8.Zepto中没有为原型定义extend方法而jQuery有;</p>
</li>
<li><p>9.Zepto 的each 方法只能遍历 数组，不能遍历JSON对象;</p>
</li>
<li><p>10.Zepto在操作dom的selected和checked属性时尽量使用prop方法，在读取属性值的情况下优先于attr。Zepto获取select元素的选中option不能用类似jQuery的方法$(‘option[selected]’),因为selected属性不是css的标准属性。应该使用$(‘option’).not(function(){ return !this.selected })。</p>
</li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/XUELUO123456789/article/details/90453193">Zepto的使用</a></p>
</li>
<li><p><a href="https://zeptojs.bootcss.com/">Zepto官网</a></p>
</li>
</ul>
<h2 id="2-iscroll-滚动条插件"><a href="#2-iscroll-滚动条插件" class="headerlink" title="2 iscroll - 滚动条插件"></a>2 iscroll - 滚动条插件</h2><blockquote>
<p>iScrol l是一个高性能，资源占用少，无依赖，多平台的javascript滚动插件。</p>
</blockquote>
<ul>
<li>使用方法<ul>
<li>必须使用 三层结构 （滚动列表容器 -&gt; 数据容器 -&gt; 数据项 ），比如：<ul>
<li>div -&gt; ul -&gt; li</li>
<li>div -&gt; div -&gt;div</li>
</ul>
</li>
<li>至少设置 滚动列表容器 样式表 两个样式<ul>
<li>overflow:hidden; - 隐藏默认滚动条</li>
<li>position:relative; - 必须为 滚动条 父容器设置定位</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span><span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=no&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">header</span>, <span class="selector-tag">footer</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">section</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex</span>:<span class="number">1</span>; </span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 给父容器加属性 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        &#125; </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>上海分阶段复商复市 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>四川邻水一周现499例感染者 已外溢<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>俄军在乌每天消耗61亿元人民币<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>粮食是国之大者咱们一起端稳热<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>央媒：“井盖吃人”顽疾必须治 <span class="tag">&lt;/<span class="name">li</span>&gt;</span>                </span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>上海分阶段复商复市 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>四川邻水一周现499例感染者 已外溢<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>俄军在乌每天消耗61亿元人民币<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>粮食是国之大者咱们一起端稳热<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>央媒：“井盖吃人”顽疾必须治 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">footer</span>&gt;</span>底部<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./zepto.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./touch.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./iscroll.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">IScroll</span>(<span class="string">&#x27;#wrapper&#x27;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">mouseWheel</span>: <span class="literal">true</span>, <span class="comment">// 鼠标滚轮控制 </span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">scrollbars</span>: <span class="literal">true</span>,  <span class="comment">//滚动条的显示</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fadeScrollbars</span>: <span class="literal">true</span>, <span class="comment">// 滚动条淡入淡出的效果</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">bounce</span>: <span class="literal">false</span>, <span class="comment">// 滚动到达容器边界是否执行反弹动画，默认为true</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">click</span>: <span class="literal">true</span>, <span class="comment">//iscroll禁止默认鼠标的点击行为，如果要使用设置为true，默认为false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://www.jianshu.com/p/2259b6e30e62">iscroll使用方法</a></li>
<li><a href="http://caibaojian.com/iscroll-5/gettingstart.html">iscroll官网</a></li>
</ul>
<h2 id="3-Swiper"><a href="#3-Swiper" class="headerlink" title="3 Swiper"></a>3 Swiper</h2><blockquote>
<p>Swiper常用于移动端网站的内容触摸滑动，是纯javascript打造的滑动特效插件，面向手机、平板电脑等移动终端，可以实现触屏焦点图、触屏Tab切换、触屏轮播图切换等常用效果。</p>
</blockquote>
<ul>
<li><a href="https://www.swiper.com.cn/api/index.html">API使用手册</a></li>
<li><a href="https://blog.csdn.net/m0_46374969/article/details/118599004">Swiper插件的基本使用方法和案例</a></li>
</ul>
<h2 id="4-图片懒加载"><a href="#4-图片懒加载" class="headerlink" title="4 图片懒加载"></a>4 图片懒加载</h2><blockquote>
<p>移动端图片演示加载插件：echo.js </p>
</blockquote>
<ul>
<li><a href="https://github.com/toddmotto/echo">Echo插件下载地址及使用方法</a></li>
<li><a href="https://blog.csdn.net/alokka/article/details/74421347">图片懒加载方法整理</a></li>
</ul>
<ul>
<li>移动meta标签：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span><span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=no&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>HTML、CSS</category>
      </categories>
      <tags>
        <tag>HTML-知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>JS-fetch和fetch-mock</title>
    <url>/2022/05/15/JS-fetch%E5%92%8Cfetch-mock/</url>
    <content><![CDATA[<h2 id="1-fetch"><a href="#1-fetch" class="headerlink" title="1 fetch"></a>1 fetch</h2><blockquote>
<p>window对象下就有fetch。类似$.ajax、axios。fetch是基于promise设计的<br>格式。<br>fetch是一种可代替 ajax 获取/提交数据的技术，有些高级浏览器已经可以window.fetch使用了。相比于使用 jQuery.ajax 它轻量（只做这一件事），而且它原生支持 promise ，更加符合现在编程习惯。</p>
</blockquote>
<ul>
<li>用于请求数据。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fetch返回的是promise对象</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;路径&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;GET|POST&quot;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="comment">// 给后端传递的参数</span></span><br><span class="line">        <span class="attr">user</span>: user.<span class="property">value</span>,</span><br><span class="line">        <span class="attr">pwd</span>: pwd.<span class="property">value</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>(); <span class="comment">// 把数据转换成对象的格式</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>对获得的数据解析：可以使用async和await。</li>
</ul>
<h2 id="2-fetch-mock"><a href="#2-fetch-mock" class="headerlink" title="2 fetch-mock"></a>2 fetch-mock</h2><blockquote>
<p>前端开发中需要去调用后端的接口，如果后端还没有ready，为了不block开发进程，前端就需要自行mock数据。(前端自己模拟数据)</p>
</blockquote>
<ul>
<li>使用<ul>
<li>下载</li>
<li>引入模块 <code>import fetchMock from &#39;fetch-mock&#39;;</code></li>
<li>基本格式 <code>fetchMock.mock(&#39;url&#39;, 函数 )</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS-知识点</tag>
      </tags>
  </entry>
</search>
