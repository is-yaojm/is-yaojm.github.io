<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小姚同学今天学习了吗</title>
  
  
  <link href="http://is-yaojm.github.io/atom.xml" rel="self"/>
  
  <link href="http://is-yaojm.github.io/"/>
  <updated>2022-05-05T08:00:43.205Z</updated>
  <id>http://is-yaojm.github.io/</id>
  
  <author>
    <name>Yaojm</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS-作用域</title>
    <link href="http://is-yaojm.github.io/2022/05/04/JS-%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://is-yaojm.github.io/2022/05/04/JS-%E4%BD%9C%E7%94%A8%E5%9F%9F/</id>
    <published>2022-05-04T11:37:24.000Z</published>
    <updated>2022-05-05T08:00:43.205Z</updated>
    
    <content type="html"><![CDATA[<h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><h2 id="1-作用域常见类型"><a href="#1-作用域常见类型" class="headerlink" title="1 作用域常见类型"></a>1 作用域常见类型</h2><blockquote><p>全局作用域</p></blockquote><ul><li>全局作用域在一面打开时被创建，页面关闭时被销毁。</li><li>写在script标签中的变量和函数，作用域为全局，在页面的任意位置都可以访问到。</li><li>在全局作用域中有全局对象window，由浏览器创建，可以直接调用。</li><li>全局作用域中声明的变量和函数会作为window对象的属性和方法保存。</li></ul><blockquote><p>函数作用域</p></blockquote><ul><li>调用函数时被创建，执行完毕被销毁。</li><li>每调用一次函数就会创建一个新的函数作用域，他们之间相互独立。</li><li>函数作用域可以访问到全局作用域的变量，在函数外无法访问到函数作用域内的变量。</li><li>在函数作用域中访问变量、函数时，会现在自身作用域中寻找，若没找到，则会到上一级寻找， 一直到全局作用域。</li></ul><p>注意：</p><ul><li>JS没有块级作用域，但是可以模拟块级作用域。</li><li>不是有<code>&#123;&#125;</code>就是作用域。</li></ul><h2 id="2-作用域的深层次理解"><a href="#2-作用域的深层次理解" class="headerlink" title="2 作用域的深层次理解"></a>2 作用域的深层次理解</h2><ul><li><p>执行期的上下文</p><ul><li>当函数代码执行的前期会创建一个执行期上下文的内部对象(<code>AO</code>)(局部作用域)；</li><li>这个内部对象是在预编译的时候创建出来的，因为当函数被调用的时候，会先进行预编译；</li><li>在全局代码执行的前期会创建一个执行期的上下文的对象<code>GO</code>(全局作用域)。</li></ul></li><li><p>作用域链</p><ul><li>作用域链会被保存到一个隐式的属性中[[scope]]。这个属性是用户无法访问的，但是JS引擎将会访问它，这里面存储的是作用域链。</li><li>从内部向外链接。作用域链从当前作用域开始找，如果找不到则向外作用域找，找到返回，找不到报错。</li><li>从内部逐级向上查找。</li><li><code>AO</code>和<code>GO</code>的集合</li></ul></li></ul><ul><li><p>变量提升（悬挂变量声明）</p><ul><li>JS提升所有变量声明（var，函数），将他们移到其作用域的开头</li><li>eg:<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var变量提升 JS不存在块级作用域</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// undefined</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>( <span class="literal">false</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> x = <span class="number">1</span> ; </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// undefined</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>执行顺序、优先级</p><ul><li><code>变量</code> &gt; <code>函数</code> &gt; <code>参数</code> &gt; <code>变量提升</code></li></ul></li></ul><h2 id="3-面试题"><a href="#3-面试题" class="headerlink" title="3 面试题"></a>3 面试题</h2><ul><li><p>eg1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// var str  变量提升</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str);<span class="comment">// undefined</span></span><br><span class="line">    <span class="keyword">var</span> str =<span class="string">&#x27;234&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>eg2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str1); <span class="comment">// 报错 未定义</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">str1</span> =<span class="string">&#x27;2343&#x27;</span>; <span class="comment">// 全局变量 没有进行变量提升 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>();</span><br></pre></td></tr></table></figure></li><li><p>eg3:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">str2</span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">str2</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str2);<span class="comment">// f str2()&#123; return &#x27;2&#x27;; &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn2</span>(<span class="string">&#x27;222&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params">str3</span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">str3</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> str3 =<span class="string">&#x27;999&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str3);<span class="comment">// 999</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn3</span>(<span class="string">&#x27;23332&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;作用域&quot;&gt;&lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域&quot;&gt;&lt;/a&gt;作用域&lt;/h1&gt;&lt;h2 id=&quot;1-作用域常见类型&quot;&gt;&lt;a href=&quot;#1-作用域常见类型&quot; class=&quot;headerlink&quot; title=&quot;1 作</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://is-yaojm.github.io/categories/JavaScript/"/>
    
    
    <category term="知识点" scheme="http://is-yaojm.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>JS书写规范</title>
    <link href="http://is-yaojm.github.io/2022/05/01/JS%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/"/>
    <id>http://is-yaojm.github.io/2022/05/01/JS%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/</id>
    <published>2022-05-01T09:48:06.000Z</published>
    <updated>2022-05-01T10:29:14.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript开发规范"><a href="#JavaScript开发规范" class="headerlink" title="JavaScript开发规范"></a>JavaScript开发规范</h1><h2 id="1-基本准则"><a href="#1-基本准则" class="headerlink" title="1 基本准则"></a>1 基本准则</h2><ul><li><p>    符合web标准，结构表现行为分离，兼容性优良。页面性能方面，代码要求简洁明了有序， 尽可能的减小服务器负载，保证最快的解析速度；</p></li><li><p>    项目的维护和二次开发可能是直接或间接的团队合作，所以创建易维护的代码是一个项目成功与否的关键，易维护的代码意味着具有如下特性；</p></li><li><p>    阅读性好：如良好的注释和命名规范，有文档；</p></li><li><p>    具有一致性：看起来如同一个人编写；</p></li><li><p>    代码的松耦合，高度模块化：将页面内的元素视为一个个模块，相互独立，尽量避免耦合过高的代码，从html,css,js三个层面都要考虑模块化；</p></li><li><p>    严格按照规范编写代码。</p></li></ul><h2 id="2-命名规范"><a href="#2-命名规范" class="headerlink" title="2 命名规范"></a>2 命名规范</h2><table><thead><tr><th>JavaScript变量起名类型</th><th>变量命名前缀</th><th>举例</th></tr></thead><tbody><tr><td><code>Array 数组</code></td><td>a</td><td>aList，aGroup</td></tr><tr><td><code>Boolean 逻辑</code></td><td>b</td><td>bChecked，bHasLogin</td></tr><tr><td><code>Function 函数</code></td><td>f</td><td>fGetHtml，fInit</td></tr><tr><td><code>Integer 数字</code></td><td>n</td><td>nPage，nTotal</td></tr><tr><td><code>Object 对象</code></td><td>o</td><td>oButton，oDate</td></tr><tr><td><code>Regular Expression 正则</code></td><td>r</td><td>rDomain，rEmail</td></tr><tr><td><code>String 字符</code></td><td>s</td><td>sName，sHtml</td></tr></tbody></table><ul><li>特殊情况<ul><li><p>作用域不大临时变量可以简写，比如：str，num，bol，obj，fun，arr。</p></li><li><p>循环变量可以简写，比如：i，j，k等。</p></li><li><p>某些作为不允许修改值的变量认为是常量，全部字母都大写。例如：COPYRIGHT，PI。常量可以存在于函数中，也可以存在于全局。必须采用全大写的命名，且单词以_分割，常量通常用于ajax请求url，和一些不会改变的数据。</p></li></ul></li></ul><blockquote><p>函数命名</p></blockquote><ol><li><p>普通函数：首字母小写，驼峰式命名，统一使用动词或者动词+名词形式。例如：<code>fnGetVersion()</code>，<code>fnSubmitForm()</code>，<code>fnInit()</code>。</p></li><li><p>内部函数：使用 <code>_fn + 动词 + 名词形式</code> ，内部函数必需在函数最后定义。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fnGetNumber</span>(<span class="params">nTotal</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nTotal &lt; <span class="number">100</span>) &#123;</span><br><span class="line">        nTotal = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">_fnAdd</span>(nTotal);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_fnAdd</span>(<span class="params">nNumber</span>) &#123;</span><br><span class="line">        nNumber++;</span><br><span class="line">        <span class="keyword">return</span> nNumber;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(<span class="title function_">fGetNumber</span>(<span class="number">10</span>)); <span class="comment">//alert 101</span></span><br></pre></td></tr></table></figure></li><li><p>对象方法与事件响应函数：对象方法命名使用<code>fn对象类名 + 动词 + 名词形式</code>；例如： <code>fnAddressGetEmail()</code>.</p></li><li><p>事件响应函数：<code>fn + 触发事件对象名 + 事件名或者模块名</code>。例如：<code>fnDivClick()</code>，<code>fnAddressSubmitButtonClick()</code>.</p></li></ol><h2 id="3-其他"><a href="#3-其他" class="headerlink" title="3 其他"></a>3 其他</h2><ul><li><p>引号的使用，单引号<code>&#39; &#39;</code>优先（如果不是引号嵌套，不要使用双引号） .</p></li><li><p>注释</p><ul><li><p>公共组件维护者和各栏目WD都需要在文件头部加上注释说明：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*文件用途说明</span></span><br><span class="line"><span class="comment">*作者姓名、联系方式</span></span><br><span class="line"><span class="comment">*制作日期</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure></li><li><p>大的模块注释方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//================</span></span><br><span class="line"><span class="comment">// 代码用途</span></span><br><span class="line"><span class="comment">//================</span></span><br></pre></td></tr></table></figure></li><li><p>小的注释：<code>//代码说明</code></p></li><li><p>注释单独一行，不要在代码后的同一行内加注释。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//姓名</span></span><br><span class="line"><span class="keyword">var</span> name = “abc”;   V</span><br><span class="line"><span class="keyword">var</span> name =”abc”; <span class="comment">//姓名 X</span></span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript开发规范&quot;&gt;&lt;a href=&quot;#JavaScript开发规范&quot; class=&quot;headerlink&quot; title=&quot;JavaScript开发规范&quot;&gt;&lt;/a&gt;JavaScript开发规范&lt;/h1&gt;&lt;h2 id=&quot;1-基本准则&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://is-yaojm.github.io/categories/JavaScript/"/>
    
    
    <category term="规范" scheme="http://is-yaojm.github.io/tags/%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>CSS开发规范</title>
    <link href="http://is-yaojm.github.io/2022/05/01/CSS%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    <id>http://is-yaojm.github.io/2022/05/01/CSS%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</id>
    <published>2022-05-01T09:47:48.000Z</published>
    <updated>2022-05-01T10:27:44.698Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS规范"><a href="#CSS规范" class="headerlink" title="CSS规范"></a>CSS规范</h1><h2 id="1-命名空间规范"><a href="#1-命名空间规范" class="headerlink" title="1 命名空间规范"></a>1 命名空间规范</h2><ol><li><p>布局：以 g 为命名空间，例如：.g-wrap 、.g-header、.g-content。</p></li><li><p>工具：以 u 为命名空间，表示不耦合业务逻辑的、可复用的的工具，例如：u-clearfix、u-ellipsis。（例如清除浮动，全局背景颜色等）</p></li><li><p>状态：以 s 为命名空间，表示动态的、具有交互性质的状态，例如：.s-current、s-selected。</p></li><li><p>组件：以 m 为命名空间，表示可复用、移植的组件模块，例如：m-slider、m-dropMenu。</p></li><li><p>钩子：以 j 为命名空间，表示特定给 JavaScript 调用的类名，例如：j-request、j-open。</p></li></ol><h2 id="2-CSS书写顺序"><a href="#2-CSS书写顺序" class="headerlink" title="2 CSS书写顺序"></a>2 CSS书写顺序</h2><blockquote><p>位置 大小 文字 背景 其他</p></blockquote><ol><li><p>位置属性(<code>position</code>, <code>top</code>, <code>right</code>, <code>z-index</code>, <code>display</code>, <code>float</code>等)</p></li><li><p>大小(<code>width</code>, <code>height</code>, <code>padding</code>, <code>margin</code>)</p></li><li><p>文字系列(<code>font</code>, <code>line-height</code>, <code>letter-spacing</code>, <code>color</code>, <code>text-align</code>等)</p></li><li><p>背景(<code>background</code>, <code>border</code>等)</p></li><li><p>其他(<code>animation</code>,<code>transition</code>等)</p></li></ol><h2 id="3-连字符CSS选择器的命名规范"><a href="#3-连字符CSS选择器的命名规范" class="headerlink" title="3 连字符CSS选择器的命名规范"></a>3 连字符CSS选择器的命名规范</h2><ol><li><p>长名称或词组可以使用<code>中横线</code>(<code>-</code>)来为选择器命名。</p></li><li><p>不建议使用“_”下划线来命名CSS选择器:</p><ul><li>输入的时候少按一个shift键；</li><li>浏览器兼容问题 （比如使用_tips的选择器命名，在IE6是无效的）;</li><li>能良好区分JavaScript变量命名（JS变量命名是用<code>_</code>）.</li></ul></li></ol><h2 id="4-代码注释"><a href="#4-代码注释" class="headerlink" title="4 代码注释"></a>4 代码注释</h2><ol><li><p>单行注释:星号与内容之间必须保留一个空格。<br><code>/* 表格隔行变色 */</code></p></li><li><p>多行注释:星号要一列对齐，星号与内容之间必须保留一个空格。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sometimes you need to include optional context for the entire component. Do that up here if it&#x27;s important enough.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li><li><p>规则声明块内注释: 使用 // 注释，<code>// </code>后面加上一个空格，注释独立一行。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.foo</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    // ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>文件注释: 文件顶部必须包含文件注释，用 @name 标识文件说明。星号要一列对齐，星号与内容之间必须保留一个空格，标识符冒号与内容之间必须保留一个空格。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @name: 文件名或模块名</span></span><br><span class="line"><span class="comment"> * @description: 文件或模块描述</span></span><br><span class="line"><span class="comment"> * @author: author-name(mail-name@domain.com)</span></span><br><span class="line"><span class="comment"> *          author-name2(mail-name2@domain.com)</span></span><br><span class="line"><span class="comment"> * @update: 2015-04-29 00:02</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li>@description为文件或模块描述。</li><li>@update为可选项，建议每次改动都更新一下。</li><li>当该业务项目主要由固定的一个或多个人负责时，需要添加@author标识，一方面是尊重劳动成果，另一方面方便在需要时快速定位责任人。</li></ul></li></ol><h2 id="5-单位"><a href="#5-单位" class="headerlink" title="5 单位"></a>5 单位</h2><table><thead><tr><th>单位</th><th>类型</th><th>简介</th></tr></thead><tbody><tr><td><code>px</code></td><td>Absolute</td><td>像素 (计算机屏幕上的一个点)，1px = 1/96in</td></tr><tr><td><code>pt</code></td><td>Absolute</td><td>Points, 1pt = 1/72in</td></tr><tr><td><code>pc</code></td><td>Absolute</td><td>Picas, 1pc = 12pt</td></tr><tr><td><code>in</code></td><td>Absolute</td><td>Inches, 1in = 96px = 2.54cm</td></tr><tr><td><code>cm</code></td><td>Absolute</td><td>Centimeters, 1cm = 96/2.54px</td></tr><tr><td><code>mm</code></td><td>Absolute</td><td>Millimeters, 1mm = 1/10cm</td></tr><tr><td><code>q</code></td><td>Absolute</td><td>Quarter-millimeters, 1q = 1/4mm</td></tr><tr><td><code>%</code></td><td>Relative</td><td>相对于父元素的宽度或字体大小</td></tr><tr><td><code>em</code></td><td>Relative</td><td>相对于父元素的字体大小</td></tr><tr><td><code>rem</code></td><td>Relative</td><td>(即root em) 相对于html标签的字体大小</td></tr><tr><td><code>ex</code></td><td>Relative</td><td>当前字体环境中 x 字母的高度</td></tr><tr><td><code>ch</code></td><td>Relative</td><td>当前字体环境中 0 数字的高度</td></tr><tr><td><code>vw</code></td><td>Relative</td><td>1% 视口（浏览器可视区域）的宽度</td></tr><tr><td><code>vh    </code></td><td>Relative</td><td>1% 视口（浏览器可视区域）的高度</td></tr><tr><td><code>vmin</code></td><td>Relative</td><td>1% 视口（浏览器可视区域）的宽度和高度中较小的尺寸</td></tr><tr><td><code>vmax    </code></td><td>Relative</td><td>1% 视口（浏览器可视区域）的宽度和高度中较大的尺寸</td></tr></tbody></table><h2 id="6-CSS选择器"><a href="#6-CSS选择器" class="headerlink" title="6 CSS选择器"></a>6 CSS选择器</h2><h3 id="6-1-基本选择器"><a href="#6-1-基本选择器" class="headerlink" title="6.1  基本选择器"></a>6.1  基本选择器</h3><table><thead><tr><th>选择器</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>*    </code></td><td>通配选择器</td><td>选择所有的元素</td></tr><tr><td><code>E    </code></td><td>元素选择器</td><td>选择指定的元素</td></tr><tr><td><code>#idName</code></td><td>id选择器</td><td>选择id属性等于idName的元素</td></tr><tr><td><code>.className</code></td><td>class选择器</td><td>选择class属性包含className的元素</td></tr></tbody></table><h3 id="6-2-关系选择器"><a href="#6-2-关系选择器" class="headerlink" title="6.2  关系选择器"></a>6.2  关系选择器</h3><table><thead><tr><th>选择器</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>E F</code></td><td>包含选择器</td><td>选择所有包含在E元素里面的F元素</td></tr><tr><td><code>E&gt;F</code></td><td>子选择器</td><td>选择所有作为E元素的子元素F</td></tr><tr><td><code>E+F</code></td><td>相邻选择器</td><td>选择紧贴在E元素之后的F元素</td></tr><tr><td><code>E~F</code></td><td>兄弟选择器</td><td>选择E元素所有兄弟元素F</td></tr></tbody></table><h3 id="6-3-属性选择器"><a href="#6-3-属性选择器" class="headerlink" title="6.3  属性选择器"></a>6.3  属性选择器</h3><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td><code>E[att]</code></td><td>选择具有att属性的E元素</td></tr><tr><td><code>E[att=&quot;val&quot;]</code></td><td>选择具有att属性且属性值等于val的E元素</td></tr><tr><td><code>E[att~=&quot;val&quot;]</code></td><td>选择具有att属性且属性值其中一个等于val的E元素（包含只有一个值且该值等于val的情况）</td></tr><tr><td>`E[att</td><td>=”val”]`</td></tr><tr><td><code>E[att^=&quot;val&quot;]</code></td><td>选择具有att属性且属性值为以val开头的字符串的E元素</td></tr><tr><td><code>E[att$=&quot;val&quot;]</code></td><td>选择具有att属性且属性值为以val结尾的字符串的E元素</td></tr><tr><td><code>E[att*=&quot;val&quot;]</code></td><td>选择具有att属性且属性值为包含val的字符串的E元素</td></tr></tbody></table><h3 id="6-4-伪类选择器"><a href="#6-4-伪类选择器" class="headerlink" title="6.4  伪类选择器"></a>6.4  伪类选择器</h3><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td><code>E:link    </code></td><td>设置超链接a在未被访问前的样式</td></tr><tr><td><code>E:visited    </code></td><td>设置超链接a在其链接地址已被访问过时的样式</td></tr><tr><td><code>E:hover    </code></td><td>设置元素鼠标在其悬停时的样式</td></tr><tr><td><code>E:active    </code></td><td>设置元素在被用户激活（在鼠标点击与释放之间发生的事件）时的样式</td></tr><tr><td><code>E:focus    </code></td><td>设置元素在成为输入焦点（该元素的onfocus事件发生）时的样式。(一般应用于表单元素)</td></tr><tr><td><code>E:checked    </code></td><td>匹配用户界面上处于选中状态的元素E。(用于input type为radio与checkbox时)</td></tr><tr><td><code>E:enabled    </code></td><td>匹配用户界面上处于可用状态的元素E。(一般应用于表单元素)</td></tr><tr><td><code>E:disabled    </code></td><td>匹配用户界面上处于禁用状态的元素E。(一般应用于表单元素)</td></tr><tr><td><code>E:empty    </code></td><td>匹配没有任何子元素（包括text节点）的元素E</td></tr><tr><td><code>E:root    </code></td><td>匹配E元素在文档的根元素。在HTML中，根元素永远是HTML</td></tr><tr><td><code>E:not(s)    </code></td><td>匹配不含有s选择符的元素E</td></tr><tr><td><code>E:first-child</code></td><td>匹配父元素的第一个子元素E</td></tr><tr><td><code>E:last-child</code></td><td>匹配父元素的最后一个子元素E</td></tr><tr><td><code>E:only-child    </code></td><td>匹配父元素仅有的一个子元素E</td></tr><tr><td><code>E:nth-child(n)</code></td><td>匹配父元素的第n个子元素E</td></tr><tr><td><code>E:nth-last-child(n)</code></td><td>匹配父元素的倒数第n个子元素E</td></tr><tr><td><code>E:first-of-type</code></td><td>匹配同类型中的第一个同级兄弟元素E</td></tr><tr><td><code>E:last-of-type</code></td><td>匹配同类型中的最后一个同级兄弟元素E</td></tr><tr><td><code>E:only-of-type</code></td><td>匹配同类型中的唯一的一个同级兄弟元素E</td></tr><tr><td><code>E:nth-of-type(n)</code></td><td>匹配同类型中的第n个同级兄弟元素E</td></tr><tr><td><code>E:nth-last-of-type(n)    </code></td><td>匹配同类型中的倒数第n个同级兄弟元素E</td></tr></tbody></table><h3 id="6-5-伪元素选择器"><a href="#6-5-伪元素选择器" class="headerlink" title="6.5  伪元素选择器"></a>6.5  伪元素选择器</h3><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td><code>E:before/E::before</code></td><td>在目标元素E的前面插入的内容。用来和content属性一起使用</td></tr><tr><td><code>E:after/E::after</code></td><td>在目标元素E的后面插入的内容。用来和content属性一起使用</td></tr><tr><td><code>E:first-letter/E::first-letter</code></td><td>设置元素内的第一个字符的样式</td></tr><tr><td><code>E:first-line/E::first-line</code></td><td>设置元素内的第一行的样式</td></tr><tr><td><code>E::placeholder</code></td><td>设置元素文字占位符的样式。(一般用于input输入框)</td></tr><tr><td><code>E::selection</code></td><td>设置元素被选择时的字体颜色和背景颜色</td></tr></tbody></table><h2 id="7-其他"><a href="#7-其他" class="headerlink" title="7 其他"></a>7 其他</h2><ul><li><p>尽量使用CSS缩写属性。</p></li><li><p>写属性值的时候去掉小数点前的“ 0 ”。</p></li><li><p>定义选择器名称，属性，属性值均为小写。</p></li><li><p>不要随意使用ID选择器。</p></li><li><p>为选择器添加状态前缀，“.is-”前缀。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS规范&quot;&gt;&lt;a href=&quot;#CSS规范&quot; class=&quot;headerlink&quot; title=&quot;CSS规范&quot;&gt;&lt;/a&gt;CSS规范&lt;/h1&gt;&lt;h2 id=&quot;1-命名空间规范&quot;&gt;&lt;a href=&quot;#1-命名空间规范&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="CSS" scheme="http://is-yaojm.github.io/categories/CSS/"/>
    
    
    <category term="规范" scheme="http://is-yaojm.github.io/tags/%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>HTML开发规范</title>
    <link href="http://is-yaojm.github.io/2022/05/01/HTML%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    <id>http://is-yaojm.github.io/2022/05/01/HTML%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</id>
    <published>2022-05-01T09:30:46.000Z</published>
    <updated>2022-05-01T09:47:34.583Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML代码书写规范"><a href="#HTML代码书写规范" class="headerlink" title="HTML代码书写规范"></a>HTML代码书写规范</h1><ol><li><p>块级元素与块级元素平级，行内元素与行内元素平级。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>块级元素可以包含行内元素或某些块元素，但行内元素不能包含块元素，它只能包含其它的行内元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>几个特殊的块级元素只能包含行内元素，不能再包含块级元素。</p><ul><li>h1、h2、h3、h4、h5、h6、p、dt </li></ul></li><li><p>块级元素不能放在标签p里面。</p></li><li><p><code>li标签</code>可以包含 <code>div标签</code>，因为li 和 div 标签都是装载内容的容器。</p></li></ol><h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><ul><li>h1-h6 : 1-6级标题 </li><li>p : 段落 </li><li>div : 定义文档中的节 </li><li>ul : 定义无序列表 </li><li>ol : 定义有序列表 </li><li>li : 定义无序列表与有序列表中的项 </li><li>hr : 水平线 </li><li>address : 定义文档作者或拥有者的联系信息 </li><li>blockquote : 定义长的引用  </li><li>form : 定义表单  </li><li>audio : 定义声音内容 </li><li>video : 定义视频 </li><li>nav : 定义导航链接 </li><li>dl : 定义定义列表 </li><li>dt : 定义定义列表中的项目 </li><li>dd : 定义定义列表中项目的描述 </li><li>menu : 定义命令的菜单/列表 </li><li>table : 定义表格  </li><li>tbody : 定义表格主体 </li><li>thead : 定义表格头部 </li><li>tfoot : 定义表格中的表注内容（脚注） </li><li>tr : 定义表格中的行 </li><li>th : 定义表格中的表头单元格 </li><li>colgroup : 定义表格中供格式化的列组 </li><li>col : 定义表格中一个或多个列的属性值。【在colgroup中使用 】 </li><li>header : 定义 section 或 page 的页眉 </li><li>footer : 定义 section 或 page 的页脚 </li><li>section : 定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分 </li><li>article : 定义文章 </li><li>aside : 定义页面内容之外的内容。【可用作文章的侧栏。】 </li><li>datails : 定义元素的细节。【用于描述有关文档或文档片段的详细信息。】 </li><li>summary : 为 details 元素定义可见的标题。</li></ul><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><ul><li>br : 定义换行 </li><li>a : 定义超链接 </li><li>i : 定义文字倾斜 </li><li>b : 定义文字加粗 </li><li>em : 定义文字倾斜，语义更加强调  </li><li>cite : 定义引用 </li><li>code : 定义计算机代码文本   </li><li>q : 定义短的引用  </li><li>small : 定义小号文本 </li><li>strong : 定义语气更为强烈的强调文本，文字加粗 </li><li>sup : 定义上标文本 </li><li>sub : 定义下标文本 </li><li>time : 定义日期/时间 </li><li>var : 定义文本的变量部分  </li><li>label : 定义 input 元素的标注 </li><li>datalist : 定义下拉列表 </li><li>Keygen : 定义生成密钥。 </li><li>output : 定义输出的一些类型。【如脚本输出】 </li><li>map : 定义图像映射 </li><li>area : 定义图像地图内部的区域 </li><li>source : 定义媒介源 </li><li>track : 定义用在媒体播放器中的文本轨道 </li><li>link : 定义文档与外部资源的关系 </li><li>command : 定义命令按钮 </li><li>style : 定义文档的样式信息 </li><li>span : 定义文档中的节 </li><li>base : 定义页面中所有链接的默认地址或默认目标</li></ul><h3 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h3><ul><li>img : 定义图像 </li><li>input : 定义输入控件 </li><li>meter  : 定义预定义范围内的度量 </li><li>progress : 定义任何类型的任务的进度 </li><li>textarea : 定义多行的文本输入控件 </li><li>button : 定义按钮 </li><li>select : 定义选择列表（下拉列表） </li><li>iframe : 定义内联框架 </li><li>canvas : 定义图形 </li><li>td : 定义表格中的单元格</li></ul><h3 id="HTML字符集"><a href="#HTML字符集" class="headerlink" title="HTML字符集"></a>HTML字符集</h3><table><thead><tr><th>显示结果</th><th>描述</th><th>实体名称</th><th>实体编号</th></tr></thead><tbody><tr><td></td><td>空格</td><td><code>&amp;nbsp;    </code></td><td></td></tr><tr><td>&lt;</td><td>小于号</td><td><code>    &amp;lt;</code></td><td>&lt;</td></tr><tr><td>&gt;</td><td>大于号</td><td><code>   &amp;gt;   </code></td><td>&gt;</td></tr><tr><td>&amp;</td><td>和号</td><td><code>&amp;amp;    </code></td><td>&amp;</td></tr><tr><td>“</td><td>引号</td><td><code>&amp;quot;</code></td><td>“</td></tr><tr><td>‘</td><td>撇号</td><td><code>&amp;apos; </code>(IE不支持)</td><td>‘</td></tr><tr><td>￠</td><td>分</td><td><code>&amp;cent;</code></td><td>¢</td></tr><tr><td>￡</td><td>镑</td><td><code>   &amp;pound;   </code></td><td>£</td></tr><tr><td>￥</td><td>日元</td><td><code>&amp;yen;    </code></td><td>¥</td></tr><tr><td>€</td><td>欧元</td><td><code>&amp;euro;    </code></td><td>€</td></tr><tr><td>§</td><td>小节</td><td><code>&amp;sect;</code></td><td>§</td></tr><tr><td>©</td><td>版权</td><td><code>&amp;copy;</code></td><td>©</td></tr><tr><td>®</td><td>注册商标</td><td><code>&amp;reg;</code></td><td>®</td></tr><tr><td>™</td><td>商标</td><td><code>&amp;trade;    </code></td><td>™</td></tr><tr><td>×</td><td>乘号</td><td><code>&amp;times;</code></td><td>×</td></tr><tr><td>÷</td><td>除号</td><td><code>&amp;divide;    </code></td><td>÷</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTML代码书写规范&quot;&gt;&lt;a href=&quot;#HTML代码书写规范&quot; class=&quot;headerlink&quot; title=&quot;HTML代码书写规范&quot;&gt;&lt;/a&gt;HTML代码书写规范&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;块级元素与块级元素平级，行内元素与行内元素平级。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="HTML" scheme="http://is-yaojm.github.io/categories/HTML/"/>
    
    
    <category term="规范" scheme="http://is-yaojm.github.io/tags/%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>CSS-面试总结3</title>
    <link href="http://is-yaojm.github.io/2022/04/30/CSS-%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%933/"/>
    <id>http://is-yaojm.github.io/2022/04/30/CSS-%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%933/</id>
    <published>2022-04-30T04:02:19.000Z</published>
    <updated>2022-04-30T04:03:16.843Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-CSS渲染和解析"><a href="#1-CSS渲染和解析" class="headerlink" title="1 CSS渲染和解析"></a>1 CSS渲染和解析</h2><p><a href="https://blog.csdn.net/qq_43743402/article/details/121046578">CSS渲染原理</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-CSS渲染和解析&quot;&gt;&lt;a href=&quot;#1-CSS渲染和解析&quot; class=&quot;headerlink&quot; title=&quot;1 CSS渲染和解析&quot;&gt;&lt;/a&gt;1 CSS渲染和解析&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_4374</summary>
      
    
    
    
    <category term="CSS" scheme="http://is-yaojm.github.io/categories/CSS/"/>
    
    
    <category term="面试" scheme="http://is-yaojm.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>eslintrc中的问题</title>
    <link href="http://is-yaojm.github.io/2022/04/29/eslintrc%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://is-yaojm.github.io/2022/04/29/eslintrc%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2022-04-29T13:19:33.000Z</published>
    <updated>2022-04-29T13:23:39.701Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>报错：Vue运行出现Missing semicolon错误</p><ul><li>增加分号</li></ul></li><li><p>报错：Strings must use singlequote.</p><ul><li>/* eslint-disable */</li></ul></li><li><p>报错：eslint报错Expected linebreaks to be ‘LF’ but found ‘CRLF’的解决方案</p><ul><li>在.eslintrc文件 rules 里面 配置<code>&quot;linebreak-style&quot;: [0 ,&quot;error&quot;, &quot;windows&quot;], </code></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;报错：Vue运行出现Missing semicolon错误&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加分号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;报错：Strings must use singlequote.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/* eslint-</summary>
      
    
    
    
    
    <category term="问题" scheme="http://is-yaojm.github.io/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>CSS-单位</title>
    <link href="http://is-yaojm.github.io/2022/04/28/CSS-%E5%8D%95%E4%BD%8D/"/>
    <id>http://is-yaojm.github.io/2022/04/28/CSS-%E5%8D%95%E4%BD%8D/</id>
    <published>2022-04-28T10:49:46.000Z</published>
    <updated>2022-04-28T10:51:17.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS单位"><a href="#CSS单位" class="headerlink" title="CSS单位"></a>CSS单位</h1><h2 id="1-相对单位"><a href="#1-相对单位" class="headerlink" title="1 相对单位"></a>1 相对单位</h2><blockquote><p>相对单位规定相对于另一个长度属性的长度。它在不同渲染介质之间缩放表现更好。<br><img src="%E7%9B%B8%E5%AF%B9%E5%8D%95%E4%BD%8D.png" alt="相对单位"></p></blockquote><h3 id="1-1-em和rem"><a href="#1-1-em和rem" class="headerlink" title="1.1 em和rem"></a>1.1 em和rem</h3><blockquote><p>em : 相对于元素的字体大小.</p></blockquote><ul><li>em：如果自身元素未设置字体大小，那么其根据父元素的字体大小进行计算；如果自身元素设置了字体大小，则基于自身的字体大小进行计算。</li><li>em的值不是固定的</li></ul><blockquote><p>rem : 相对于根元素的字体大小计算。</p></blockquote><ul><li><p>rem在处理小数的时候会有误差。</p></li><li><p>不支持iframe，并且这里存在一个理念问题，大屏是为了更大更清晰，还是为了承载更多内容。</p></li><li><p><code>em</code>与<code>rem</code>的选择情况：</p><ul><li>两者在客户端中计算出来的样式都会以px的形式显示；</li><li><code>rem</code>是<code>相对根元素</code>html的字体大小计算，<code>em</code>是<code>相对于元素</code>的字体大小进行计算；</li><li>当需要根据<code>浏览器的font-size设置缩放</code>时，使用<code>rem</code>；</li><li>使用em应该根据组件的font-size来定；</li><li>rem可以从浏览器字体设置中继承font-size值；</li><li>em可能受任何继承过来的父元素font-size的影响。</li></ul></li></ul><h3 id="1-2-vh和vm，vmin和vmax"><a href="#1-2-vh和vm，vmin和vmax" class="headerlink" title=".1.2 vh和vm，vmin和vmax"></a>.1.2 vh和vm，vmin和vmax</h3><ul><li>vw：视窗宽度的百分比；</li><li>vh：视窗高度的百分比；</li><li>vmax：较大的 vh 和 vw；</li><li>vmin：较小的 vh 和 vw。</li></ul><p>eg:</p><ul><li>若一个浏览器高度为500px，宽度为1200px，<ul><li>1vh = 5px;</li><li>1vw = 12px;</li><li>1vmin = 5px;</li><li>1vmax = 12px.</li></ul></li></ul><h2 id="2-绝对单位"><a href="#2-绝对单位" class="headerlink" title="2 绝对单位"></a>2 绝对单位</h2><blockquote><p>绝对单位是固定的，用任何一个绝对长度表示的长度都将恰好显示为这个尺寸。</p></blockquote><ul><li>不建议在屏幕上使用绝对长度单位，因为屏幕尺寸变化较大。</li></ul><p><img src="%E7%BB%9D%E5%AF%B9%E5%8D%95%E4%BD%8D.png" alt="绝对单位"></p><h2 id="3-百分比单位"><a href="#3-百分比单位" class="headerlink" title="3 百分比单位"></a>3 百分比单位</h2><ul><li>百分比（%）是较常用的单位之一，所有接受长度值的属性都可以使用百分比单位。但是不同属性使用该单位的效果可能并不一样。但是都需要有一个参照值，也就是说百分比值是一个相对的值。 ​</li></ul><p><img src="%E7%99%BE%E5%88%86%E6%AF%94%E5%8D%95%E4%BD%8D.png" alt="百分比单位"></p><h2 id="4-角度单位-​"><a href="#4-角度单位-​" class="headerlink" title="4 角度单位 ​"></a>4 角度单位 ​</h2><p><img src="%E8%A7%92%E5%BA%A6%E5%8D%95%E4%BD%8D.png" alt="角度单位"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS单位&quot;&gt;&lt;a href=&quot;#CSS单位&quot; class=&quot;headerlink&quot; title=&quot;CSS单位&quot;&gt;&lt;/a&gt;CSS单位&lt;/h1&gt;&lt;h2 id=&quot;1-相对单位&quot;&gt;&lt;a href=&quot;#1-相对单位&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    <category term="CSS" scheme="http://is-yaojm.github.io/categories/CSS/"/>
    
    
    <category term="CSS-知识点" scheme="http://is-yaojm.github.io/tags/CSS-%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>CSS-Grid布局</title>
    <link href="http://is-yaojm.github.io/2022/04/28/CSS-Grid%E5%B8%83%E5%B1%80/"/>
    <id>http://is-yaojm.github.io/2022/04/28/CSS-Grid%E5%B8%83%E5%B1%80/</id>
    <published>2022-04-28T10:35:44.000Z</published>
    <updated>2022-04-30T03:14:13.140Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS-Grid布局"><a href="#CSS-Grid布局" class="headerlink" title="CSS - Grid布局"></a>CSS - Grid布局</h1><ul><li><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">CSS-Grid网格布局教程-阮一峰老师</a></li><li><a href="https://www.runoob.com/try/gridgarden/index.html">CSS-grid小游戏</a>哈哈哈哈 很有意思的小游戏，还可以学习布局</li></ul><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><blockquote><p>Grid布局： 将容器划分为行和列，产生单元格，然后指定项目所在的单元格。</p></blockquote><ul><li>Flex布局：是轴线布局，只能指定“项目”针对轴线的位置，可看作是一维布局。</li><li>Grid布局：划分行和列，产生单元格，可看作二维布局。</li></ul><h2 id="2-基本概念"><a href="#2-基本概念" class="headerlink" title="2 基本概念"></a>2 基本概念</h2><h3 id="2-1-容器和项目"><a href="#2-1-容器和项目" class="headerlink" title="2.1 容器和项目"></a>2.1 容器和项目</h3><ol><li><p>容器（具有容器属性）<br><a href="container.png">容器</a></p></li><li><p>项目（具有项目属性）<br><a href="item.png">项目</a></p></li><li><p>grid布局中的各种要素<br><a href="grid.png">grid</a></p></li></ol><h2 id="3-容器属性"><a href="#3-容器属性" class="headerlink" title="3 容器属性"></a>3 容器属性</h2><h3 id="3-1-dispaly属性"><a href="#3-1-dispaly属性" class="headerlink" title="3.1 dispaly属性"></a>3.1 dispaly属性</h3><blockquote><p><code>display: grid</code> 指定一个容器采用<code>网格布局</code>。默认情况下，容器元素都是块级元素，但是也可设置为行内元素<code>/* display: inline-grid; */</code>。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Bin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-size</span>: <span class="number">2em</span>; </span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-id">#container</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="comment">/* 网格布局 */</span></span></span><br><span class="line"><span class="language-css">                <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">                <span class="comment">/* 行内网格布局 */</span></span></span><br><span class="line"><span class="language-css">                <span class="comment">/* display: inline-grid; */</span></span></span><br><span class="line"><span class="language-css">                <span class="attribute">grid-template-columns</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">grid-template-rows</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-size</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e5e4e9</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.item-1</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: <span class="number">#ef342a</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.item-2</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: <span class="number">#f68f26</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.item-3</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: <span class="number">#4ba946</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.item-4</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: <span class="number">#0376c2</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.item-5</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: <span class="number">#c077af</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.item-6</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: <span class="number">#f8d29d</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-4&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-5&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-6&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-7&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-8&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item item-9&quot;</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意：若容器设置为网格布局之后，容器中的项目的部分属性会失效：<ul><li><code>float</code></li><li><code>display: inline-block </code></li><li><code>display: table-cell</code> </li><li><code>vertical-align</code>和<code>column-*</code></li></ul></li></ul><h3 id="3-2-grid-template-columns属性-和-grid-template-rows属性"><a href="#3-2-grid-template-columns属性-和-grid-template-rows属性" class="headerlink" title="3.2 grid-template-columns属性 和 grid-template-rows属性"></a>3.2 grid-template-columns属性 和 grid-template-rows属性</h3><blockquote><p>grid-template-columns属性: 定义每一列列宽；<br>grid-template-rows属性: 定义每一行行高。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="comment">/* 指定一个三行三列的网格，行高和列宽都是100px ，单位可以是绝对单位可以是相对单位，或者百分比*/</span></span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-1-repeat-函数"><a href="#3-2-1-repeat-函数" class="headerlink" title="3.2.1 repeat()函数"></a>3.2.1 repeat()函数</h4><blockquote><p>repeat()函数： 简化重复的值。</p></blockquote><ul><li>两个参数：<ul><li>参数1： 重复的次数（几行，或者几列）；</li><li>参数2： 重复的值</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123; </span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>);</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">100px</span>) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>repeat()定义某种模式：<code>grid-template-columns: repeat(1, 100px 20px 80px);</code></li><li></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">1</span>, <span class="number">100px</span> <span class="number">20px</span> <span class="number">80px</span>);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">50px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="repeat1.png">三行</a><br><a href="repeat2.png">二行</a><br><a href="repeat3.png">一行</a></p><h4 id="3-2-2-auto-fill关键字"><a href="#3-2-2-auto-fill关键字" class="headerlink" title="3.2.2 auto-fill关键字"></a>3.2.2 auto-fill关键字</h4><blockquote><p>当单元格的大小固定，但容器的大小不确定时，如果希望每一行（或每一列）容纳尽可能多的单元格，可以使用<code>auto-fill关键字</code>表示自动填充。</p></blockquote><p><a href="autofill.png">auto-fill关键字</a></p><h4 id="3-2-3-fr关键字"><a href="#3-2-3-fr关键字" class="headerlink" title="3.2.3 fr关键字"></a>3.2.3 fr关键字</h4><blockquote><p>fr关键字： 方便表示比例关系。</p></blockquote><ul><li>如果两列的宽度分别为1fr和2fr，就表示后者是前者的两倍。</li><li>fr关键字可以和绝对长度的单位结合使用。</li></ul><p><a href="fr.png">fr关键字</a></p><h4 id="3-2-4-minmax"><a href="#3-2-4-minmax" class="headerlink" title="3.2.4 minmax()"></a>3.2.4 minmax()</h4><blockquote><p>minmax()函数:产生一个长度范围，表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="built_in">minmax</span>(<span class="number">100px</span>, <span class="number">1</span>fr);</span><br></pre></td></tr></table></figure><h3 id="3-3-gap属性"><a href="#3-3-gap属性" class="headerlink" title="3.3 gap属性"></a>3.3 gap属性</h3><blockquote><p>grid-row-gap 属性:设置行间距<br>grid-column-gap 属性： 设置列间距</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-row</span>-<span class="attribute">gap</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">grid-column</span>-<span class="attribute">gap</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>grid-gap 属性 ：行列间距的简写形式</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">grid-gap</span>: &lt;grid-row-gap&gt; &lt;grid-column-gap&gt;;</span><br></pre></td></tr></table></figure><h3 id="3-4-grid-template-areas-属性"><a href="#3-4-grid-template-areas-属性" class="headerlink" title="3.4 grid-template-areas 属性"></a>3.4 grid-template-areas 属性</h3><blockquote><p>grid-template-areas属性 : 用于定义区域</p></blockquote><h3 id="3-4-grid-auto-flow属性"><a href="#3-4-grid-auto-flow属性" class="headerlink" title="3.4 grid-auto-flow属性"></a>3.4 grid-auto-flow属性</h3><blockquote><p>grid-auto-flow属性 : 划分网格线以后，容器的子元素会按照顺序，自动放置在每一个网格。默认的放置顺序是先行后列，即填满第一行，再开始放入第二行（就是子元素的排放顺序）</p></blockquote><ul><li>grid-auto-flow：row（先行后列  默认）</li><li>grid-auto-flow：column （先列后行）</li><li>跟grid-auto-flow相关  dense（提高空间的利用率）</li></ul><h3 id="3-5-单元格内容位置属性"><a href="#3-5-单元格内容位置属性" class="headerlink" title="3.5 单元格内容位置属性"></a>3.5 单元格内容位置属性</h3><blockquote><p>items属性: 单元格里面的内容。</p></blockquote><ul><li><code>justify-items属性</code> : 设置<strong>单元格内容</strong>的<code>水平</code>位置（左中右）；</li><li><code>align-items属性设置</code> : <strong>单元格内容</strong>的<code>垂直</code>位置（上中下）;</li><li><code>place-items属性</code>: 是<code>align-items属性</code>和<code>justify-items属性</code>的合并简写形式。<ul><li><code>place-items: &lt;align-items&gt; &lt;justify-items&gt;;</code>,如果省略第二个值，则浏览器认为与第一个值相等。</li></ul></li></ul><h3 id="3-6-整个内容区域位置属性"><a href="#3-6-整个内容区域位置属性" class="headerlink" title="3.6 整个内容区域位置属性"></a>3.6 整个内容区域位置属性</h3><ul><li><code>justify-content属性</code>: 是整个内容区域在容器里面的水平位置（左中右）</li><li><code>align-content属性</code> :是整个内容区域的垂直位置（上中下）。</li></ul><h3 id="3-7-grid-auto-columns-grid-auto-rows"><a href="#3-7-grid-auto-columns-grid-auto-rows" class="headerlink" title="3.7 grid-auto-columns / grid-auto-rows"></a>3.7 grid-auto-columns / grid-auto-rows</h3><ul><li>用来设置多出来的项目的宽和高</li></ul><h2 id="4-项目属性"><a href="#4-项目属性" class="headerlink" title="4 项目属性"></a>4 项目属性</h2><h3 id="4-1-grid-column和grid-row的start属性、end属性"><a href="#4-1-grid-column和grid-row的start属性、end属性" class="headerlink" title="4.1 grid-column和grid-row的start属性、end属性"></a>4.1 grid-column和grid-row的start属性、end属性</h3><ul><li>grid-column-start属性：左边框所在的垂直网格线</li><li>grid-column-end属性：右边框所在的垂直网格线；（结束在x行，但不包括）</li><li>grid-row-start属性：上边框所在的水平网格线</li><li>grid-row-end属性：下边框所在的水平网格线</li></ul><h3 id="4-2-grid-column-属性-grid-row-属性"><a href="#4-2-grid-column-属性-grid-row-属性" class="headerlink" title="4.2 grid-column 属性  , grid-row 属性"></a>4.2 grid-column 属性  , grid-row 属性</h3><ul><li><p>grid-column属性是grid-column-start和grid-column-end的合并简写形式;</p></li><li><p>grid-row属性是grid-row-start属性和grid-row-end的合并简写形式。</p></li><li><p>grid-column 属性定义了网格元素列的开始和结束位置。</p></li><li><p>设置 “item1” 在第 1 列开始，在第 5 列前结束：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item1 &#123;</span><br><span class="line">grid-column: 1 / 5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-3-grid-area-属性"><a href="#4-3-grid-area-属性" class="headerlink" title="4.3 grid-area 属性"></a>4.3 grid-area 属性</h3><ul><li>grid-area属性指定项目放在哪一个区域。</li></ul><p><a href="gridarea.png">grid-area</a></p><h3 id="4-4-order属性"><a href="#4-4-order属性" class="headerlink" title="4.4 order属性"></a>4.4 order属性</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS-Grid布局&quot;&gt;&lt;a href=&quot;#CSS-Grid布局&quot; class=&quot;headerlink&quot; title=&quot;CSS - Grid布局&quot;&gt;&lt;/a&gt;CSS - Grid布局&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyife</summary>
      
    
    
    
    <category term="CSS" scheme="http://is-yaojm.github.io/categories/CSS/"/>
    
    
    <category term="CSS-知识点" scheme="http://is-yaojm.github.io/tags/CSS-%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>CSS-响应式布局</title>
    <link href="http://is-yaojm.github.io/2022/04/28/CSS-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/"/>
    <id>http://is-yaojm.github.io/2022/04/28/CSS-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/</id>
    <published>2022-04-28T10:35:32.000Z</published>
    <updated>2022-04-29T11:25:10.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS响应式布局"><a href="#CSS响应式布局" class="headerlink" title="CSS响应式布局"></a>CSS响应式布局</h1><h2 id="1-响应式布局"><a href="#1-响应式布局" class="headerlink" title="1 响应式布局"></a>1 响应式布局</h2><blockquote><p>响应式布局：是同一页面在不同的屏幕上有不同的布局，即只需要一套代码使页面适应不同的屏幕。</p></blockquote><ul><li>采用响应式设计，在不同设备中，网站会重新排列，展现出不同的设计风格，以完美的适配任何尺寸的屏幕。</li></ul><h2 id="2-设计原则"><a href="#2-设计原则" class="headerlink" title="2 设计原则"></a>2 设计原则</h2><h3 id="2-1-响应式设计两个设计原则"><a href="#2-1-响应式设计两个设计原则" class="headerlink" title="2.1 响应式设计两个设计原则"></a>2.1 响应式设计两个设计原则</h3><ul><li>渐进增强：是指基本需求得到满足和实现后，再根据不同浏览器及不同分辨率设备的特点，利用高级浏览器中的新特新提供更好的体检。（由基本到完美）<ul><li><code>移动端</code>响应式布局采用<code>渐进增强</code>原则。</li></ul></li><li>优雅降级：现有功能已经开发完备，但需要向下兼容版本和不支持该功能的浏览器。（向下兼容）</li></ul><h3 id="2-2-常见设备的屏幕像素"><a href="#2-2-常见设备的屏幕像素" class="headerlink" title="2.2 常见设备的屏幕像素"></a>2.2 常见设备的屏幕像素</h3><ul><li>viewport视口设置：<ul><li><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</code></li></ul></li></ul><table><thead><tr><th>屏幕类型</th><th>对应设备</th><th>常见尺寸</th></tr></thead><tbody><tr><td>超小屏幕</td><td>手机</td><td>&lt;768px</td></tr><tr><td>小屏幕</td><td>平板</td><td>&gt;768px</td></tr><tr><td>中等屏幕</td><td>桌面显示器</td><td>&gt;992px</td></tr><tr><td>大屏幕</td><td>超大桌面显示器</td><td>&gt;1200px</td></tr></tbody></table><h2 id="3-实现方法"><a href="#3-实现方法" class="headerlink" title="3 实现方法"></a>3 实现方法</h2><h3 id="3-1-媒体查询"><a href="#3-1-媒体查询" class="headerlink" title="3.1 媒体查询"></a>3.1 媒体查询</h3><blockquote><p>媒体查询</p></blockquote><ul><li>什么是媒体查询 ：<strong>媒体查询可以让CSS更加精确作用于不同的媒体类型和同一媒体的不同条件。</strong></li><li>JS监听媒体查询：<code>MediaQueryList.addListener(func)</code>；</li><li>使用<code>@media查询</code>，可以针对不同的媒体类型定义不同的样式；</li><li><code>@media</code>可以针对不同的屏幕尺寸设置不同的样式，特别是如果需要设置<strong>响应式的页面</strong>，<code>@media</code>是非常有用的。</li><li>当你重置浏览器大小的过程中，页面也会根据浏览器的高度重新渲染页面。</li></ul><blockquote><p>媒体查询的用途</p></blockquote><ul><li><p>使用CSS@media和at规则有条件地应用样式；</p></li><li><p>使用该属性为<code>&lt;style&gt;</code>,<code>&lt;link&gt;</code>,<code>&lt;source&gt;</code>和其他HTML元素定位特定媒体；</p></li><li><p>使用JS方法测试和监控媒体状态。</p><p>  eg:</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>:violet;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">980px</span>) <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">600px</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">499px</span>) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">41</span>, <span class="number">119</span>, <span class="number">192</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><a href="%E5%AA%92%E4%BD%93%E7%89%B9%E6%80%A7.png">媒体特性</a></p><h3 id="3-2-相对尺寸"><a href="#3-2-相对尺寸" class="headerlink" title="3.2 相对尺寸"></a>3.2 相对尺寸</h3></li></ul><ol><li>百分比</li></ol><ul><li>百分比是相对于包含块的计量单位，通过对属性设置百分比来适应不同的屏幕。</li><li>包含块：<ul><li>有父元素相对于父元素；</li><li>无父元素相对于视口；</li><li>继承父元素；</li></ul></li></ul><ol start="2"><li>vw/vh</li></ol><ul><li>vw/vh，vmin和vmax是视口单位，可以根据浏览器的窗口大小进行适配。</li><li>eg：文字自适应</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.text</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">248</span>, <span class="number">150</span>, <span class="number">150</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2vw</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        今天是个好天气 </span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>rem</li></ol><ul><li>rem单位：相对单位，相对于根元素字体大小的单位。</li><li>使用场景：某一元素的宽需要为47px，根元素大小为20px，要求适应不同的终端。<ul><li>设想屏幕宽度为750px，设计稿宽度为750px；</li><li>设置<code>font-size = 1rem = 屏幕宽度×100/设计稿宽度 = 100px</code>；</li><li>使用<code>getBoundingClientRect().width</code>可以获取屏幕宽度，在该宽度下梓蒿为fontsize；</li><li><code> width / ( 750 * fontSize ) = 750 / (750 * 100 )</code>;</li><li>计算得出fontSize的值。</li></ul></li></ul><h2 id="4-响应式图片"><a href="#4-响应式图片" class="headerlink" title="4 响应式图片"></a>4 响应式图片</h2><ul><li>使用<code>background</code>属性设置背景图<ul><li>将<code>background-size</code>属性值设置为<code>cover</code>，则会把背景图片扩展至足够大，是背景图片完全覆盖背景区域。</li><li><code>background-size: cover;</code>    /* 让背景图片一起缩放 */</li></ul></li></ul><h2 id="5-移动端事件"><a href="#5-移动端事件" class="headerlink" title="5 移动端事件"></a>5 移动端事件</h2><ul><li><p><a href="https://blog.csdn.net/weixin_43842373/article/details/113397331">移动端响应式开发</a></p></li><li><p><a href="https://wenku.baidu.com/view/9e2c202651ea551810a6f524ccbff121dd36c50b.html">CSS-常用分辨率</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS响应式布局&quot;&gt;&lt;a href=&quot;#CSS响应式布局&quot; class=&quot;headerlink&quot; title=&quot;CSS响应式布局&quot;&gt;&lt;/a&gt;CSS响应式布局&lt;/h1&gt;&lt;h2 id=&quot;1-响应式布局&quot;&gt;&lt;a href=&quot;#1-响应式布局&quot; class=&quot;header</summary>
      
    
    
    
    <category term="CSS" scheme="http://is-yaojm.github.io/categories/CSS/"/>
    
    
    <category term="CSS-知识点" scheme="http://is-yaojm.github.io/tags/CSS-%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>CSS-经典布局方案</title>
    <link href="http://is-yaojm.github.io/2022/04/28/CSS-%E7%BB%8F%E5%85%B8%E5%B8%83%E5%B1%80%E6%96%B9%E6%A1%88/"/>
    <id>http://is-yaojm.github.io/2022/04/28/CSS-%E7%BB%8F%E5%85%B8%E5%B8%83%E5%B1%80%E6%96%B9%E6%A1%88/</id>
    <published>2022-04-28T10:31:10.000Z</published>
    <updated>2022-04-28T10:31:47.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS布局"><a href="#CSS布局" class="headerlink" title="CSS布局"></a>CSS布局</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><p>根据宽度是否固定来分，可分为：</p><ul><li>固定宽度布局 ： PC端一般宽度为960/1000/1024px；</li><li>不固定宽度布局 ： 主要靠文档流的原理来布局；</li><li>响应式布局 ： 可以为不同终端的用户提供更加舒适的界面和更好的用户体验。</li></ul></li><li><p>根据栏数区分：</p><ul><li>单列布局 : 头部、内容、底部 （块级元素水平居中：<code>margin:0 auto;</code>）</li><li>两栏布局 ：左边固定，右边自适应 （或 右边固定，左边自适应）</li><li>三栏布局 ：左右固定，中间自适应。</li></ul></li><li><p>响应式布局：<a href="https://m.php.cn/article/476031.html">四种方式</a></p><ul><li>使用flex布局，优点代码简单、布局方便；</li><li>使用绝对布局，结合使用media媒体查询实现响应式布局；</li><li>使用Grid布局，优点是写法简单；</li><li>使用float布局，优点是兼容性较好；</li></ul></li></ul><h2 id="1-三栏布局"><a href="#1-三栏布局" class="headerlink" title="1 三栏布局"></a>1 三栏布局</h2><h3 id="1-1-圣杯布局"><a href="#1-1-圣杯布局" class="headerlink" title="1.1 圣杯布局"></a>1.1 圣杯布局</h3><blockquote><p>圣杯布局：其核心是左、中、右三栏都通过float进行浮动，然后通过负值magin进行调整。</p></blockquote><ul><li>实现<ul><li>基本布局 - 中左右 </li><li>1 外层div设置内边距</li><li>2 给三个div都添加左浮动；</li><li>3 让三个div位于同一行，给left增加<code>margin-left:-100%;</code> , 给right增加<code>margin-right:-100px;</code>;</li><li>4 将left左移，相对定位+左边盒子的宽度，<code>position: relative;left: -100px;</code></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"> </span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 三栏布局 - 圣杯布局 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#con1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">80%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">306px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> solid red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">50px</span> auto; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">100px</span>;<span class="comment">/* 左右内边距*/</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.left2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">212</span>, <span class="number">145</span>, <span class="number">145</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: -<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.right2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">187</span>, <span class="number">137</span>, <span class="number">252</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-right</span>: -<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">221</span>, <span class="number">252</span>, <span class="number">137</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left; </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 三栏布局 - 圣杯布局 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;con1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-双飞翼布局"><a href="#1-2-双飞翼布局" class="headerlink" title="1.2 双飞翼布局"></a>1.2 双飞翼布局</h3><blockquote><p>双飞翼布局：该布局与圣杯布局的区别在于中间部分与左右部分的分离。核心实现方式也是先使用float浮动，然后通过magrin负值调整。</p></blockquote><ul><li>实现<ul><li>基本布局 - 中左右 </li><li>注意：中间center被放在一个div中，container与left和right平级。</li><li>1 给center设置左右宽度的外边距；<code>margin: 0 100px;</code></li><li>2 让container、left和right三个div左浮动，</li><li>3 给left增加<code>margin-left: -100%;</code></li><li>4 给right增加<code>margin-left: -100px;</code></li></ul></li><li>区别：<ul><li>圣杯：三部分同级，大div设置内边距，左中右浮动，根据center改变左右的位置；</li><li>双飞翼：center套在一个盒子中，给center设置外边距，左中右浮动，然后定位。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 三栏布局 - 双飞翼布局 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;con3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 三栏布局 - 双飞翼布局 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#con3</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">80%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">306px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> solid red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">50px</span> auto;  </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.left3</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">247</span>, <span class="number">181</span>, <span class="number">181</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.right3</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">137</span>, <span class="number">219</span>, <span class="number">252</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content3</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">233</span>, <span class="number">137</span>, <span class="number">252</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-flex布局"><a href="#1-3-flex布局" class="headerlink" title="1.3 flex布局"></a>1.3 flex布局</h3><blockquote><p>flex布局：设置容器属性和center属性即可实现，但是需要注意浏览器兼容性问题。</p></blockquote><ul><li>实现<ul><li>基本布局 - 左中右</li><li>1 给大div设置<code>display:flex;</code> 和 <code>justify-content: space-between;</code>属性；</li><li>2 给center设置<code>flex: 1;</code></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 三栏布局 - flex布局 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;con&quot;</span> <span class="attr">id</span>=<span class="string">&quot;con4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 三栏布局 - flex */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#con4</span> &#123; </span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 容器属性设置 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>:flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-between;<span class="comment">/* 两端对齐 */</span></span></span><br><span class="line"><span class="language-css">    &#125; </span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.left4</span> , <span class="selector-class">.right4</span> &#123; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">241</span>, <span class="number">194</span>, <span class="number">150</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>; </span></span><br><span class="line"><span class="language-css">    &#125; </span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.center4</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 项目属性设置 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span>;<span class="comment">/* 设置项目放大、缩小和分配剩余空间*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">237</span>, <span class="number">180</span>, <span class="number">248</span>); </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-定位布局"><a href="#1-4-定位布局" class="headerlink" title="1.4 定位布局"></a>1.4 定位布局</h3><blockquote><p>定位：子div绝对定位，父div相对定位，左右两侧通过top、left和right固定位置，中间加magin，宽度自适应。</p></blockquote><ul><li>实现<ul><li>基本布局：左中右</li><li>1 给父div设置相对定位；</li><li>2 给left和right设置绝对定位；</li><li>3 给left设置<code>left:0;</code> <code>top：0；</code></li><li>4 给right设置<code>right:0;</code> <code>top：0；</code></li><li>5 给center设置外边距，左右部分的宽度。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 三栏布局 - 定位布局 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;con&quot;</span> <span class="attr">id</span>=<span class="string">&quot;con5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 三栏布局 - 定位布局 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#con5</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.left5</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">247</span>, <span class="number">181</span>, <span class="number">181</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.right5</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">137</span>, <span class="number">219</span>, <span class="number">252</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.center5</span> &#123; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">237</span>, <span class="number">180</span>, <span class="number">248</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-5-float布局"><a href="#1-5-float布局" class="headerlink" title="1.5 float布局"></a>1.5 float布局</h3><blockquote><p>采用float浮动，左右大小固定，中间自适应</p></blockquote><ul><li>实现<ul><li>左右两栏：设置宽度，并分别设置左右浮动；</li><li>中间内容：设置左右外边距为左右两栏的宽度；</li><li>注意：div排列时为左右中。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 三栏布局 - float --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;con1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 三栏布局 - float */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#con1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">80%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">306px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> solid red; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.left1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">252</span>, <span class="number">175</span>, <span class="number">175</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left; </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.right1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">137</span>, <span class="number">191</span>, <span class="number">252</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: right; </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">137</span>, <span class="number">252</span>, <span class="number">152</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-6-BFC规则"><a href="#1-6-BFC规则" class="headerlink" title="1.6 BFC规则"></a>1.6 BFC规则</h3><blockquote><p>BFC : 块级元素格式化上下文。它决定了块级元素如何对它的内容进行布局，以及和其他元素的关系的相互关系。BFC是一个独立的空间，里面的元素和外面的元素不会相互影响。</p></blockquote><ul><li><p>触发条件</p><ul><li>float不为none；</li><li>position属性为absolute和fixed；</li><li>overflow溢出隐藏的值不为visible；</li><li>html根标签；</li></ul></li><li><p>BFC有哪个规则</p><ul><li>浮动的元素会被父级计算高度（父级触发BFC）；</li><li>BFC区域和浮动元素不重叠；</li><li>margin不会传递给父级（父级触发了BFC）；</li><li>两个相邻元素上下margin会重叠；</li><li>BFC盒子内部的子标签按照垂直从上到下排列；</li><li>共用一个BFC盒子的垂直方向上的外边距会发生塌陷现象；</li><li>子标签都会在父盒子的左边界停靠；</li><li>BFC盒子是一个密闭空间，内外互不影响。</li></ul></li></ul><ul><li>可解决的问题<ul><li>外边距塌陷问题；</li><li>浮动特性；</li><li>清除浮动影响；</li><li>图文不环绕问题。</li></ul></li></ul><h2 id="2-Grid-网格-布局"><a href="#2-Grid-网格-布局" class="headerlink" title="2 Grid(网格)布局"></a>2 Grid(网格)布局</h2><p><a href="https://zhuanlan.zhihu.com/p/57713138">CSS-布局</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS布局&quot;&gt;&lt;a href=&quot;#CSS布局&quot; class=&quot;headerlink&quot; title=&quot;CSS布局&quot;&gt;&lt;/a&gt;CSS布局&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前</summary>
      
    
    
    
    <category term="CSS" scheme="http://is-yaojm.github.io/categories/CSS/"/>
    
    
    <category term="CSS-知识点" scheme="http://is-yaojm.github.io/tags/CSS-%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>CSS-盒子模型</title>
    <link href="http://is-yaojm.github.io/2022/04/28/CSS-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    <id>http://is-yaojm.github.io/2022/04/28/CSS-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</id>
    <published>2022-04-28T10:29:58.000Z</published>
    <updated>2022-04-28T10:30:40.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS-盒子模型"><a href="#CSS-盒子模型" class="headerlink" title="CSS_盒子模型"></a>CSS_盒子模型</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>盒子中的区域<ul><li>一个盒子有5个重要属性： <code>width(宽度)</code>、<code>height(高度)</code>、<code>padding(内边距)</code>、<code>border(边框)</code>、<code>margin(外边距)</code></li></ul></li></ul><h2 id="1-标准盒模型"><a href="#1-标准盒模型" class="headerlink" title="1 标准盒模型"></a>1 标准盒模型</h2><p><img src="%E6%A0%87%E5%87%86box.png" alt="标准盒子模型"></p><ul><li><p>标准盒子模型中“盒子”尺寸计算公式为：</p><ul><li><code>盒子实际尺寸</code> = <code>内容尺寸</code> + <code>内边距</code> + <code>边框宽度</code></li></ul></li><li><p>外边距合并问题：</p><ul><li>发生条件： 只有普通文档流中的块级元素的垂直外边距才会发生外边距合并。</li><li>外边距合并：是指当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距 = 两个发生合并外边距的高度中的较大值</li><li>合并情况<ul><li>当两个元素均有外边距时，它们将合成一个外边距，高度为元素外边距较大的那个值<br><img src="margin1.jpg" alt="垂直元素合并"></li><li>当一个元素包含在另一个元素中，它们的上下外边距也会合并。<br><img src="margin2.jpg" alt="元素包含合并"></li><li>外边距也可以和自身发生合并。当一个空元素有外边距但是没有边框或填充时，上下外边距会合并。<br><img src="margin3.jpg" alt="自身合并"></li><li>在自身合并的这种情况下，如果遇到另一个元素的外边距，还是会发生合并。<br><img src="margin4.jpg" alt="外边距合并"></li></ul></li></ul></li></ul><h2 id="2-怪异盒模型"><a href="#2-怪异盒模型" class="headerlink" title="2 怪异盒模型"></a>2 怪异盒模型</h2><p><img src="IE%E7%9B%92%E5%AD%90.png" alt="IE盒子模型"></p><ul><li><p>怪异盒模型与标准盒模型的区别：</p><ul><li>IE盒子模型的<code>content部分</code>包含了<code>border</code>和<code>padding</code>。</li><li>在<code>标准盒子模型</code>中：<code>width</code> 和 <code>height</code> 指的是<strong>内容区域的宽度和高度</strong>。增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸。</li><li>在<code>IE盒子模型</code>中：<code>width</code> 和 <code>height</code> 指的是<code>内容区域 + border + padding</code>的<strong>宽度和高度</strong>。</li></ul></li><li><p>IE盒模型使用设置：</p><ul><li><code>box-sizing: border-box;</code></li><li>需要注意的是该样式存在浏览器兼容性问题，使用时需要添加浏览器内核前缀。</li></ul></li><li><p>IE盒模型使用优势：</p><ul><li>IE盒模型对于百分比宽度布局有明显的便捷性，在布局时无需再去格外计算元素的内边距及边框。<br><img src="eg.jpg" alt="对比"></li></ul></li></ul><h2 id="3-flex盒模型"><a href="#3-flex盒模型" class="headerlink" title="3 flex盒模型"></a>3 flex盒模型</h2><h3 id="3-1-Flex布局是什么？"><a href="#3-1-Flex布局是什么？" class="headerlink" title="3.1 Flex布局是什么？"></a>3.1 Flex布局是什么？</h3><blockquote><p>Flexible box，弹性布局，用来为盒子模型提供最大的灵活性。</p></blockquote><ul><li>任何一个容器、行内元素都可以设置为flex布局。</li><li><code>webkit内核</code>的浏览器，必须加<code>-webkit</code>前缀。</li><li>注意，在设置flex布局之后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性都将<code>失效</code>。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="flex%E7%9B%92%E5%AD%90.png" alt="flex盒子模型"></p><h3 id="3-2-基本概念"><a href="#3-2-基本概念" class="headerlink" title="3.2 基本概念"></a>3.2 基本概念</h3><ul><li><p>容器：采用 Flex 布局的元素，称为 Flex 容器</p></li><li><p>项目：它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p></li><li><p>容器存在两根轴：</p><ul><li>水平主轴：main axis </li><li>垂直交叉轴： cross axis</li></ul></li><li><p>容器中的项目默认沿主轴排列。</p></li></ul><h3 id="3-3-容器的属性"><a href="#3-3-容器的属性" class="headerlink" title="3.3 容器的属性"></a>3.3 容器的属性</h3><table><thead><tr><th>属性</th><th>定义</th><th>使用</th></tr></thead><tbody><tr><td><code>flex-direction</code></td><td>决定主轴方向</td><td><code> row /row-reverse /column /column-reverse</code></td></tr><tr><td><code>flex-wrap</code></td><td>决定是否换行，如何换行</td><td><code> nowrap /wrap /wrap-reverse</code></td></tr><tr><td><code>flex-flow</code></td><td><code>flex-direction</code>和<code>flex-wrap</code>的简写形式</td><td><code>  &lt;flex-direction&gt; // &lt;flex-wrap&gt;</code></td></tr><tr><td><code>justify-content</code></td><td>项目在主轴上的对齐方式</td><td><code>flex-start /flex-end / center / space-between / space-around</code></td></tr><tr><td><code>align-items</code></td><td>项目在交叉轴上的排列方式</td><td><code>flex-start / flex-end / center / baseline / stretch</code></td></tr><tr><td><code>align-content</code></td><td>多根轴线的对齐方式</td><td><code>flex-start /flex-end /center / space-between /space-around /stretch</code></td></tr></tbody></table><h4 id="3-3-1-flex-direction"><a href="#3-3-1-flex-direction" class="headerlink" title="3.3.1 flex-direction"></a>3.3.1 <code>flex-direction</code></h4><ul><li>该属性决定主轴的方向（即内容的排列方向）</li><li>属性值：<ul><li><code>row</code>（默认值）： 水平向右；</li><li><code>row-reverse</code>： 水平向左；</li><li><code>column</code>： 垂直向下；</li><li><code>column-reverse</code>： 垂直向上。</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-2-flex-wrap"><a href="#3-3-2-flex-wrap" class="headerlink" title="3.3.2 flex-wrap"></a>3.3.2 <code>flex-wrap</code></h4><ul><li>该属性定义，当一行显示不下所有项目时是否换行，如何换行。(交叉轴方向决定项目换行方向)</li><li>属性值：<ul><li><code>nowrap</code>(默认值): <code>不换行</code> ；</li><li><code>wrap</code>：换行，第一行在<code>上</code>方；</li><li><code>wrap-reverse</code>： 换行，第一行在<code>下</code>方。</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-3-flex-flow"><a href="#3-3-3-flex-flow" class="headerlink" title="3.3.3 flex-flow"></a>3.3.3 <code>flex-flow</code></h4><ul><li>该属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-4-justify-content"><a href="#3-3-4-justify-content" class="headerlink" title="3.3.4 justify-content"></a>3.3.4 <code>justify-content</code></h4><ul><li>该属性定义了项目在主轴上的对齐方式。</li><li>属性值（具体对齐方式与轴的方向有关，假设主轴的方向为从左到右）<ul><li><code>flex-start</code>（默认值）：左对齐；</li><li><code>flex-end</code>：右对齐；</li><li><code>center</code>： 居中；</li><li><code>space-between</code>：两端对齐，项目之间的间隔都相等；</li><li><code>space-around</code>：每个项目两侧的间隔相等，所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-5-align-items"><a href="#3-3-5-align-items" class="headerlink" title="3.3.5 align-items"></a>3.3.5 <code>align-items</code></h4><ul><li>该属性定义了项目在交叉轴上如何对齐。</li><li>属性值（具体对齐方式与交叉轴方向有关，假设交叉轴从上到下）<ul><li><code>flex-start</code>：交叉轴的起点对齐。</li><li><code>flex-end</code>：交叉轴的终点对齐。</li><li><code>center</code>：交叉轴的中点对齐。</li><li><code>baseline</code>: 项目的第一行文字的基线对齐。</li><li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-6-align-content"><a href="#3-3-6-align-content" class="headerlink" title="3.3.6 align-content"></a>3.3.6 <code>align-content</code></h4><ul><li>该属性定义多根轴线的对齐方式，如果项目只有一根轴线，则不起作用。（沿着交叉轴方向的每一行，在容器中如何分布）</li><li>属性值<ul><li><code>flex-start</code>：与交叉轴的起点对齐。</li><li><code>flex-end</code>：与交叉轴的终点对齐。</li><li><code>center</code>：与交叉轴的中点对齐。</li><li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-项目属性"><a href="#3-4-项目属性" class="headerlink" title="3.4 项目属性"></a>3.4 项目属性</h3><table><thead><tr><th>属性</th><th>定义</th><th>使用</th></tr></thead><tbody><tr><td><code>order</code></td><td>定义项目的排列属性，数值越小，排列越靠前，默认为0</td><td><code>order: &lt;integer&gt;;</code></td></tr><tr><td><code>flex-grow</code></td><td>定义项目放大比例，默认为0，即如果存在剩余空间也不放大</td><td><code>flex-grow: &lt;number&gt;;</code></td></tr><tr><td><code>flex-shrink</code></td><td>定义项目的缩小比例，默认为1，即如果空间不足，项目缩小</td><td><code>flex-shrink: &lt;number&gt;;</code></td></tr><tr><td><code>flex-basis</code></td><td>定义在分配多余空间之前，项目占据的主轴空间，默认为auto</td><td><code>flex-basis: &lt;length&gt;/auto;</code></td></tr><tr><td><code>flex</code></td><td>放大，缩小和分配剩余空间的简写，默认值为<code> 0 1 auto</code></td><td><code> flex: none / [ &lt;&#39;flex-grow&#39;&gt; &lt;&#39;flex-shrink&#39;&gt;? // &lt;&#39;flex-basis&#39;&gt; ]</code></td></tr><tr><td><code>align-self</code></td><td>设置某个单个项目的对齐方式</td><td><code>align-self: auto /flex-start /flex-end /center /baseline /stretch;</code></td></tr></tbody></table><ul><li><p><code>flex-grow属性</code>：如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）；如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p></li><li><p><code>flex-shrink属性</code>：如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。<strong>负值对该属性无效</strong>。</p></li><li><p><code>flex-basis属性</code>: 定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p></li><li><p><code>flex属性</code>：该属性有两个快捷值：<code>auto</code> <code>(1 1 auto)</code> 和 <code>none</code> <code>(0 0 auto)</code>。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p></li><li><p><code>align-self属性</code>： 允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为<code>auto</code>，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p></li><li><p><a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">CSS-Flex布局基础-阮一峰老师</a></p></li><li><p><a href="https://www.ruanyifeng.com/blog/2015/07/flex-examples.html">CSS-Flex布局实例-阮一峰老师</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS-盒子模型&quot;&gt;&lt;a href=&quot;#CSS-盒子模型&quot; class=&quot;headerlink&quot; title=&quot;CSS_盒子模型&quot;&gt;&lt;/a&gt;CSS_盒子模型&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="CSS" scheme="http://is-yaojm.github.io/categories/CSS/"/>
    
    
    <category term="CSS-知识点" scheme="http://is-yaojm.github.io/tags/CSS-%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>CSS-动画</title>
    <link href="http://is-yaojm.github.io/2022/04/28/CSS-%E5%8A%A8%E7%94%BB/"/>
    <id>http://is-yaojm.github.io/2022/04/28/CSS-%E5%8A%A8%E7%94%BB/</id>
    <published>2022-04-28T10:21:33.000Z</published>
    <updated>2022-04-29T09:38:09.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS动画"><a href="#CSS动画" class="headerlink" title="CSS动画"></a>CSS动画</h1><ul><li><p>作用</p><ul><li>增强网页交互体验</li><li>减少代码量，让网页运行更快</li></ul></li><li><p>应用场景</p><ul><li>网页特效</li><li>用户交互</li></ul></li><li><p>浏览器兼容性问题<br><a href="CSS%E5%8A%A8%E7%94%BB.png">CSS3动画浏览器兼容性问题</a></p></li></ul><h2 id="1-过渡动画-transition"><a href="#1-过渡动画-transition" class="headerlink" title="1 过渡动画 transition"></a>1 过渡动画 transition</h2><blockquote><p>CSS过渡动画：为某一元素添加某种效果可以从一种样式转变到另一种。</p></blockquote><ul><li><p>实现条件：</p><ul><li>指定要添加效果的CSS属性；</li><li>指定效果的持续时间，若没有指定期限，transition默认值为0，没有效果。</li></ul></li><li><p>过渡属性</p><ul><li>transition-property ： 规定有应用过渡效果的css属性名称；<ul><li><code>transition-property: none|all| property;</code>   (没有 | 全部 | 列表)</li></ul></li><li>transition-duration ： 过渡效果持续时间； </li><li>transition-delay ： 过渡效果延迟时间；</li><li>transition-timing-function： 过渡效果动画<ul><li><code>transition-timing-function: linear|ease|ease-in|ease-out|ease-in-out|cubic-bezier(n,n,n,n);</code> (匀速 | 慢快慢 | 慢速开始 | 慢速结束 | 慢快慢 |)</li></ul></li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box1</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box1</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="comment">/* 过渡效果</span></span><br><span class="line"><span class="comment">        1-有过渡效果的属性   transition-property</span></span><br><span class="line"><span class="comment">        2-过渡持续时间       transition-duration</span></span><br><span class="line"><span class="comment">        3-延迟效果开始的时间 transition-delay</span></span><br><span class="line"><span class="comment">        4-过渡效果动画       transition-timing-function</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="attribute">transition</span>:width <span class="number">2s</span> ease;<span class="comment">/*宽度变化*/</span></span><br><span class="line">    <span class="attribute">transition</span>:all <span class="number">2s</span> ease;<span class="comment">/*all 宽高都变化*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-变换动画-transfrom"><a href="#2-变换动画-transfrom" class="headerlink" title="2 变换动画 transfrom"></a>2 变换动画 transfrom</h2><h3 id="2-1-2D转换"><a href="#2-1-2D转换" class="headerlink" title="2.1 2D转换"></a>2.1 2D转换</h3><ul><li>移动 translate()方法： 根据x轴和y轴位置给定的参数，从当前元素位置移动。</li><li>旋转 rotate() 方法： 旋转。正值顺时针，负值逆时针。</li><li>缩放 scale() 方法： 该元素增大或减小的大小，取决于x轴和y轴的参数。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-ms-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">/* IE 9 */</span></span><br><span class="line">-webkit-<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">/* Safari */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">/* 标准语法,宽度为原来大小的两倍，高度为原来的三倍 */</span></span><br></pre></td></tr></table></figure></li><li>倾斜 skew() 方法：包含两个参数值，分别表示X轴和Y轴倾斜的角度，如果第二个参数为空，则默认为0，参数为负表示向相反方向倾斜。<ul><li>skewX(<angle>);表示只在X轴(水平方向)倾斜。</li><li>skewY(<angle>);表示只在Y轴(垂直方向)倾斜。</li><li><code>transform:skew(&lt;angle&gt; [,&lt;angle&gt;]);</code></li></ul></li><li>matrix() 方法: matrix 方法有六个参数，包含旋转，缩放，移动（平移）和倾斜功能。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.test</span> <span class="selector-class">.translateX</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*  -moz 火狐；</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            -webkit 谷歌，苹果；</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            -ms  IE；</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            -o   欧鹏    </span></span></span><br><span class="line"><span class="comment"><span class="language-css">        */</span></span></span><br><span class="line"><span class="language-css">        -moz-<span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">20px</span>);</span></span><br><span class="line"><span class="language-css">        -webkit-<span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">20px</span>);</span></span><br><span class="line"><span class="language-css">        -ms-<span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">20px</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">20px</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#div1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 旋转 正值-顺时针 负值-逆时针*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 沿中心点旋转*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*设置旋转点 以设置的坐标为顶点旋转*/</span> </span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span> ;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 平移 - 相对于自己原来的位置移动 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*第一个参数对应X轴，第二个参数对应Y轴*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">50px</span>,<span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 缩放 */</span></span></span><br><span class="line"><span class="language-css">         <span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">2</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3D转换"><a href="#2-2-3D转换" class="headerlink" title="2.2 3D转换"></a>2.2 3D转换</h3><ul><li><p>转换属性<br><a href="%E8%BD%AC%E6%8D%A2%E5%B1%9E%E6%80%A7.png">转换属性</a></p></li><li><p>转换方法<br><a href="%E8%BD%AC%E5%8C%96%E6%96%B9%E6%B3%95.png">3D转换方法</a></p></li></ul><h2 id="3-keyframes与Animation"><a href="#3-keyframes与Animation" class="headerlink" title="3 @keyframes与Animation"></a>3 @keyframes与Animation</h2><blockquote><p>@keyframes规则： 创建动画，该规则内指定一个CSS样式和动画将逐步从目前的样式更改为新的样式。</p></blockquote><ul><li><code>animation属性</code>的子属性有：<ul><li><code>@keyframes 规则</code>: 一个动画想要运行，还应该包括 @keyframes 规则，在内部设定动画关键帧。(必有)</li><li><code>animation-name</code>：指定由 @keyframes 描述的关键帧名称。(必有)</li><li><code>animation-duration</code>：设置动画一个周期的时长。(必有)</li><li><code>animation-delay</code>：设置延时，即从元素加载完成之后到动画序列开始执行的这段时间。</li><li><code>animation-direction</code>：设置动画在每次运行完后是反向运行还是重新回到开始位置重复运行。</li><li><code>animation-iteration-count</code>：设置动画重复次数， 可以指定 infinite 无限次重复动画.</li><li><code>animation-play-state</code>：允许暂停和恢复动画。</li><li><code>animation-timing-function</code>：设置动画速度， 即通过建立加速度曲线，设置动画在关键帧之间是如何变化。</li><li><code>animation-fill-mode</code>：指定动画执行前后如何为目标元素应用样式。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#box1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: rebeccapurple;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation</span>:ease-in move <span class="number">3s</span>; </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> move&#123;</span></span><br><span class="line"><span class="language-css">        <span class="number">5%</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">15%</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>:red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">50%</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">30deg</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">70%</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">180deg</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-CSS3动画与JS动画的区别"><a href="#4-CSS3动画与JS动画的区别" class="headerlink" title="4 CSS3动画与JS动画的区别"></a>4 CSS3动画与JS动画的区别</h2><h3 id="4-1-JS"><a href="#4-1-JS" class="headerlink" title="4.1 JS"></a>4.1 JS</h3><h4 id="4-1-1-JS优点"><a href="#4-1-1-JS优点" class="headerlink" title="4.1.1 JS优点"></a>4.1.1 JS优点</h4><ol><li>控制能力更强，可以再动画播放过程中对动画进行精细控制，包括开始、暂停、终止和取消等；</li><li>效果比css3动画效果更丰富；</li><li>大多数情况下没有兼容性问题，而css3存在兼容性问题。</li></ol><h4 id="4-1-2-JS缺点"><a href="#4-1-2-JS缺点" class="headerlink" title="4.1.2 JS缺点"></a>4.1.2 JS缺点</h4><ol><li>复杂度高于CSS3；</li><li>在执行过程中，因其他进程的影响可能会出现阻塞从而出现丢帧的情况；</li><li>往往需要频繁操作DOM，对浏览器性能消耗较大。</li></ol><h3 id="4-2-CSS3"><a href="#4-2-CSS3" class="headerlink" title="4.2 CSS3"></a>4.2 CSS3</h3><h4 id="4-2-1-优点"><a href="#4-2-1-优点" class="headerlink" title="4.2.1 优点"></a>4.2.1 优点</h4><ol><li>在部分情况下浏览器可以对动画进行优化；</li><li>部分效果可以强制使用硬件加速。</li></ol><h4 id="4-2-2-缺点"><a href="#4-2-2-缺点" class="headerlink" title="4.2.2 缺点"></a>4.2.2 缺点</h4><ol><li>css3动画对运行进程控制较弱，只能在某些场景下控制动画的暂停和继续；</li><li>代码冗长。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS动画&quot;&gt;&lt;a href=&quot;#CSS动画&quot; class=&quot;headerlink&quot; title=&quot;CSS动画&quot;&gt;&lt;/a&gt;CSS动画&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;作用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增强网页交互体验&lt;/li&gt;
&lt;li&gt;减少代码量，让网页运行更快&lt;/</summary>
      
    
    
    
    <category term="CSS" scheme="http://is-yaojm.github.io/categories/CSS/"/>
    
    
    <category term="CSS-知识点" scheme="http://is-yaojm.github.io/tags/CSS-%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>CSS-BFC规则</title>
    <link href="http://is-yaojm.github.io/2022/04/28/CSS-BFC%E8%A7%84%E5%88%99/"/>
    <id>http://is-yaojm.github.io/2022/04/28/CSS-BFC%E8%A7%84%E5%88%99/</id>
    <published>2022-04-28T10:13:41.000Z</published>
    <updated>2022-04-28T10:14:10.288Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BFC规则"><a href="#BFC规则" class="headerlink" title="BFC规则"></a>BFC规则</h2><blockquote><p>BFC : 块级元素格式化上下文。它决定了块级元素如何对它的内容进行布局，以及和其他元素的关系的相互关系。BFC是一个独立的空间，里面的元素和外面的元素不会相互影响。</p></blockquote><ul><li><p>触发条件</p><ul><li>float不为none；</li><li>position属性为absolute和fixed；</li><li>overflow溢出隐藏的值不为visible；</li><li>html根标签；</li></ul></li><li><p>BFC有哪个规则</p><ul><li>浮动的元素会被父级计算高度（父级触发BFC）；</li><li>BFC区域和浮动元素不重叠；</li><li>margin不会传递给父级（父级触发了BFC）；</li><li>两个相邻元素上下margin会重叠；</li><li>BFC盒子内部的子标签按照垂直从上到下排列；</li><li>共用一个BFC盒子的垂直方向上的外边距会发生塌陷现象；</li><li>子标签都会在父盒子的左边界停靠；</li><li>BFC盒子是一个密闭空间，内外互不影响。</li></ul></li></ul><ul><li>可解决的问题<ul><li>外边距塌陷问题；</li><li>浮动特性；</li><li>清除浮动影响；</li><li>图文不环绕问题。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;BFC规则&quot;&gt;&lt;a href=&quot;#BFC规则&quot; class=&quot;headerlink&quot; title=&quot;BFC规则&quot;&gt;&lt;/a&gt;BFC规则&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;BFC : 块级元素格式化上下文。它决定了块级元素如何对它的内容进行布局，以及和其他元素的</summary>
      
    
    
    
    <category term="CSS" scheme="http://is-yaojm.github.io/categories/CSS/"/>
    
    
    <category term="CSS-知识点" scheme="http://is-yaojm.github.io/tags/CSS-%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>JS-call、apply和bind</title>
    <link href="http://is-yaojm.github.io/2022/04/28/JS-call%E3%80%81apply%E5%92%8Cbind/"/>
    <id>http://is-yaojm.github.io/2022/04/28/JS-call%E3%80%81apply%E5%92%8Cbind/</id>
    <published>2022-04-28T10:08:49.000Z</published>
    <updated>2022-05-05T11:18:25.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="改变this指向的方式"><a href="#改变this指向的方式" class="headerlink" title="改变this指向的方式"></a>改变this指向的方式</h2><h3 id="1-基础"><a href="#1-基础" class="headerlink" title="1 基础"></a>1 基础</h3><ol><li><p>简介</p><ul><li><code>call</code>和<code>apply</code>都属于<code>Function.prototype</code>的一个方法，它是JS引擎内在实现的，因为属于<code>Function.prototype</code>，所以每个<code>function对象实例</code>都有<code>call</code>和<code>apply</code>属性。</li><li>目标函数调用call和apply后，会直接被执行。</li><li>目标函数调用bind后，不会立即执行，而是返回一个新的函数，调用新函数才会执行目标函数。</li></ul></li><li><p>作用 ：改变this的指向。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    改变 this 的指向方式：</span></span><br><span class="line"><span class="comment">        1. call (this,arg1,arg2,arg3)</span></span><br><span class="line"><span class="comment">        2. apply (this,[arg1,arg2,arg3])</span></span><br><span class="line"><span class="comment">        3. bind (this,arg1,arg2,arg3) 手动调用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> oBtn1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn1&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fn5 = <span class="keyword">function</span> (<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, str);</span><br><span class="line">&#125;</span><br><span class="line">fn5.<span class="title function_">call</span>(oBtn1, <span class="string">&#x27;aa&#x27;</span>);</span><br><span class="line">fn5.<span class="title function_">apply</span>(oBtn1, [<span class="string">&#x27;aa&#x27;</span>]);</span><br><span class="line">fn5.<span class="title function_">bind</span>(oBtn1, <span class="string">&#x27;aa&#x27;</span>)();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">getName</span>.<span class="title function_">call</span>(obj2,  <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ));<span class="comment">// aaa</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">getName</span>.<span class="title function_">apply</span>(obj2, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]));<span class="comment">// aaa</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">getName</span>.<span class="title function_">bind</span>(obj2,<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> )());<span class="comment">// aaa</span></span><br></pre></td></tr></table></figure></li><li><p>区别 ：在于接收参数的方式不同</p><ul><li><code>call()</code> : 第一个参数是this值，其余参数都直接传递给函数。 传递给函数的<strong>参数必须逐个列举</strong>。</li><li><code>apply()</code> : 传递给函数的是<strong>参数数组</strong>。</li><li><code>bind()</code> ： 手动调用，返回的是函数。在使用时要加<code>()</code>。</li></ul></li><li><p>应用场景</p><ul><li>实现JS的继承，构造函数继承可以使用call实现；</li><li>判断JS的数据类型；<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用call判断js的数据类型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(&#123;&#125;)=== <span class="string">&#x27;[object Object]&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([])=== <span class="string">&#x27;[object Array]&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li>把伪数组转换为数组。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用call把伪数组转换成数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);<span class="comment">// Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>([...<span class="variable language_">arguments</span>]);<span class="comment">// es6  (3) [1, 2, 3]</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>));<span class="comment">//es5  (3) [1, 2, 3]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">get</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="2-call"><a href="#2-call" class="headerlink" title="2 call()"></a>2 call()</h3><ol><li><p>改变this指向</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// call实现改变this指向</span></span><br><span class="line">    <span class="keyword">var</span> person = &#123;</span><br><span class="line">        getName : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> person1 = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;ddd&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">getName</span>.<span class="title function_">call</span>(person1))</span><br></pre></td></tr></table></figure><ul><li>手写<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    手写call</span></span><br><span class="line"><span class="comment">    1. 写在哪？ Function.prototype后</span></span><br><span class="line"><span class="comment">    2. 对this进行判断，this必须是一个function，如果不是function则抛出异常</span></span><br><span class="line"><span class="comment">    3. 给上下文赋值，设置为接收到的参数或者是window</span></span><br><span class="line"><span class="comment">    4. 考虑参数，拿到除了第一个参数之外的参数</span></span><br><span class="line"><span class="comment">    5. 改变this的指向</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">mycall</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    context = context || <span class="variable language_">window</span>;<span class="comment">// 给context赋值</span></span><br><span class="line">    <span class="keyword">let</span> args = [...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>);<span class="comment">//获取除第一个参数之外的参数 </span></span><br><span class="line"></span><br><span class="line">    context.<span class="property">fn</span> = <span class="variable language_">this</span>;<span class="comment">// 改变this的指向</span></span><br><span class="line">    <span class="keyword">let</span> result = context.<span class="title function_">fn</span>(...args);<span class="comment">// 解构参数 </span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">getName</span>.<span class="title function_">mycall</span>(person1))</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="3-apply"><a href="#3-apply" class="headerlink" title="3 apply()"></a>3 apply()</h3><ul><li>手写apply()<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    手写apply</span></span><br><span class="line"><span class="comment">    与call的区别：将传入的第二个参数(数组)进行解构</span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    context = context || <span class="variable language_">window</span>;<span class="comment">// 给context赋值</span></span><br><span class="line">    context.<span class="property">fn</span> = <span class="variable language_">this</span>; <span class="comment">// 改变this的指向</span></span><br><span class="line">    <span class="keyword">let</span> result;</span><br><span class="line">    <span class="comment">// 判断是否有传入多的参数</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">arguments</span>[<span class="number">1</span>])&#123;</span><br><span class="line">        result = context.<span class="title function_">fn</span>(...<span class="variable language_">arguments</span>[<span class="number">1</span>]);<span class="comment">// 解构</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        result = context.<span class="title function_">fn</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> context.<span class="property">fn</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">getName</span>.<span class="title function_">myApply</span>(obj2,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]));<span class="comment">// 手写</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">getName</span>.<span class="title function_">apply</span>(obj2,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])); <span class="comment">// 调用</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-bind"><a href="#4-bind" class="headerlink" title="4 bind()"></a>4 bind()</h3><ul><li>手写bind()<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind1</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// arguments 可以获取一个函数的所有参数，arguments 是一个伪数组</span></span><br><span class="line">    <span class="comment">// 使用 Array.from() 方法将 arguments 伪数组转化成数组</span></span><br><span class="line">    <span class="keyword">const</span> args = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">    <span class="comment">// 获取 this 指向取出数组第一项，数组剩余的就是传递的参数</span></span><br><span class="line">    <span class="keyword">const</span> _this = args.<span class="title function_">shift</span>()</span><br><span class="line">    <span class="keyword">const</span> context = <span class="variable language_">this</span> <span class="comment">// 当前函数 fn1.bind(...) 中的 fn1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> context.<span class="title function_">apply</span>(_this, args)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this&#x27;</span>, <span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    fn1.<span class="title function_">bind1</span>(&#123; <span class="attr">x</span>: <span class="number">100</span> &#125;, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn2</span>();</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;改变this指向的方式&quot;&gt;&lt;a href=&quot;#改变this指向的方式&quot; class=&quot;headerlink&quot; title=&quot;改变this指向的方式&quot;&gt;&lt;/a&gt;改变this指向的方式&lt;/h2&gt;&lt;h3 id=&quot;1-基础&quot;&gt;&lt;a href=&quot;#1-基础&quot; class=&quot;</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://is-yaojm.github.io/categories/JavaScript/"/>
    
    
    <category term="JS-知识点" scheme="http://is-yaojm.github.io/tags/JS-%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>JS-防抖和节流</title>
    <link href="http://is-yaojm.github.io/2022/04/28/JS-%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <id>http://is-yaojm.github.io/2022/04/28/JS-%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</id>
    <published>2022-04-28T10:08:37.000Z</published>
    <updated>2022-04-28T10:10:57.817Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS的防抖和节流"><a href="#JS的防抖和节流" class="headerlink" title="JS的防抖和节流"></a>JS的防抖和节流</h2><h3 id="1-防抖函数-debounce"><a href="#1-防抖函数-debounce" class="headerlink" title="1 防抖函数 - debounce"></a>1 防抖函数 - debounce</h3><blockquote><p>防抖： 在一段时间内允许多次触发函数，但是只在最后一次有效执行。</p></blockquote><ul><li>理解<ul><li>当持续触发事件，在一定时间内没有再触发事件，事件处理函数才会执行一次。如果在设定的事件到来之前又一次触发了事件，就重新开始延时。</li><li>（栗子）：王者荣耀回城，如果多次点击回城按钮，则最后一次才有效。</li><li>（栗子）王者荣耀回城是防抖，放技能后进入冷却就是节流。</li></ul></li><li>实际应用<ul><li>使用echarts时，改变浏览器宽度的时候，希望重新渲染。echarts的图像，可以使用此函数，提升性能。</li><li>解决输入搜索时的bug：输入结束后n秒才进行搜索请求，n秒内又输入内容，则重新计时。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 要求 : 打印结果只出现一次,在键盘抬起后一秒产生 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 获取输入框</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 防抖函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">delay, callback</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> timer;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// timer变量需要一直保存在内存中</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 使用闭包（函数里面return出函数）</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">clearTimeout</span>(timer);</span></span><br><span class="line"><span class="language-javascript">            timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">callback</span>(value)</span></span><br><span class="line"><span class="language-javascript">            &#125;, delay)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 在外部输出value值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 将防抖函数的return值（函数）赋值给debounceFunc</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> debounceFunc = <span class="title function_">debounce</span>(<span class="number">1000</span>, fn);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 4. 函数触发</span></span></span><br><span class="line"><span class="language-javascript">    input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">debounceFunc</span>(e.<span class="property">target</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-节流函数-throttling"><a href="#2-节流函数-throttling" class="headerlink" title="2 节流函数 - throttling"></a>2 节流函数 - throttling</h3><blockquote><p>节流： 在一段事件内，只做一件事情。</p></blockquote><ul><li><p>理解</p><ul><li>当持续触发事件的时候，保证一段时间内只调用一次事件处理函数。</li></ul></li><li><p>应用</p><ul><li>表单的提交：鼠标不断点击触发，规定在n秒内多次点击只有一次生效。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;button&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 节流函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">thro</span>(<span class="params">func, wait</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> timerOut;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 使用闭包</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 根据timerOut的值 判断程序是否进行</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (!timerOut) &#123;</span></span><br><span class="line"><span class="language-javascript">                timerOut = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">func</span>();</span></span><br><span class="line"><span class="language-javascript">                    timerOut = <span class="literal">null</span>;<span class="comment">// 程序运行之后timerOut设置为空</span></span></span><br><span class="line"><span class="language-javascript">                &#125;, wait)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>());</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;button&#x27;</span>).<span class="property">onclick</span> = <span class="title function_">thro</span>(handle,<span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>防抖和节流都是用来防止高频率的JS代码的执行。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JS的防抖和节流&quot;&gt;&lt;a href=&quot;#JS的防抖和节流&quot; class=&quot;headerlink&quot; title=&quot;JS的防抖和节流&quot;&gt;&lt;/a&gt;JS的防抖和节流&lt;/h2&gt;&lt;h3 id=&quot;1-防抖函数-debounce&quot;&gt;&lt;a href=&quot;#1-防抖函数-debounc</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://is-yaojm.github.io/categories/JavaScript/"/>
    
    
    <category term="JS-知识点" scheme="http://is-yaojm.github.io/tags/JS-%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>JS-闭包</title>
    <link href="http://is-yaojm.github.io/2022/04/28/JS-%E9%97%AD%E5%8C%85/"/>
    <id>http://is-yaojm.github.io/2022/04/28/JS-%E9%97%AD%E5%8C%85/</id>
    <published>2022-04-28T10:08:28.000Z</published>
    <updated>2022-05-05T08:38:27.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="闭包与递归"><a href="#闭包与递归" class="headerlink" title="闭包与递归"></a>闭包与递归</h1><h2 id="1-闭包"><a href="#1-闭包" class="headerlink" title="1 闭包"></a>1 闭包</h2><blockquote><p>闭包： 可以在一个内层函数中访问到其外层函数的作用域。</p></blockquote><ul><li><p>闭包是<code>一个函数</code>加上到<code>创建函数</code>的<code>作用域的连接</code>，闭包“关闭”了函数的自由变量。</p></li><li><p>简单来讲：闭包就是指有权访问另一个函数作用域中的变量的函数。（b带着a的ao出去了。）</p><ul><li>1 : 有两个函数，作用域有连接关系；</li><li>2 ：变量不自由==》 会停留在内存中，不会销毁。 </li></ul></li><li><p>理解：外部函数调用之后其变量对象本应该销毁，但是闭包的存在是我们仍然可以访问外部函数的变量对象。</p></li><li><p>闭包的特性：</p><ul><li>函数嵌套函数；</li><li>函数内部引用了函数外部的参数和变量；</li><li>参数和变量不会被垃圾回收机制收回。</li></ul></li><li><p>闭包的优点：</p><ul><li>保护函数内的变量安全，实现封装，防止变量流入其他环境发生命名冲突；</li><li>在内存中维持一个变量，可以做缓存；</li><li>匿名自执行函数可以减少内存消耗。</li></ul></li><li><h2 id="闭包的作用-使用"><a href="#闭包的作用-使用" class="headerlink" title="闭包的作用/使用"></a>闭包的作用/使用</h2></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> name =<span class="string">&quot;asd&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="title function_">a</span>();</span><br></pre></td></tr></table></figure><ul><li>JS的防抖和节流使用了闭包。</li></ul><h2 id="2-递归"><a href="#2-递归" class="headerlink" title="2 递归"></a>2 递归</h2><blockquote><p>递归函数： 自己调用自己。</p></blockquote><ul><li><p>注意</p><ul><li>必须有结束条件，如果没有结束条件就会变成死循环。</li></ul></li><li><p>作用</p><ul><li>累加，阶乘；</li><li>数组扁平化：把多维数组变成一维数组；</li><li>dom树的递归；</li><li>斐波那契数列。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 累加器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n + <span class="title function_">add</span>(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="title function_">add</span>(<span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阶乘</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n * <span class="title function_">add</span>(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="title function_">factorial</span>(<span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组扁平化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> i=<span class="number">0</span> ; i&lt; arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> arr[i]==<span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line">            result = result.<span class="title function_">concat</span>( <span class="title function_">fun</span>(arr[i]));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr1 = <span class="title function_">fun</span>([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,[<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,[<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;p&#x27;</span>]]]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dom树的递归</span></span><br><span class="line"><span class="keyword">var</span> arrDom = [];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">dom</span>) &#123;</span><br><span class="line">    <span class="comment">// node保存父元素</span></span><br><span class="line">    <span class="keyword">let</span> node = dom.<span class="property">parentNode</span>;</span><br><span class="line">    <span class="comment">// 判断条件： 如果父节点存在</span></span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">        arrDom.<span class="title function_">push</span>(node);</span><br><span class="line">        <span class="title function_">fun</span>(node);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;aaa&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrDom);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;闭包与递归&quot;&gt;&lt;a href=&quot;#闭包与递归&quot; class=&quot;headerlink&quot; title=&quot;闭包与递归&quot;&gt;&lt;/a&gt;闭包与递归&lt;/h1&gt;&lt;h2 id=&quot;1-闭包&quot;&gt;&lt;a href=&quot;#1-闭包&quot; class=&quot;headerlink&quot; title=&quot;1 闭包&quot;</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://is-yaojm.github.io/categories/JavaScript/"/>
    
    
    <category term="JS-知识点" scheme="http://is-yaojm.github.io/tags/JS-%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>JS-Promise</title>
    <link href="http://is-yaojm.github.io/2022/04/28/JS-Promise/"/>
    <id>http://is-yaojm.github.io/2022/04/28/JS-Promise/</id>
    <published>2022-04-28T10:08:22.000Z</published>
    <updated>2022-04-28T10:10:27.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 2 4 3 </span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><ul><li>Promise的构造函数是同步执行</li><li>.then()是异步执行的</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Promise&quot;&gt;&lt;a href=&quot;#Promise&quot; class=&quot;headerlink&quot; title=&quot;Promise&quot;&gt;&lt;/a&gt;Promise&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://is-yaojm.github.io/categories/JavaScript/"/>
    
    
    <category term="JS-知识点" scheme="http://is-yaojm.github.io/tags/JS-%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>JS-原型与原型链</title>
    <link href="http://is-yaojm.github.io/2022/04/28/JS-%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://is-yaojm.github.io/2022/04/28/JS-%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</id>
    <published>2022-04-28T10:08:15.000Z</published>
    <updated>2022-04-28T10:24:29.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-原型与原型链"><a href="#1-原型与原型链" class="headerlink" title="1 原型与原型链"></a>1 原型与原型链</h2><h3 id="1-1-原型-prototype"><a href="#1-1-原型-prototype" class="headerlink" title="1.1 原型 prototype"></a>1.1 原型 prototype</h3><blockquote><p>原型：prototype </p></blockquote><ul><li>所有的<code>引用类型</code>都有一个<code>__proto__</code>(隐式原型)属性， 属性值是一个<code>普通的对象</code>；</li><li>所有的<code>函数</code>都有一个<code>prototype属性</code>， 属性值是一个普通的<code>对象</code>；</li><li>所有<code>引用类型的__proto__属性</code>都<code>指向</code>它<code>构造函数的prototype</code>。</li></ul><img src="proto.png" width="50%" height="60%"><p>注意：</p><ul><li><strong>常规的对象和数组没有原型，原型是函数特有的。</strong></li></ul><blockquote><p>constructor</p></blockquote><ul><li>每个原型对象都有一个 constructor 属性，指向相关联的构造函数，所以构造函数和构造函数的 prototype 是可以相互指向的。<img src="constructor.png" width="50%" height="60%"> </li></ul><h3 id="1-2-原型链-proto"><a href="#1-2-原型链-proto" class="headerlink" title="1.2 原型链 proto"></a>1.2 原型链 <em>proto</em></h3><blockquote><p>当访问一个对象的某个属性时，首先会在这个对象本身的属性上查找，如果没有找到，则会去它的<code>__proto__</code>(隐式原型)上查找，如果还没有找到就会在它的构造函数的<code>prototype</code>的<code>__proto__</code>中查找，这样一层一层向上查找就会形成一个链式结构，称为<code>原型链</code>。<br>谷歌浏览器改版后展示方式：<code>[[prototype]]</code>。<br>所有对象都有原型链。<br><img src="prototype.png" width="50%" height="60%"> </p></blockquote><h3 id="1-3-原型、原型链和继承"><a href="#1-3-原型、原型链和继承" class="headerlink" title="1.3 原型、原型链和继承"></a>1.3 原型、原型链和继承</h3><blockquote><p>原型的属性和方法可以被继承</p></blockquote> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getAge</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例</span></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">name</span>);</span><br><span class="line">person1.<span class="title function_">getAge</span>();</span><br></pre></td></tr></table></figure><blockquote><p>原型链的查找规则</p></blockquote><ul><li>从当前实例属性去查找，如果找到就返回，否者顺着原型链一层一层查找，直到找到null为止，若到null都没有找到，则报错。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例</span></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person1.<span class="property">age</span> = <span class="number">28</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1);</span><br><span class="line">person1.<span class="title function_">getAge</span>();</span><br></pre></td></tr></table></figure><p><img src="egPrototype.png" alt="原型链查找规则"></p><blockquote><p>查找自身的私有属性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person1.<span class="property">age</span> = <span class="number">28</span></span><br><span class="line">person1.<span class="property">demo</span> = <span class="string">&quot;demo&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用hasOwnProperty方法查找自身属性</span></span><br><span class="line"><span class="keyword">let</span> item;</span><br><span class="line"><span class="keyword">for</span>(item <span class="keyword">in</span> person1)&#123;</span><br><span class="line">    <span class="keyword">if</span>(person1.<span class="title function_">hasOwnProperty</span>(item))&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="itemProto.png" width="50%" height="60%"> <p><a href="https://www.cnblogs.com/Joe-and-Joan/p/10692844.html">原型与原型链</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-原型与原型链&quot;&gt;&lt;a href=&quot;#1-原型与原型链&quot; class=&quot;headerlink&quot; title=&quot;1 原型与原型链&quot;&gt;&lt;/a&gt;1 原型与原型链&lt;/h2&gt;&lt;h3 id=&quot;1-1-原型-prototype&quot;&gt;&lt;a href=&quot;#1-1-原型-protot</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://is-yaojm.github.io/categories/JavaScript/"/>
    
    
    <category term="JS-知识点" scheme="http://is-yaojm.github.io/tags/JS-%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>JS-this</title>
    <link href="http://is-yaojm.github.io/2022/04/28/JS-this/"/>
    <id>http://is-yaojm.github.io/2022/04/28/JS-this/</id>
    <published>2022-04-28T10:07:57.000Z</published>
    <updated>2022-05-05T11:27:33.274Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-JS中的this"><a href="#1-JS中的this" class="headerlink" title="1 JS中的this"></a>1 JS中的this</h2><ul><li>this指向： <code>this指的是函数运行时 所在的“环境”</code></li></ul><blockquote><p>使用情况1 ： 在函数中直接使用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">con</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(con);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数直接使用，get写法就等于get.call ，指向window</span></span><br><span class="line"><span class="title function_">get</span>(<span class="string">&#x27;hhh&#x27;</span>); </span><br><span class="line">get.<span class="title function_">call</span>(<span class="variable language_">window</span>, <span class="string">&#x27;hhh&#x27;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>使用情况2 ： 函数作为对象的方法被调用（谁调用，指向谁）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zhangsna&#x27;</span>,</span><br><span class="line">    <span class="attr">run</span>: <span class="keyword">function</span>(<span class="params">time</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>在跑步，最多跑<span class="subst">$&#123;time&#125;</span>min`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数方法被调用，谁调用就指向谁</span></span><br><span class="line">person.<span class="title function_">run</span>(<span class="number">30</span>);</span><br><span class="line">person.<span class="property">run</span>.<span class="title function_">call</span>(person, <span class="number">30</span>);</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = a.<span class="property">say</span>;</span><br><span class="line"><span class="comment">// var fun = function () &#123;</span></span><br><span class="line"><span class="comment">//     console.log(this.name);</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="title function_">fun</span>()   <span class="comment">// 函数直接调用 fun.call(window)  222</span></span><br><span class="line">a.<span class="title function_">say</span>() <span class="comment">// a.say.call(a)  111</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="number">333</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="keyword">function</span> (<span class="params">fun</span>) &#123;</span><br><span class="line">        <span class="title function_">fun</span>() <span class="comment">// fun.call(window,a.say)  则this指向a  222</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">b.<span class="title function_">say</span>(a.<span class="property">say</span>); <span class="comment">// 函数方法被调用</span></span><br><span class="line">b.<span class="property">say</span> = a.<span class="property">say</span>;</span><br><span class="line"><span class="comment">// b.say = function () &#123;</span></span><br><span class="line"><span class="comment">//     console.log(this.name);</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line">b.<span class="title function_">say</span>();   <span class="comment">// b.say.call(b) 333</span></span><br></pre></td></tr></table></figure><blockquote><p>普通函数的this指向问题：</p></blockquote><ul><li>谁调用这个方法/谁触发事件，this就指向谁<ul><li>事件处理函数 this =&gt; 指向绑定事件的那个dom元素</li><li>定时器中 this =&gt; 指向window</li><li>自定义函数 this =&gt; 指向window</li><li>自定义对象 this =&gt; 指向对象</li><li>在类中的 this   =&gt; 指向new出来的实例化对象</li></ul></li></ul><blockquote><p>箭头函数的 this 指向：</p></blockquote><ul><li>解释一：this指向的是定义时所在的对象，而不是使用时所在的对象。</li><li>解释二：箭头函数没有this，它的父作用域中的this是谁，箭头函数的this就是谁，否则就是window。</li><li>因为箭头函数没有this，所以它不能用作构造函数。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// -----4----- 箭头函数</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">x</span>:<span class="number">22</span>,</span><br><span class="line">    <span class="attr">say</span>: <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>); <span class="comment">// 11</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">say</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// -----5----- 箭头函数</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">birth</span>: <span class="number">1990</span>,</span><br><span class="line">    <span class="attr">getAge</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="variable language_">this</span>.<span class="property">birth</span>;<span class="comment">// 1990</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title function_">fn</span> = (<span class="params"></span>)=&gt; <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getFullYear</span>() - <span class="variable language_">this</span>.<span class="property">birth</span>;<span class="comment">//2022-1990</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">fn</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">getAge</span>(); <span class="comment">//32</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="2-了解this"><a href="#2-了解this" class="headerlink" title="2 了解this"></a>2 了解this</h2><ul><li><p>历史原因：</p><ul><li>JS语言设计this是跟内存的数据结构有关。</li></ul></li><li><p>原理</p><ul><li>因为函数可以在不同的环境下执行，所以就需要一种机制，能够在函数体内获取当前的运行环境。</li></ul></li><li><p>设计目的</p><ul><li>this的设计目的就是在函数体内，指向函数当前的运行环境。</li></ul></li></ul><h2 id="3-改变this指向的方法"><a href="#3-改变this指向的方法" class="headerlink" title="3 改变this指向的方法"></a>3 改变this指向的方法</h2><ul><li>call、apply、bind ： 是所有函数都具有的方法</li><li>注意：函数也是对象，函数具有方法</li></ul><p>*** - 引擎会将函数单独保存在内存中。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-JS中的this&quot;&gt;&lt;a href=&quot;#1-JS中的this&quot; class=&quot;headerlink&quot; title=&quot;1 JS中的this&quot;&gt;&lt;/a&gt;1 JS中的this&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;this指向： &lt;code&gt;this指的是函数运行时 所在的“环</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://is-yaojm.github.io/categories/JavaScript/"/>
    
    
    <category term="JS-知识点" scheme="http://is-yaojm.github.io/tags/JS-%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>HTML-input标签</title>
    <link href="http://is-yaojm.github.io/2022/04/28/HTML-input%E6%A0%87%E7%AD%BE/"/>
    <id>http://is-yaojm.github.io/2022/04/28/HTML-input%E6%A0%87%E7%AD%BE/</id>
    <published>2022-04-28T10:06:11.000Z</published>
    <updated>2022-04-28T10:06:43.702Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML中的input标签的type"><a href="#HTML中的input标签的type" class="headerlink" title="HTML中的input标签的type"></a>HTML中的input标签的type</h2><blockquote><p>input标签： 用于搜集用户信息，根据不同的type属性值，输入字段拥有很多种形式。</p></blockquote><ul><li>HTML5中增加的新类型：<ul><li>color、date、datetime、datetime-local、month、week、time、email、number、range、search、tel 和 url。</li><li>语法：<code>&lt;input type=&quot; value &quot;&gt;</code></li></ul></li></ul><table><thead><tr><th>type值</th><th>含义</th></tr></thead><tbody><tr><td>color</td><td>定义拾色器。</td></tr><tr><td>date</td><td>定义 date 控件（包括年、月、日，不包括时间）。</td></tr><tr><td>datetime</td><td>定义 date 和 time 控件（包括年、月、日、时、分、秒、几分之一秒，基于 UTC 时区）。</td></tr><tr><td>datetime-local</td><td>定义 date 和 time 控件（包括年、月、日、时、分、秒、几分之一秒，不带时区）。</td></tr><tr><td>email</td><td>定义用于 e-mail 地址的字段。</td></tr><tr><td>month</td><td>定义 month 和 year 控件（不带时区）。</td></tr><tr><td>number</td><td>定义用于输入数字的字段。</td></tr><tr><td>range</td><td>定义用于精确值不重要的输入数字的控件（比如 slider 控件）。</td></tr><tr><td>search</td><td>定义用于输入搜索字符串的文本字段。</td></tr><tr><td>tel</td><td>定义用于输入电话号码的字段。</td></tr><tr><td>time</td><td>定义用于输入时间的控件（不带时区）。</td></tr><tr><td>url</td><td>定义用于输入 URL 的字段。</td></tr><tr><td>week</td><td>定义 week 和 year 控件（不带时区）。</td></tr></tbody></table><ul><li>常见：<ul><li>text(默认) ：文本框</li><li>password：密码框</li><li>checkbox：多选框</li><li>radio：单选框</li><li>submit：提交按钮,  reset：重置按钮, image：图片按钮, button：普通按钮</li><li>file：选择文件的控件</li><li>search：搜索框</li><li>hidden： 不显示的控件</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HTML中的input标签的type&quot;&gt;&lt;a href=&quot;#HTML中的input标签的type&quot; class=&quot;headerlink&quot; title=&quot;HTML中的input标签的type&quot;&gt;&lt;/a&gt;HTML中的input标签的type&lt;/h2&gt;&lt;blockquo</summary>
      
    
    
    
    <category term="HTML" scheme="http://is-yaojm.github.io/categories/HTML/"/>
    
    
    <category term="HTML-知识点" scheme="http://is-yaojm.github.io/tags/HTML-%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
</feed>
